<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Kitware/react-vtk-js 初探</title>
    <url>/2021-06-21-Kitware-react-vtk-js-%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<p>Kitware/react-vtk-js 是vtk组织官方出的react vtk组件，运用于医学成像。<br>git地址: <a href="https://github.com/alexiusll/react-vtk-js">https://github.com/alexiusll/react-vtk-js</a></p>
<span id="more"></span>

<h3 id="官方简介（机翻预警）："><a href="#官方简介（机翻预警）：" class="headerlink" title="官方简介（机翻预警）："></a>官方简介（机翻预警）：</h3><p>基于React的声明式vtk.js可视化渲染管线。换句话说，这个项目允许你利用vtk.js使用React/XML语法来描述你的3D场景。有点像X3dom的X3D格式，除了这里我们利用了React组件，可以扩展到构建自己的工具。</p>
<p>该项目于2021年1月份创建，属于是很新的React组件，现在迭代的速度也很快。</p>
<p>相比OHIF出品的 react-vtkjs-viewport 的React组件，虽然两者都是封装vtkjs的组件，但是目前 react-vtkjs-viewport 使用的VTKJS的版本老旧，为 “vtk.js”: “^11.14.0”, ，最新的commit 是2020年，可能官方后续不会再更新这个库了。但是Kitware 写的React组件中，使用的vtkjs版本为 “@kitware/vtk.js”: “18.2.0” ，版本很新。</p>
<p>但是目前 Kitware/react-vtk-js 可用的文档很少，所以现在记录它的使用方法。目前只能通过React props和官方的例子大致窥探一下这个组件的使用方法。</p>
<p>Kitware/react-vtk-js的效果：</p>
<p><img src="/2021-06-21-Kitware-react-vtk-js-%E5%88%9D%E6%8E%A2/14391549-07fd54019af0d586.png" alt="1"></p>
<h3 id="1-首先把-Kitware-react-vtk-js-代码克隆到自己的仓库"><a href="#1-首先把-Kitware-react-vtk-js-代码克隆到自己的仓库" class="headerlink" title="1.首先把 Kitware/react-vtk-js 代码克隆到自己的仓库"></a>1.首先把 Kitware/react-vtk-js 代码克隆到自己的仓库</h3><p>注意！！！这个项目没有yarn.lock 文件，所以如果要安装依赖，只能使用npm install ，然后再使用yarn import 来生成相应的yarn.lock。</p>
<p><img src="/2021-06-21-Kitware-react-vtk-js-%E5%88%9D%E6%8E%A2/14391549-eb6200a5174c2c04.png" alt="项目结构"></p>
<p>Kitware/react-vtk-js 的项目结构包括自己封装的vtk组件，和使用例子，使用例里面依赖了自己封装的vtk组件。</p>
<p><img src="/2021-06-21-Kitware-react-vtk-js-%E5%88%9D%E6%8E%A2/14391549-9a8f6cd1e90841d7.png" alt="使用例"></p>
<p>使用 yarn dev 开启测试服务器，webpack执行打包操作，webpack打包的时间比较长，然后就可以看到官方的使用例。</p>
<p>一个医学影像体绘制的例子:</p>
<p><img src="/2021-06-21-Kitware-react-vtk-js-%E5%88%9D%E6%8E%A2/14391549-6c203e1d926871be.png" alt="体绘制"></p>
<h3 id="2-体绘制实现分析"><a href="#2-体绘制实现分析" class="headerlink" title="2.体绘制实现分析"></a>2.体绘制实现分析</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">View</span>,</span><br><span class="line">  <span class="title class_">VolumeRepresentation</span>,</span><br><span class="line">  <span class="title class_">VolumeController</span>,</span><br><span class="line">  <span class="title class_">Reader</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;react-vtk-js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Example</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> array = [];</span><br><span class="line">  <span class="keyword">while</span> (array.<span class="property">length</span> &lt; <span class="number">1000</span>) &#123;</span><br><span class="line">    array.<span class="title function_">push</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">width:</span> &#x27;<span class="attr">100vw</span>&#x27;, <span class="attr">height:</span> &#x27;<span class="attr">100vh</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">View</span> <span class="attr">id</span>=<span class="string">&#x27;0&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">VolumeRepresentation</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">VolumeController</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Reader</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">vtkClass</span>=<span class="string">&#x27;vtkXMLImageDataReader&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">url</span>=<span class="string">&#x27;https://data.kitware.com/api/v1/item/59e12e988d777f31ac6455c5/download&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">VolumeRepresentation</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Render React object</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Example</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.root&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>源码结构非常简单，说明它封装的东西比较多。<br>对于医学影像系统而言，数据源十分重要，我们首先分析它的数据源的格式：<br>在Reader中有一个 url : <a href="https://data.kitware.com/api/v1/item/59e12e988d777f31ac6455c5/download">https://data.kitware.com/api/v1/item/59e12e988d777f31ac6455c5/download</a><br>点开之后，发现它是一个 .vti格式的文件。</p>
<p>VTI文件大多属于Kitware公司的ParaView。ParaView是一种需要将大型数据集可视化的应用程序。ParaView是一个开源系统。ParaView是一个建立在VTK之上的交钥匙可视化系统，使VTK更容易使用一个点和点击界面。</p>
<p>前面写了一个生成数组的代码，似乎没有任何作用，把它直接注释掉，免得产生干扰。</p>
<h4 id="先从-Reader-进行分析"><a href="#先从-Reader-进行分析" class="headerlink" title="先从 Reader 进行分析"></a>先从 Reader 进行分析</h4><p>它的 props</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The ID used to identify this component.</span></span><br><span class="line"><span class="attr">id</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line"><span class="comment">//  downstream  连接 端口</span></span><br><span class="line"><span class="attr">port</span>: <span class="title class_">PropTypes</span>.<span class="property">number</span>,</span><br><span class="line"><span class="comment">// vtkClass name</span></span><br><span class="line"><span class="attr">vtkClass</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line"><span class="comment">// 要从中获取数据的url集</span></span><br><span class="line"><span class="attr">url</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line"><span class="comment">// 将文本数据 进行 处理</span></span><br><span class="line"><span class="attr">parseAsText</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line"><span class="comment">// 设置二进制数据从base64字符串处理</span></span><br><span class="line"><span class="attr">parseAsArrayBuffer</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line"><span class="comment">// 自动渲染 当 数据加载</span></span><br><span class="line"><span class="attr">renderOnUpdate</span>: <span class="title class_">PropTypes</span>.<span class="property">bool</span>,</span><br><span class="line"><span class="comment">// 自动重置相机  当 数据加载</span></span><br><span class="line"><span class="attr">resetCameraOnUpdate</span>: <span class="title class_">PropTypes</span>.<span class="property">bool</span>,</span><br><span class="line"><span class="attr">children</span>: <span class="title class_">PropTypes</span>.<span class="title function_">oneOfType</span>([</span><br><span class="line">  <span class="title class_">PropTypes</span>.<span class="title function_">arrayOf</span>(<span class="title class_">PropTypes</span>.<span class="property">node</span>),</span><br><span class="line">  <span class="title class_">PropTypes</span>.<span class="property">node</span>,</span><br><span class="line">]),</span><br></pre></td></tr></table></figure>

<p>它的默认参数:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">port</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">vtkClass</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="attr">renderOnUpdate</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">resetCameraOnUpdate</span>: <span class="literal">true</span>,</span><br></pre></td></tr></table></figure>

<p>体渲染的时候，vtkClass 被设置为 vtkXMLImageDataReader，看看它做了什么：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> vtk <span class="keyword">from</span> <span class="string">&#x27;@kitware/vtk.js/vtk.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (vtkClass &amp;&amp; (!previous || vtkClass !== previous.<span class="property">vtkClass</span>)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">reader</span> = <span class="title function_">vtk</span>(&#123; vtkClass &#125;);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">downstream</span>.<span class="title function_">setInputConnection</span>(</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">reader</span>.<span class="title function_">getOutputPort</span>(),</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">port</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>它通过 vtkClass 从vtk中拿了一个 reader<br>这里需要参考一下 vtk 的源码:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> constructor = factoryMapping[obj.<span class="property">vtkClass</span>];</span><br></pre></td></tr></table></figure>

<p>发现它是一个工厂方法<br>而 vtkXMLImageDataReader 其实是一个vtk.js的 api<br>参考：<br><a href="https://kitware.github.io/vtk-js/api/IO_XML_XMLImageDataReader.html">https://kitware.github.io/vtk-js/api/IO_XML_XMLImageDataReader.html</a></p>
<h4 id="VolumeController"><a href="#VolumeController" class="headerlink" title="VolumeController"></a>VolumeController</h4><p>它的 props</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">VolumeController</span>.<span class="property">defaultProps</span> = &#123;</span><br><span class="line">  <span class="attr">size</span>: [<span class="number">400</span>, <span class="number">150</span>],</span><br><span class="line">  <span class="attr">rescaleColorMap</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">VolumeController</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="comment">// The ID used to identify this component.</span></span><br><span class="line">  <span class="attr">id</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line">  <span class="comment">// Controller size in pixels</span></span><br><span class="line">  <span class="attr">size</span>: <span class="title class_">PropTypes</span>.<span class="title function_">arrayOf</span>(<span class="title class_">PropTypes</span>.<span class="property">number</span>),</span><br><span class="line">  <span class="comment">// Use opacity range to rescale color map</span></span><br><span class="line">  <span class="attr">rescaleColorMap</span>: <span class="title class_">PropTypes</span>.<span class="property">bool</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>它提供了一个 控制窗口</p>
<p><img src="/2021-06-21-Kitware-react-vtk-js-%E5%88%9D%E6%8E%A2/14391549-e6d57d0d6272d454.png" alt="VolumeController"></p>
<h4 id="VolumeRepresentation"><a href="#VolumeRepresentation" class="headerlink" title="VolumeRepresentation"></a>VolumeRepresentation</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * VolumeRepresentation is responsible to convert a vtkPolyData into rendering</span></span><br><span class="line"><span class="comment"> * VolumeRepresentation负责将vtkPolyData转换为渲染</span></span><br><span class="line"><span class="comment"> * It takes the following set of properties:</span></span><br><span class="line"><span class="comment"> *   - colorBy: [&#x27;POINTS&#x27;, &#x27;&#x27;],</span></span><br><span class="line"><span class="comment"> *   - pointSize: 1,</span></span><br><span class="line"><span class="comment"> *   - color: [1,1,1],</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>它的props</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">VolumeRepresentation</span>.<span class="property">defaultProps</span> = &#123;</span><br><span class="line">  <span class="attr">colorMapPreset</span>: <span class="string">&#x27;erdc_rainbow_bright&#x27;</span>,</span><br><span class="line">  <span class="attr">colorDataRange</span>: <span class="string">&#x27;auto&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">VolumeRepresentation</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="comment">// The ID used to identify this component.</span></span><br><span class="line">  <span class="attr">id</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line">  <span class="comment">// Properties to set to the mapper</span></span><br><span class="line">  <span class="attr">mapper</span>: <span class="title class_">PropTypes</span>.<span class="property">object</span>,</span><br><span class="line">  <span class="comment">// Properties to set to the volume</span></span><br><span class="line">  <span class="attr">volume</span>: <span class="title class_">PropTypes</span>.<span class="property">object</span>,</span><br><span class="line">  <span class="comment">// Properties to set to the volume.property</span></span><br><span class="line">  <span class="attr">property</span>: <span class="title class_">PropTypes</span>.<span class="property">object</span>,</span><br><span class="line">  <span class="comment">// Preset name for the lookup table color map</span></span><br><span class="line">  <span class="attr">colorMapPreset</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line">  <span class="comment">// Data range use for the colorMap</span></span><br><span class="line">  <span class="attr">colorDataRange</span>: <span class="title class_">PropTypes</span>.<span class="title function_">oneOfType</span>([</span><br><span class="line">    <span class="title class_">PropTypes</span>.<span class="title function_">arrayOf</span>(<span class="title class_">PropTypes</span>.<span class="property">number</span>),</span><br><span class="line">    <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line">  ]),</span><br><span class="line"></span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">PropTypes</span>.<span class="title function_">oneOfType</span>([</span><br><span class="line">    <span class="title class_">PropTypes</span>.<span class="title function_">arrayOf</span>(<span class="title class_">PropTypes</span>.<span class="property">node</span>),</span><br><span class="line">    <span class="title class_">PropTypes</span>.<span class="property">node</span>,</span><br><span class="line">  ]),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="最重要的-view"><a href="#最重要的-view" class="headerlink" title="最重要的 view"></a>最重要的 view</h4><p>很长的 props </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">View</span>.<span class="property">defaultProps</span> = &#123;</span><br><span class="line">  <span class="attr">style</span>: &#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="string">&#x27;100%&#x27;</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="string">&#x27;100%&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">background</span>: [<span class="number">0.2</span>, <span class="number">0.3</span>, <span class="number">0.4</span>],</span><br><span class="line">  <span class="attr">cameraPosition</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">  <span class="attr">cameraViewUp</span>: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">  <span class="attr">cameraParallelProjection</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">triggerRender</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">triggerResetCamera</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">interactorSettings</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">button</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">action</span>: <span class="string">&#x27;Rotate&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">button</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">action</span>: <span class="string">&#x27;Pan&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">button</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="attr">action</span>: <span class="string">&#x27;Zoom&#x27;</span>,</span><br><span class="line">      <span class="attr">scrollEnabled</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">button</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">action</span>: <span class="string">&#x27;Pan&#x27;</span>,</span><br><span class="line">      <span class="attr">alt</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">button</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">action</span>: <span class="string">&#x27;Zoom&#x27;</span>,</span><br><span class="line">      <span class="attr">control</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">button</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">action</span>: <span class="string">&#x27;Select&#x27;</span>,</span><br><span class="line">      <span class="attr">shift</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">button</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">action</span>: <span class="string">&#x27;Roll&#x27;</span>,</span><br><span class="line">      <span class="attr">alt</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">shift</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">pickingModes</span>: [],</span><br><span class="line">  <span class="attr">showCubeAxes</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">View</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="comment">// The ID used to identify this component.</span></span><br><span class="line">  <span class="attr">id</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line">  <span class="comment">// Allow user to override the default View style &#123; width: &#x27;100%&#x27;, height: &#x27;100%&#x27; &#125;</span></span><br><span class="line">  <span class="attr">style</span>: <span class="title class_">PropTypes</span>.<span class="property">object</span>,</span><br><span class="line">  <span class="comment">// Allow user to provide custom className associated to root element</span></span><br><span class="line">  <span class="attr">className</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The color of the view background using 3 floating numbers</span></span><br><span class="line"><span class="comment">   * between 0-1 of Red, Green, Blue component.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">background</span>: <span class="title class_">PropTypes</span>.<span class="property">array</span>,</span><br><span class="line">  <span class="comment">// Configure the interactions</span></span><br><span class="line">  <span class="attr">interactorSettings</span>: <span class="title class_">PropTypes</span>.<span class="property">array</span>,</span><br><span class="line">  <span class="comment">// Initial camera position from an object in [0,0,0]</span></span><br><span class="line">  <span class="attr">cameraPosition</span>: <span class="title class_">PropTypes</span>.<span class="property">array</span>,</span><br><span class="line">  <span class="comment">// Initial camera position from an object in [0,0,0]</span></span><br><span class="line">  <span class="attr">cameraViewUp</span>: <span class="title class_">PropTypes</span>.<span class="property">array</span>,</span><br><span class="line">  <span class="comment">// Use parallel projection (default: false)</span></span><br><span class="line">  <span class="attr">cameraParallelProjection</span>: <span class="title class_">PropTypes</span>.<span class="property">bool</span>,</span><br><span class="line">  <span class="comment">// Property use to trigger a render when changing.</span></span><br><span class="line">  <span class="attr">triggerRender</span>: <span class="title class_">PropTypes</span>.<span class="property">number</span>,</span><br><span class="line">  <span class="comment">// Property use to trigger a resetCamera when changing.</span></span><br><span class="line">  <span class="attr">triggerResetCamera</span>: <span class="title class_">PropTypes</span>.<span class="property">number</span>,</span><br><span class="line">  <span class="comment">// List of representation to show</span></span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">PropTypes</span>.<span class="title function_">oneOfType</span>([</span><br><span class="line">    <span class="title class_">PropTypes</span>.<span class="title function_">arrayOf</span>(<span class="title class_">PropTypes</span>.<span class="property">node</span>),</span><br><span class="line">    <span class="title class_">PropTypes</span>.<span class="property">node</span>,</span><br><span class="line">  ]),</span><br><span class="line">  <span class="comment">// List of picking listeners to bind. The supported values are `click`, `hover` and `select`. By default it is disabled (empty array).</span></span><br><span class="line">  <span class="attr">pickingModes</span>: <span class="title class_">PropTypes</span>.<span class="title function_">arrayOf</span>(<span class="title class_">PropTypes</span>.<span class="property">string</span>),</span><br><span class="line">  <span class="comment">// User callback function for click</span></span><br><span class="line">  <span class="attr">onClick</span>: <span class="title class_">PropTypes</span>.<span class="property">func</span>,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Read-only prop. To use this, make sure that `pickingModes` contains `click`.</span></span><br><span class="line"><span class="comment">   * This prop is updated when an element in the map is clicked. This contains</span></span><br><span class="line"><span class="comment">   * the picking info describing the object being clicked on.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">clickInfo</span>: <span class="title class_">PropTypes</span>.<span class="property">object</span>,</span><br><span class="line">  <span class="comment">// User callback function for hover</span></span><br><span class="line">  <span class="attr">onHover</span>: <span class="title class_">PropTypes</span>.<span class="property">func</span>,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Read-only prop. To use this, make sure that `pickingModes` contains `hover`.</span></span><br><span class="line"><span class="comment">   * This prop is updated when an element in the map is hovered. This contains</span></span><br><span class="line"><span class="comment">   * the picking info describing the object being hovered.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">hoverInfo</span>: <span class="title class_">PropTypes</span>.<span class="property">object</span>,</span><br><span class="line">  <span class="comment">// User callback function for box select</span></span><br><span class="line">  <span class="attr">onSelect</span>: <span class="title class_">PropTypes</span>.<span class="property">func</span>,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Read-only prop. To use this, make sure that `pickingModes` contains `select`.</span></span><br><span class="line"><span class="comment">   * This prop is updated when an element in the view is select. This contains</span></span><br><span class="line"><span class="comment">   * the picking info describing the object being select along with the frustrum.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">selectInfo</span>: <span class="title class_">PropTypes</span>.<span class="property">object</span>,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Show/Hide Cube Axes for the given representation</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">showCubeAxes</span>: <span class="title class_">PropTypes</span>.<span class="property">bool</span>,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Configure cube Axes style by overriding the set of properties defined</span></span><br><span class="line"><span class="comment">   * https://github.com/Kitware/vtk-js/blob/HEAD/Sources/Rendering/Core/CubeAxesActor/index.js#L703-L719</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">cubeAxesStyle</span>: <span class="title class_">PropTypes</span>.<span class="property">object</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在示例项目中 view 只传入了 id，其他都为默认参数<br>基本来看，默认参数设置了一些view窗口的操作方式，和它的样式</p>
]]></content>
      <categories>
        <category>医学影像处理</category>
      </categories>
      <tags>
        <tag>医学影像处理</tag>
      </tags>
  </entry>
  <entry>
    <title>实现处理DICOM数据，并在VTKJS中渲染</title>
    <url>/2021-06-21-%E5%AE%9E%E7%8E%B0%E5%A4%84%E7%90%86DICOM%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%B9%B6%E5%9C%A8VTKJS%E4%B8%AD%E6%B8%B2%E6%9F%93/</url>
    <content><![CDATA[<p>关于 Dicom Image Volume Rendering<br>如果想使用 vtk 来进行医学影像的体绘制的话，必须使用它们推荐的 .vti格式的文件</p>
<span id="more"></span>
<p>如果想用 .dcm 的文件直接进行渲染似乎是行不通的，于是我看到了一个git 上面的issue<br><a href="https://github.com/Kitware/vtk-js/issues/678">https://github.com/Kitware/vtk-js/issues/678</a><br>官方说：</p>
<h4 id="jourdain-commented-on-30-Mar-2018"><a href="#jourdain-commented-on-30-Mar-2018" class="headerlink" title="jourdain commented on 30 Mar 2018"></a>jourdain commented on 30 Mar 2018</h4><p>To read a <code>vti</code> file you need to use that <a href="https://github.com/Kitware/vtk-js/tree/master/Sources/IO/XML/XMLImageDataReader">reader</a> like <a href="https://github.com/Kitware/vtk-js/blob/master/Examples/Applications/VolumeViewer/index.js#L66-L67">here</a></p>
<p>The http reader use a different format which can be generated with that <a href="https://github.com/Kitware/vtk-js/blob/master/Utilities/DataGenerator/vtk-data-converter.py">script</a>.</p>
<p>But if you want to load DICOM, you should consider itk-js for loading your file natively and respect the orientation of the volume. <a href="https://github.com/thewtex">@thewtex</a> can tell you more about it.</p>
<p>Also you can see DICOM loading using itk-js and vtk-js here with <a href="https://kitware.github.io/pv-web-viewer/">ParaView Glance</a>.</p>
<h4 id="thewtex-commented-on-3-Apr-2018"><a href="#thewtex-commented-on-3-Apr-2018" class="headerlink" title="thewtex commented on 3 Apr 2018"></a>thewtex commented on 3 Apr 2018</h4><p>Yes, as <a href="https://github.com/jourdain">@jourdain</a> mentioned, we can load the DICOM images directly via <a href="https://insightsoftwareconsortium.github.io/itk-js/">itk.js</a>.</p>
<p>To load a multi-frame DICOM file (the entire volume is in one file), use <a href="https://insightsoftwareconsortium.github.io/itk-js/api/browser.html">itk/readImageFile</a>. To load a DICOM file series, use <a href="https://insightsoftwareconsortium.github.io/itk-js/api/browser.html#readImageDICOMFileSeries-fileList-gt-itk-Image">itk/readImageDICOMFileSeries</a>. Both of these are enabled in <a href="https://kitware.github.io/itk-vtk-image-viewer/">this reference application</a>.</p>
<h3 id="简单来说"><a href="#简单来说" class="headerlink" title="简单来说"></a>简单来说</h3><p>意思是说，如果想渲染 DICOM格式的文件，可以使用itk-js来实现：<br>这个库的地址是：<br><a href="https://github.com/InsightSoftwareConsortium/itk-js">https://github.com/InsightSoftwareConsortium/itk-js</a></p>
<h3 id="依然拷贝它的源码进行简单的测试"><a href="#依然拷贝它的源码进行简单的测试" class="headerlink" title="依然拷贝它的源码进行简单的测试"></a>依然拷贝它的源码进行简单的测试</h3><p>同样没有 yarn.lock，用npm install 进行安装<br>但是这个项目根本没有运行测试服务器的地方，所以装了也没啥用….<br>只能进入example 来看看示例代码了</p>
<p>itk的示例代码基本没有什么内容，但是他的文档至少把API给整理出来了。</p>
<p>我们可以看到有2个重要的API对处理DICOM数据十分重要：</p>
<h3 id="1-关键API-readImageFile-webWorker-file-gt-webWorker-image"><a href="#1-关键API-readImageFile-webWorker-file-gt-webWorker-image" class="headerlink" title="1. 关键API : readImageFile(webWorker, file) -&gt; { webWorker, image }"></a>1. 关键API : readImageFile(webWorker, file) -&gt; { webWorker, image }</h3><p>Read an image from a File.<br>这个API可以处理单个的DICOM数据</p>
<h3 id="2-关键API-readImageDICOMFileSeries-fileList-singleSortedSeries-false-gt-image-webWorkerPool"><a href="#2-关键API-readImageDICOMFileSeries-fileList-singleSortedSeries-false-gt-image-webWorkerPool" class="headerlink" title="2.关键API : readImageDICOMFileSeries(fileList, singleSortedSeries=false) -&gt; { image, webWorkerPool }"></a>2.关键API : readImageDICOMFileSeries(fileList, singleSortedSeries=false) -&gt; { image, webWorkerPool }</h3><p>Read an image from a series of DICOM File‘s stored in an Array or FileList.<br>If the files are known to be from a single, sorted series, the last argument can be set to true for performance.<br>The used webWorkerPool is returned to enable resource cleanup, if required.<br>这个API可以处理一个series中的DICOM数据</p>
<p>后来又参考了很多 thewtex 给出的示例代码，花了很长的时间…</p>
<h3 id="干脆就直接给出实现读取多个DICOM数据的流程"><a href="#干脆就直接给出实现读取多个DICOM数据的流程" class="headerlink" title="干脆就直接给出实现读取多个DICOM数据的流程:"></a>干脆就直接给出实现读取多个DICOM数据的流程:</h3><h4 id="0-巨坑！！首先需要配置webpack的环境"><a href="#0-巨坑！！首先需要配置webpack的环境" class="headerlink" title="(0) 巨坑！！首先需要配置webpack的环境"></a>(0) 巨坑！！首先需要配置webpack的环境</h4><p>如果是使用了umi，请在config下加入新的copy配置参数：<br>提示：umi里面集成了 CopyPlugin ，如果利用 chainWebpack 来配置 CopyPlugin 的话，可能会覆盖掉它自己生成的配置，导致Public目录失效，坑！！！</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">copy</span>: [</span><br><span class="line">   <span class="comment">// 设置要复制到输出目录的文件或文件夹</span></span><br><span class="line">   &#123;</span><br><span class="line">     <span class="attr">from</span>: path.<span class="title function_">join</span>(<span class="string">&#x27;node_modules&#x27;</span>, <span class="string">&#x27;itk&#x27;</span>, <span class="string">&#x27;WebWorkers&#x27;</span>),</span><br><span class="line">     <span class="attr">to</span>: path.<span class="title function_">join</span>(<span class="string">&#x27;itk&#x27;</span>, <span class="string">&#x27;WebWorkers&#x27;</span>),</span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="attr">from</span>: path.<span class="title function_">join</span>(<span class="string">&#x27;node_modules&#x27;</span>, <span class="string">&#x27;itk&#x27;</span>, <span class="string">&#x27;ImageIOs&#x27;</span>),</span><br><span class="line">     <span class="attr">to</span>: path.<span class="title function_">join</span>(<span class="string">&#x27;itk&#x27;</span>, <span class="string">&#x27;ImageIOs&#x27;</span>),</span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="attr">from</span>: path.<span class="title function_">join</span>(<span class="string">&#x27;node_modules&#x27;</span>, <span class="string">&#x27;itk&#x27;</span>, <span class="string">&#x27;MeshIOs&#x27;</span>),</span><br><span class="line">     <span class="attr">to</span>: path.<span class="title function_">join</span>(<span class="string">&#x27;itk&#x27;</span>, <span class="string">&#x27;MeshIOs&#x27;</span>),</span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="attr">from</span>: path.<span class="title function_">join</span>(<span class="string">&#x27;node_modules&#x27;</span>, <span class="string">&#x27;itk&#x27;</span>, <span class="string">&#x27;PolyDataIOs&#x27;</span>),</span><br><span class="line">     <span class="attr">to</span>: path.<span class="title function_">join</span>(<span class="string">&#x27;itk&#x27;</span>, <span class="string">&#x27;PolyDataIOs&#x27;</span>),</span><br><span class="line">   &#125;,</span><br><span class="line"> ],</span><br></pre></td></tr></table></figure>
<p>如果是正常的webpack，请参考官方示例下的webpack</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">CopyPlugin</span>([</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">from</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;node_modules&#x27;</span>, <span class="string">&#x27;itk&#x27;</span>, <span class="string">&#x27;WebWorkers&#x27;</span>),</span><br><span class="line">      <span class="attr">to</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>, <span class="string">&#x27;itk&#x27;</span>, <span class="string">&#x27;WebWorkers&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">from</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;node_modules&#x27;</span>, <span class="string">&#x27;itk&#x27;</span>, <span class="string">&#x27;ImageIOs&#x27;</span>),</span><br><span class="line">      <span class="attr">to</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>, <span class="string">&#x27;itk&#x27;</span>, <span class="string">&#x27;ImageIOs&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">from</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;node_modules&#x27;</span>, <span class="string">&#x27;itk&#x27;</span>, <span class="string">&#x27;PolyDataIOs&#x27;</span>),</span><br><span class="line">      <span class="attr">to</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>, <span class="string">&#x27;itk&#x27;</span>, <span class="string">&#x27;PolyDataIOs&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">from</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;node_modules&#x27;</span>, <span class="string">&#x27;itk&#x27;</span>, <span class="string">&#x27;MeshIOs&#x27;</span>),</span><br><span class="line">      <span class="attr">to</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>, <span class="string">&#x27;itk&#x27;</span>, <span class="string">&#x27;MeshIOs&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  ])</span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<h4 id="1-首先需要发网络请求"><a href="#1-首先需要发网络请求" class="headerlink" title="(1) 首先需要发网络请求"></a>(1) 首先需要发网络请求</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> axios</span><br><span class="line">      .<span class="title function_">get</span>(</span><br><span class="line">        <span class="string">&#x27;http://&#123;DICOM_IP&#125;/series/bfd34afd-f97a9f7c-c0551428-93a0c48a-0285c8ce?_=1624179883017&#x27;</span>,</span><br><span class="line">      )</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; <span class="title class_">Instances</span> &#125; = response.<span class="property">data</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> index <span class="keyword">in</span> <span class="title class_">Instances</span>) &#123;</span><br><span class="line">          files_paths.<span class="title function_">push</span>(<span class="string">`http://&#123;DICOM_IP&#125;/instances/<span class="subst">$&#123;Instances[index]&#125;</span>/file`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="keyword">const</span> fetchFiles = files_paths.<span class="title function_">map</span>(<span class="function">(<span class="params">file_path, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> path = file_path;</span><br><span class="line">      <span class="keyword">return</span> axios.<span class="title function_">get</span>(path, &#123; <span class="attr">responseType</span>: <span class="string">&#x27;blob&#x27;</span> &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> jsFile = <span class="keyword">new</span> <span class="title class_">File</span>([response.<span class="property">data</span>], <span class="string">`<span class="subst">$&#123;index&#125;</span>.dcm`</span>); <span class="comment">// `$&#123;index&#125;.dcm` ` file_path.split(&#x27;/&#x27;).slice(-1)[0]`</span></span><br><span class="line">        <span class="keyword">return</span> jsFile;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<p>这里处理一组DICOM，首先获取所以DICOM文件的地址，然后生产了一组读取DCOM文件的异步方法。<br>这里从URL中获取，你也可以从本地来获取文件列表。<br>反正，需要获取到一个 文件的列表</p>
<h4 id="2-转换图片数据"><a href="#2-转换图片数据" class="headerlink" title="(2) 转换图片数据"></a>(2) 转换图片数据</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>(fetchFiles).<span class="title function_">then</span>(<span class="function">(<span class="params">files</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">readImageDICOMFileSeries</span>(files).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123; webWorker, image &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// webWorker.terminate();</span></span><br><span class="line">        <span class="comment">// printImage(image);</span></span><br><span class="line">        <span class="keyword">const</span> imageData = vtkITKHelper.<span class="title function_">convertItkToVtkImage</span>(image);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>
<p>这一步比较简单，直接调用方法对生成的图片列表执行ITK的方法<br>注意：ITK的方法进行了更新，只需要传入一个参数，如果参考老的代码会发生错误（坑！！<br>然后将itk image 格式再转换成 vtk 的image data，这里是VTK 里面一个方法做的事情，叫 ITKHelper</p>
<h4 id="3-坑中坑！利用VTK渲染-imageData"><a href="#3-坑中坑！利用VTK渲染-imageData" class="headerlink" title="(3) 坑中坑！利用VTK渲染 imageData"></a>(3) 坑中坑！利用VTK渲染 imageData</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> view3d = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;view3d&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fullScreenRenderer = vtkFullScreenRenderWindow.<span class="title function_">newInstance</span>(&#123;</span><br><span class="line">  <span class="attr">rootContainer</span>: view3d,</span><br><span class="line">  <span class="attr">containerStyle</span>: &#123;</span><br><span class="line">    <span class="attr">height</span>: <span class="string">&#x27;100%&#x27;</span>,</span><br><span class="line">    <span class="attr">overflow</span>: <span class="string">&#x27;hidden&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">background</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> renderer = fullScreenRenderer.<span class="title function_">getRenderer</span>();</span><br><span class="line"><span class="keyword">const</span> renderWindow = fullScreenRenderer.<span class="title function_">getRenderWindow</span>();</span><br><span class="line">renderWindow.<span class="title function_">getInteractor</span>().<span class="title function_">setDesiredUpdateRate</span>(<span class="number">15</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source = imageData;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pipeline handling</span></span><br><span class="line">actor.<span class="title function_">setMapper</span>(mapper);</span><br><span class="line">mapper.<span class="title function_">setInputData</span>(source);</span><br><span class="line"><span class="comment">// mapper.setSampleDistance(0.7);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sampleDistance =</span><br><span class="line">  <span class="number">0.7</span> *</span><br><span class="line">  <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(</span><br><span class="line">    source</span><br><span class="line">      .<span class="title function_">getSpacing</span>()</span><br><span class="line">      .<span class="title function_">map</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> v * v)</span><br><span class="line">      .<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b, <span class="number">0</span>),</span><br><span class="line">  );</span><br><span class="line">mapper.<span class="title function_">setSampleDistance</span>(sampleDistance);</span><br><span class="line"></span><br><span class="line">renderer.<span class="title function_">addActor</span>(actor);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lookupTable = vtkColorTransferFunction.<span class="title function_">newInstance</span>();</span><br><span class="line"><span class="keyword">const</span> piecewiseFunction = vtkPiecewiseFunction.<span class="title function_">newInstance</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// create color and opacity transfer functions</span></span><br><span class="line"><span class="comment">// 加了UI之后 这里的设置其实可以删除</span></span><br><span class="line">lookupTable.<span class="title function_">addRGBPoint</span>(<span class="number">200.0</span>, <span class="number">0.4</span>, <span class="number">0.2</span>, <span class="number">0.0</span>);</span><br><span class="line">lookupTable.<span class="title function_">addRGBPoint</span>(<span class="number">2000.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line">piecewiseFunction.<span class="title function_">addPoint</span>(<span class="number">200.0</span>, <span class="number">0.0</span>);</span><br><span class="line">piecewiseFunction.<span class="title function_">addPoint</span>(<span class="number">1200.0</span>, <span class="number">0.5</span>);</span><br><span class="line">piecewiseFunction.<span class="title function_">addPoint</span>(<span class="number">3000.0</span>, <span class="number">0.8</span>);</span><br><span class="line"></span><br><span class="line">actor.<span class="title function_">getProperty</span>().<span class="title function_">setRGBTransferFunction</span>(<span class="number">0</span>, lookupTable);</span><br><span class="line">actor.<span class="title function_">getProperty</span>().<span class="title function_">setScalarOpacity</span>(<span class="number">0</span>, piecewiseFunction);</span><br><span class="line"></span><br><span class="line">actor.<span class="title function_">getProperty</span>().<span class="title function_">setScalarOpacityUnitDistance</span>(<span class="number">0</span>, <span class="number">4.5</span>);</span><br><span class="line">actor.<span class="title function_">getProperty</span>().<span class="title function_">setInterpolationTypeToLinear</span>();</span><br><span class="line">actor.<span class="title function_">getProperty</span>().<span class="title function_">setUseGradientOpacity</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">actor.<span class="title function_">getProperty</span>().<span class="title function_">setGradientOpacityMinimumValue</span>(<span class="number">0</span>, <span class="number">15</span>);</span><br><span class="line">actor.<span class="title function_">getProperty</span>().<span class="title function_">setGradientOpacityMinimumOpacity</span>(<span class="number">0</span>, <span class="number">0.0</span>);</span><br><span class="line">actor.<span class="title function_">getProperty</span>().<span class="title function_">setGradientOpacityMaximumValue</span>(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">actor.<span class="title function_">getProperty</span>().<span class="title function_">setGradientOpacityMaximumOpacity</span>(<span class="number">0</span>, <span class="number">1.0</span>);</span><br><span class="line">actor.<span class="title function_">getProperty</span>().<span class="title function_">setShade</span>(<span class="number">1</span>);</span><br><span class="line">actor.<span class="title function_">getProperty</span>().<span class="title function_">setAmbient</span>(<span class="number">0.2</span>);</span><br><span class="line">actor.<span class="title function_">getProperty</span>().<span class="title function_">setDiffuse</span>(<span class="number">0.7</span>);</span><br><span class="line">actor.<span class="title function_">getProperty</span>().<span class="title function_">setSpecular</span>(<span class="number">0.3</span>);</span><br><span class="line">actor.<span class="title function_">getProperty</span>().<span class="title function_">setSpecularPower</span>(<span class="number">8.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Control UI</span></span><br><span class="line"><span class="keyword">const</span> controllerWidget = vtkVolumeController.<span class="title function_">newInstance</span>(&#123;</span><br><span class="line">  <span class="attr">size</span>: [<span class="number">400</span>, <span class="number">150</span>],</span><br><span class="line">  <span class="attr">rescaleColorMap</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line">controllerWidget.<span class="title function_">setContainer</span>(view3d);</span><br><span class="line">controllerWidget.<span class="title function_">setupContent</span>(renderWindow, actor, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">fullScreenRenderer.<span class="title function_">setResizeCallback</span>(<span class="function">(<span class="params">&#123; width, height &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 2px padding + 2x1px boder + 5px edge = 14</span></span><br><span class="line">  <span class="keyword">if</span> (width &gt; <span class="number">414</span>) &#123;</span><br><span class="line">    controllerWidget.<span class="title function_">setSize</span>(<span class="number">400</span>, <span class="number">150</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    controllerWidget.<span class="title function_">setSize</span>(width - <span class="number">14</span>, <span class="number">150</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  controllerWidget.<span class="title function_">render</span>();</span><br><span class="line">  fpsMonitor.<span class="title function_">update</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// First render</span></span><br><span class="line">renderer.<span class="title function_">resetCamera</span>();</span><br><span class="line">renderWindow.<span class="title function_">render</span>();</span><br></pre></td></tr></table></figure>
<p>网上大多数代码就给出了如何实现从DICOM数据 =》vtk image data 的转换，后续如何进行渲染很难找到例子。<br>官方的例子都惦记着他那个.vti格式文件的渲染，所以他直接就写一个 Reader 来进行文件读取了，没有直接拿image data进行渲染的。<br>我一开始尝试用  <a href="https://github.com/Kitware/react-vtk-js">React-vtk-js</a> 这个库进行渲染，但是估计是不行，它也需要一个Reader进行配合，可能才能进行渲染。<br>无赖之下，还是只能参考 <a href="https://github.com/Kitware/itk-vtk-viewer">itk-vtk-viewer</a> 这个实现，但是这个代码迭代的版本的太多，最新的代码结构太复杂，我只好从头来看，于是我尝试了很多旧版本的代码，但是始终都是黑屏的，也没报错，就是渲染不出3D的体素数据，我真的哭死。<br>我发现这个 itk-vtk-viewer 这个库一开始用了一些vtk比较原始的实现方法，似乎从 4.0开始，后面就用了 vtk 里面代理的方法进行实现，我也把代码抄了一下，但是始终就是黑屏，真的哭死…<br>第二天，我发现vtk的示例里面有一个 volume的app示例代码，我也抄了一下，但是依旧是渲染不出来，要吐了。关键它也不报错，我不知道问题是出在什么地方，我不知道是我数据出问题了，还是渲染出问题了。<br>最后我又偷了一个volume 的代码，我发现终于渲染出来了！问题就是好像是出在 <strong>lookupTable</strong> 和 <strong>piecewiseFunction</strong> 的设置上面，如果没有设置它们可能就是渲染不出来影像。于是一个很坑的地方出现了，我之前调试代码的时候，一直没有把UI这个东西加上，我以为不会对结果造成影像，于是<strong>lookupTable</strong> 和 <strong>piecewiseFunction</strong> 的参数，我也学示例代码里面写，把它们留白。但是实际上如果加了 <strong>UI</strong>,就会自动设置它们的参数，坑！！！</p>
<h3 id="最后渲染结果："><a href="#最后渲染结果：" class="headerlink" title="最后渲染结果："></a>最后渲染结果：</h3><p><img src="/2021-06-21-%E5%AE%9E%E7%8E%B0%E5%A4%84%E7%90%86DICOM%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%B9%B6%E5%9C%A8VTKJS%E4%B8%AD%E6%B8%B2%E6%9F%93/1.png" alt="渲染结果"></p>
<p>最后由于loader可能还是有问题，所以UI界面不能正常展示，但是基础的功能有了。</p>
<h3 id="TODO…"><a href="#TODO…" class="headerlink" title="TODO…"></a>TODO…</h3><p>这次被这个问题坑了很久，感觉还是对VTKJS的渲染不太熟悉<br>后续还是得熟悉一下 VTKJS 的代码，把现在的代码结构改成 VTKJS代理的那个实现方式…</p>
]]></content>
      <categories>
        <category>医学影像处理</category>
      </categories>
      <tags>
        <tag>医学影像处理</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客搭建记录v1.0</title>
    <url>/2021-06-23-hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95v1/</url>
    <content><![CDATA[<h2 id="🔷v1-0-简要"><a href="#🔷v1-0-简要" class="headerlink" title="🔷v1.0 简要"></a>🔷v1.0 简要</h2><p>​    原本我写的公开文章一直是保存在简书的，但是最近在简书更新文章的时候，发现文章发表需要一段时间的审核，不能立即看到，还有一个问题是担心简书的安全性，如果哪天简书删库的了（虽然基本不可能，我的文章可能就都消失了。</p>
<span id="more"></span>
<p>​    利用Hexo来搭建博客实际上就是在本地写MarkDown文本，md文件是非常好备份的，所以安全性实际上非常好，现在写好的md文件实际上都存在了github上，我想github应该是永远不会倒闭的..</p>
<p>​    现在博客1.0版本已经搭建好了，我还把官方样式改成了普罗米亚的，部署在这个域名下：</p>
<p>​    <a href="https://www.alexiusll.top/">https://www.alexiusll.top/</a></p>
<p>​    在2022年6月之前应该都是可以访问的，域名过期了可能就要考虑是否续费，还是换域名了。</p>
<p>​    <img src="/2021-06-23-hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95v1/100.png" alt="部署图"></p>
<p>​    </p>
<h2 id="📋v1-0-主要框架和技术"><a href="#📋v1-0-主要框架和技术" class="headerlink" title="📋v1.0 主要框架和技术"></a>📋v1.0 主要框架和技术</h2><ul>
<li>使用了一个静态的博客生成器 Hexo</li>
</ul>
<p>官方网站：</p>
<p><a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p>
<p>其实中文的文档内容不是很全，如果要看完全体的话请切换语言为英文。</p>
<ul>
<li>主题使用了一个最主流的 Next</li>
</ul>
<p>中文网站：</p>
<p><a href="http://theme-next.iissnan.com/">http://theme-next.iissnan.com/</a></p>
<p>应该是现在用的最多的一种主题，所以质量还是有保证，扩展性也很强。</p>
<h2 id="📃v1-0-实现的功能"><a href="#📃v1-0-实现的功能" class="headerlink" title="📃v1.0 实现的功能"></a>📃v1.0 实现的功能</h2><ul>
<li><p>写博文，博文分类，归档，标签 （基于Hexo）</p>
</li>
<li><p>评论 （基于valine）</p>
</li>
<li><p>显示 阅读次数 （基于valine）</p>
</li>
<li><p>百度统计接入 （似乎也没什么用..可以考虑删了）</p>
</li>
<li><p>显示文章字数和大致阅读时间</p>
</li>
<li><p>修改 Next 的原生样式</p>
</li>
</ul>
<h2 id="❌部署过程中存在的坑"><a href="#❌部署过程中存在的坑" class="headerlink" title="❌部署过程中存在的坑"></a>❌部署过程中存在的坑</h2><ul>
<li><p><strong>travis-ci 的部署文件</strong></p>
<p>中文文档里面给的是用不了的，需要改一下branch，还有install，node_js</p>
<p>配置文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sudo:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">14</span> <span class="comment"># use nodejs v14 LTS</span></span><br><span class="line"><span class="attr">cache:</span> <span class="string">npm</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">yarn</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">main</span> <span class="comment"># build master branch only</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">generate</span> <span class="comment"># generate static files</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">provider:</span> <span class="string">pages</span></span><br><span class="line">  <span class="attr">skip-cleanup:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">github-token:</span> <span class="string">$GH_TOKEN</span></span><br><span class="line">  <span class="attr">keep-history:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">on:</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">local-dir:</span> <span class="string">public</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="📕存在的问题"><a href="#📕存在的问题" class="headerlink" title="📕存在的问题"></a>📕存在的问题</h2><ul>
<li><p>由于Hexo本质是其实是一个生成静态页面的工具，实际上是没有后台的，于是它有一些根本性的问题</p>
<p>1.每次编译，所有的md文件都需要重新编译处理一次，编译速度会随着文章数量的增长而上升。所以未来有大量文章的情况下，可能会出现编译速度的问题，目前还没有看到一些好的解决方案，现在方案可以先凑合着用着。</p>
<p>2.需要储存数据的场景下，例如评论，得储存在一些第三方的存储服务器上，例如Leancloud</p>
</li>
<li><p>对于图片的处理，Hexo官方的方案不是很好：</p>
<p>在本地写md的时候，图片的url可能会制定到一个相对路径下，例如 xxx/1.png ，在本地就可以看到这个图片，没有什么问题。但是到了部署的时候，得使用url 1.png ，要去掉 xxx/ 这个前缀，要不然到了线上，这个图片就不显示。官方的意思的是我们本地写的时候应该直接就写成 1.png ，不加前缀，但是这样不是很方便，于是我加了一个国人写的插件 ： hexo-asset-link ，每次编译都要把路径重新制定一下。</p>
</li>
</ul>
<h2 id="🟠未来展望"><a href="#🟠未来展望" class="headerlink" title="🟠未来展望"></a>🟠未来展望</h2><p>由于Hexo搭建博客存在一些根本性的问题，未来可能采取的方案有：</p>
<p>1.直接搭建有后台系统的博客，但是可能得花费的时间很长，而且做的效果也不好很好</p>
<p>2.调研一些其他的博客系统 例如 wordpress</p>
<p>3.编译多个Hexo的网站，将比较老的文章放到另外一个Hexo网站中，不再进行编译</p>
<p>总而言之，现在的方案应该是能支持1-2年的使用了，问题还是可以慢慢的解决。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>一次特殊的旅行：重回武汉理工</title>
    <url>/2021-06-23-%E4%B8%80%E6%AC%A1%E7%89%B9%E6%AE%8A%E7%9A%84%E6%97%85%E8%A1%8C%EF%BC%9A%E9%87%8D%E5%9B%9E%E6%AD%A6%E6%B1%89%E7%90%86%E5%B7%A5/</url>
    <content><![CDATA[<p>不太擅长写小作文哈，想着博客好不容易弄好，得写点东西装饰一哈，我语文不太好，写东西喜欢记流水账，图一乐就好哈哈..</p>
<h3 id="🟠朝花夕拾"><a href="#🟠朝花夕拾" class="headerlink" title="🟠朝花夕拾"></a>🟠朝花夕拾</h3><p>​    2020年由于疫情的缘故，始终不能返校，大概6月初的时候，学校只给我们留了一天的时间，让我们把寝室里的东西收拾回去，当时有一个室友，回不来学校，我们只能帮他把东西邮寄回去，面都见不到。没有一个像样的同学道别会，没有线下的毕业典礼，更没有毕业旅行，我们就这样匆匆毕业了…</p>
<span id="more"></span>

<p>​    后来，学校搞个很拉跨的线上的直播，当时我们还在微博上吐槽这个事情：</p>
<p><img src="/2021-06-23-%E4%B8%80%E6%AC%A1%E7%89%B9%E6%AE%8A%E7%9A%84%E6%97%85%E8%A1%8C%EF%BC%9A%E9%87%8D%E5%9B%9E%E6%AD%A6%E6%B1%89%E7%90%86%E5%B7%A5/111.png" alt="111"></p>
<p>学校搞直播这方面还是没什么经验啊，整场直播只能用事故来形容…</p>
<p>但是同学们在b站刷的弹幕还是很有节目效果的233333</p>
<h3 id="🟤重返理工"><a href="#🟤重返理工" class="headerlink" title="🟤重返理工"></a>🟤重返理工</h3><p>​    今年6月中旬的时候，我收到了通知，说2020可以作为校友去参加毕业典礼。我想我就在隔壁读研，去一趟也挺方便，于是就欣然报名了。一同去的还有本科的室友，文中就简称裴宝。</p>
<p>​    6月22号的早上我们集合之后，就直接去了武汉理工大学的西院，我们将在西院礼堂举办毕业典礼。到了之后，我们先是找本院毕业的同学，由于现在疫情又变得严重了，又或者大家都到了五湖四海，事业繁忙，难以抽出时间，比如我的另外2个室友都身处外地，不方便过来，所以今天能来的同学不多。我们简单的交流了一下现在的情况，我聊到的几个同学都还在读研究生，听说他们的导师是放养式，平时事不多，突然有点羡慕😅…想想后面web影像系统的开发任务，人有点麻</p>
<p>​    </p>
<h3 id="🔵毕业典礼"><a href="#🔵毕业典礼" class="headerlink" title="🔵毕业典礼"></a>🔵毕业典礼</h3><p>​    在我们换上学士服之后，去了西院礼堂，经过简单的排练后，毕业典礼就开始了…</p>
<p><img src="/2021-06-23-%E4%B8%80%E6%AC%A1%E7%89%B9%E6%AE%8A%E7%9A%84%E6%97%85%E8%A1%8C%EF%BC%9A%E9%87%8D%E5%9B%9E%E6%AD%A6%E6%B1%89%E7%90%86%E5%B7%A5/IMG_20210622_135658-min.jpg" alt="IMG_20210622_135658-min"></p>
<p>17级的导员给我发了学校的纪念版口罩：</p>
<p><img src="/2021-06-23-%E4%B8%80%E6%AC%A1%E7%89%B9%E6%AE%8A%E7%9A%84%E6%97%85%E8%A1%8C%EF%BC%9A%E9%87%8D%E5%9B%9E%E6%AD%A6%E6%B1%89%E7%90%86%E5%B7%A5/IMG_20210622_132211-min.jpg" alt="IMG_20210622_132211-min"></p>
<p>校长进行了发言，然后是学生代表进行发言，之后就是校长和代表给在场学生进行授予学位的环节了。</p>
<p>​    我们五个人一组上台被授予学位，期间还有点小紧张，实际上这就是一个带有仪式感的环节，领导会和你握手，然后学生帽的穗很讲究，未授予学位前，要摆放在学士帽右前侧中的位置，授予学位的时候领导会把穗放到左前侧中的位置。我当时有点铸币，低头的时候时间好像太短，领导还没把穗放好我就抬头了，然后我又低头让领导把穗放好，弄好了之后递归我一个红色丝带系好的卷轴样子的东西，然后和领导合影，这个环节就结束了。我原本以为这个卷轴是给我的证书什么的，后来下台之后其实是要归回的，等于说就是一个仪式感的东西。</p>
<p>​    最后所有人一起唱了校歌，毕业典礼就结束了。</p>
<h3 id="🟡南湖校区"><a href="#🟡南湖校区" class="headerlink" title="🟡南湖校区"></a>🟡南湖校区</h3><p>​    毕业典礼结束之后，我们召集了到了的同学，一起合了影。那天真的很热，人就快要化掉的那种。</p>
<p><img src="/2021-06-23-%E4%B8%80%E6%AC%A1%E7%89%B9%E6%AE%8A%E7%9A%84%E6%97%85%E8%A1%8C%EF%BC%9A%E9%87%8D%E5%9B%9E%E6%AD%A6%E6%B1%89%E7%90%86%E5%B7%A5/QQ%E5%9B%BE%E7%89%8720210623215503.jpg" alt="QQ图片20210623215503"></p>
<p>​    之后浦大佬带我们去南湖校区，打算先沿路参观一下，然后再回到升升公寓看看。浦大佬现在在武汉理工都研究生，不过转去了艺术设计专业。她带我们参观了艺术设计学院的大楼，真的很气派，里面的装修和设施也很新，比我们的好多了。听说南湖校区又起了很多新楼，似乎大学都有这种遗憾啊，就是毕业了之后xx设施才最终修好，不过我们这一届比较幸运的是一去图书馆就是建好的，理工大南湖的图书馆算是很不错的了。</p>
<p>​    现在，南湖校区的门口食堂修的真不错，里面入驻了很多商家，电影院，日料，火锅，M记，各种小吃，该有的都有，如果不是看到有学生在里面自习，仿佛不是身处大学，而是到了商业中心。</p>
<p>​    短暂停留之后，我们就回了升升。</p>
<h3 id="🟣再回升升"><a href="#🟣再回升升" class="headerlink" title="🟣再回升升"></a>🟣再回升升</h3><p>​    大学四年的时光都是住在升升公寓，这似乎理工大在外面租的公寓群，刚来的时候，我还会抱怨，升升公寓里面环境脏乱差，没有铺地板，去南湖校区也远，走路常常要花30分钟才能到教学楼，很不方便。但是现在只觉得升升公寓真的是好。吃的东西多，因为是在校外设置的，入驻的商家很多，什么吃的东西都有。而且升升公寓不限电，懂得都懂哈…另外独卫和空调这些也是有的。还有一个好处就是买外卖也很方便，如果是在校内的公寓，外卖可能还不好送进来。我们以前点了外卖，是可以直接送到楼底下的。什么寝室环境不好，没有地板的问题，完全可以自己发扬一下DIY精神嘛，去淘宝买点自己铺的地板，回来自己铺一下，打扫一下，这都不是问题哈哈。</p>
<p>​    时隔一年再次回到升升公寓，发现升升北门的小吃街又开张了（之前因为火灾关了很长时间），只不过之前熟悉的一些商户走了，比如门口的豆腐，章鱼烧什么的，现在小吃街前头被改成一个小超市的样子。往里面走，发现了一些之前经常买的商铺。比如什么锅盔，包面都还在，以前经常来这买锅盔来着，挺好吃的，好像升升在我回忆中占了绝大部分的东西都是吃的哈哈。</p>
<p><img src="/2021-06-23-%E4%B8%80%E6%AC%A1%E7%89%B9%E6%AE%8A%E7%9A%84%E6%97%85%E8%A1%8C%EF%BC%9A%E9%87%8D%E5%9B%9E%E6%AD%A6%E6%B1%89%E7%90%86%E5%B7%A5/IMG_20210622_174537.jpg" alt="IMG_20210622_174537"></p>
<p>​    之前有传言说，升升公寓好像要改成给技术学院的学生来住，本升专….但是似乎现在还是武汉理工的学生在住，这一次没有找学生问一下有点可惜。</p>
<p>​    我和裴宝迫不急待的就走到了以前住的公寓楼，C栋，这里还是和原来的样子一样，但是社管阿姨好像已经换了。</p>
<p>​    <img src="/2021-06-23-%E4%B8%80%E6%AC%A1%E7%89%B9%E6%AE%8A%E7%9A%84%E6%97%85%E8%A1%8C%EF%BC%9A%E9%87%8D%E5%9B%9E%E6%AD%A6%E6%B1%89%E7%90%86%E5%B7%A5/11111.png" alt="11111"></p>
<p>​    门口有些同学好像在收拾行李，可能是因为毕业要离开了吧。因为没有门禁卡，我们像以前一样，跟着要进去的同学”混“了进去。</p>
<p>​    我们马上去了以前住的253寝室，现在它已经有了新的主人，我和裴宝只能在门口看看，我们以前安装的门帘还是在那个地方。我们之前安装地板的时候可是花了好大的功夫，希望现在的主人能好好善待它…</p>
<p><img src="/2021-06-23-%E4%B8%80%E6%AC%A1%E7%89%B9%E6%AE%8A%E7%9A%84%E6%97%85%E8%A1%8C%EF%BC%9A%E9%87%8D%E5%9B%9E%E6%AD%A6%E6%B1%89%E7%90%86%E5%B7%A5/IMG_20210622_174107.jpg" alt="IMG_20210622_174107"></p>
<p>​    晚餐我们直接在升升的食堂吃的，我选了之前经常吃的一家麻辣香锅。味道似乎没有之前的好吃了，感觉变淡了一点，呜呜呜，难道是因为回忆滤镜吗？</p>
<p>​    坐在升升的食堂和以前的室友吃饭，仿佛又回到了大学本科的时光，等下吃完得赶去南湖上课。</p>
<p><img src="/2021-06-23-%E4%B8%80%E6%AC%A1%E7%89%B9%E6%AE%8A%E7%9A%84%E6%97%85%E8%A1%8C%EF%BC%9A%E9%87%8D%E5%9B%9E%E6%AD%A6%E6%B1%89%E7%90%86%E5%B7%A5/IMG_20210622_174640.jpg" alt="IMG_20210622_174640"></p>
<p><img src="/2021-06-23-%E4%B8%80%E6%AC%A1%E7%89%B9%E6%AE%8A%E7%9A%84%E6%97%85%E8%A1%8C%EF%BC%9A%E9%87%8D%E5%9B%9E%E6%AD%A6%E6%B1%89%E7%90%86%E5%B7%A5/IMG_20210622_180019.jpg" alt="IMG_20210622_180019"></p>
<p>​    到了差不多6点，我离开升升公寓，走着熟悉的回家路，现在这里8号线地铁站已经修好了，不需要坐公交了，在这里，搭上崭新的地铁，回到读研的学校，继续现在的生活。</p>
<h3 id="🟢我毕业了"><a href="#🟢我毕业了" class="headerlink" title="🟢我毕业了"></a>🟢我毕业了</h3><p><img src="/2021-06-23-%E4%B8%80%E6%AC%A1%E7%89%B9%E6%AE%8A%E7%9A%84%E6%97%85%E8%A1%8C%EF%BC%9A%E9%87%8D%E5%9B%9E%E6%AD%A6%E6%B1%89%E7%90%86%E5%B7%A5/5555.png" alt="5555"></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>Kitware/paraview-glance 源码解析01</title>
    <url>/2021-06-24-Kitware-paraview-glance-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%9001/</url>
    <content><![CDATA[<h2 id="🔷简介"><a href="#🔷简介" class="headerlink" title="🔷简介"></a>🔷简介</h2><p>paraview-glance 是kitware组织开源一个像vtk的最佳实践的东西，阅片的效果还不错：</p>
<span id="more"></span>

<p><img src="/2021-06-24-Kitware-paraview-glance-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%9001/1.png" alt="1"></p>
<p>它的代码仓库在：</p>
<p><a href="https://github.com/alexiusll/paraview-glance">https://github.com/alexiusll/paraview-glance</a></p>
<p>后续影像系统的开发可能得参考这个库来做，所以得看看它的源码，了解一下官方是怎么实现这个效果的。</p>
<h2 id="🔵开启dev服务器"><a href="#🔵开启dev服务器" class="headerlink" title="🔵开启dev服务器"></a>🔵开启dev服务器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/Kitware/paraview-glance.git</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> paraview-glance/</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm run build</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm run dev</span></span><br></pre></td></tr></table></figure>

<p>实际上安装了依赖之后，直接使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yarn dev</span></span><br></pre></td></tr></table></figure>

<p>就可以执行了。</p>
<p>依然要注意这个repo没有使用yarn.lock，所以请不要用yarn指令直接安装依赖</p>
<p>开启dev服务器之后，webpack会开始工作…</p>
<p>等编译好后，直接进入 <a href="http://127.0.0.1:9999/">http://127.0.0.1:9999/</a> 就可以了</p>
<h3 id="❌窗口出现错位的问题"><a href="#❌窗口出现错位的问题" class="headerlink" title="❌窗口出现错位的问题"></a>❌窗口出现错位的问题</h3><p>拉取最新的代码的时候，窗口会出现错位的问题，3D的地方就是空的，看来源码有点问题啊…</p>
<p><img src="/2021-06-24-Kitware-paraview-glance-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%9001/2.png" alt="2"></p>
<p>打算尝试解决一下这个问题。</p>
<p>但是看了一下issue里面，似乎没有人去提这个问题，于是我去提了一下，现在还没有人回复（第一次提issue，哈哈哈）。</p>
<p>目前来说，只能先回退版本了，我发现回到v4.14.0的版本是正确的，那么就先在这个版本上新建一个分支来继续吧。</p>
<h2 id="🟦框架简介"><a href="#🟦框架简介" class="headerlink" title="🟦框架简介"></a>🟦框架简介</h2><p>这个项目用了VUE的框架来做，我之前都是用的React框架，对这个不熟悉，悲…</p>
<h3 id="先从依赖开始看起（部分机翻）："><a href="#先从依赖开始看起（部分机翻）：" class="headerlink" title="先从依赖开始看起（部分机翻）："></a>先从依赖开始看起（部分机翻）：</h3><ul>
<li>“@girder/components”: “^2.2.4”,                        kitware组织自己的组件库 （Vue + Vuetify）</li>
<li>  “@linusborg/vue-simple-portal”: “^0.1.3”,      Vue的简单门户实现，用于将槽内容挂载到另一个元素</li>
<li>  “itk”: “13.1.4”,                                                       用来转换文件格式用的</li>
<li>  “mousetrap”: “^1.6.3”,                                        简单的库处理键盘快捷键</li>
<li>  “pug”: “^3.0.0”,                                                     一种用于编写HTML的干净、空格敏感的模板语言</li>
<li>  “pug-plain-loader”: “^1.0.0”,                              pug的loader</li>
<li>  “typeface-roboto”: “0.0.75”,                               CSS和web字体文件，轻松地自我主机“Roboto”。</li>
<li>  “vtk.js”: “15.4.0”,                                                   核心库，渲染医学影像</li>
<li>  “vue”: “2.6.11”,                                                      使用了vue作为前端框架</li>
<li>  “vue-cli-plugin-vuetify”: “^2.0.7”,                       A Vue CLI 3用于安装Vuetify的插件</li>
<li>  “vuetify”: “2.3.4”,                                                  Vue 上面的UI库</li>
<li>  “vuex”: “^3.5.1”,                                                    Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。</li>
<li>  “webworker-promise”: “0.4.2”,                          一个基于“webworkers”的 small promise </li>
<li>  “workbox-sw”: “2.1.2”                                          该<code>workbox-sw</code>模块提供了一种极其简单的方式来启动和运行 Workbox 模块</li>
</ul>
<h3 id="总体文件结构"><a href="#总体文件结构" class="headerlink" title="总体文件结构"></a>总体文件结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/build                      构建项目的配置文件</span><br><span class="line">/data						项目的示例数据</span><br><span class="line">/dist						构建的文件</span><br><span class="line">/documentation				文档</span><br><span class="line">/externals					第三方库</span><br><span class="line">/itk						将会打包到生成的文件中</span><br><span class="line">/node_modules				依赖库</span><br><span class="line">/src						项目入口，核心</span><br><span class="line">/static						静态文件，webpack会将它打包到生成的文件中</span><br><span class="line">.babelrc					Babel 的配置文件</span><br><span class="line">.browserslistrc				配置浏览器版本，这个配置能够分享目标浏览器和nodejs版本在不同的前端工具</span><br><span class="line">.editorconfig				可以帮助开发者在不同的编辑器和 IDE 之间定义和维护一致的代码风格</span><br><span class="line">.eslintignore				eslint 忽略规则</span><br><span class="line">.eslintrc.js				eslint 规则</span><br><span class="line">.gitattributes			    github配置，用来识别语言等</span><br><span class="line">.gitignore					github 忽略规则</span><br><span class="line">.npmignore					npm打包的忽略规则</span><br><span class="line">.travis.yml					自动化部署配置</span><br><span class="line">CONTRIBUTING.md				如何进行贡献的说明</span><br><span class="line">COPYRIGHT					版权信息</span><br><span class="line">LICENSE						授权协议</span><br><span class="line">package-lock.json			包管理lock</span><br><span class="line">package.json				包管理配置</span><br><span class="line">prettier.config.js			代码格式配置</span><br><span class="line">README.md</span><br><span class="line">yarn.lock</span><br></pre></td></tr></table></figure>



<h2 id="🟦模块分析"><a href="#🟦模块分析" class="headerlink" title="🟦模块分析"></a>🟦模块分析</h2><h3 id="🟢代码执行过程"><a href="#🟢代码执行过程" class="headerlink" title="🟢代码执行过程"></a>🟢代码执行过程</h3><p>/static/index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root-container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root-container&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> glanceInstance = <span class="title class_">Glance</span>.<span class="title function_">createViewer</span>(container);</span></span><br><span class="line"><span class="language-javascript">    glanceInstance.<span class="title function_">processURLArgs</span>();</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>**Glance.createViewer(container) **  这里创建Viewer</p>
<p>/src/app.js  下的 createViewer 方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: container, <span class="comment">// 提供一个在页面上已存在的 DOM 元素作为 Vue 实例的挂载目标</span></span><br><span class="line">  <span class="attr">components</span>: &#123; <span class="title class_">App</span> &#125;, <span class="comment">// 包含 Vue 实例可用组件的哈希表</span></span><br><span class="line">  store,</span><br><span class="line">  <span class="attr">provide</span>: <span class="title class_">GirderProvider</span>,</span><br><span class="line">  <span class="comment">// if in the future we want to configure vuetify ourselves, see</span></span><br><span class="line">  <span class="comment">// https://github.com/girder/girder_web_components/blob/master/README.md</span></span><br><span class="line">  <span class="attr">vuetify</span>: <span class="keyword">new</span> <span class="title class_">Vuetify</span>(girderVuetifyConfig),</span><br><span class="line">  proxyManager,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;App /&gt;&#x27;</span>, <span class="comment">// 一个字符串模板作为 Vue 实例的标识使用。</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>创建了一个 vue 组件</p>
<p>它的选项可以参考：<a href="https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E6%95%B0%E6%8D%AE">https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E6%95%B0%E6%8D%AE</a></p>
<p>生成的APP来自</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;paraview-glance/src/components/core/App&#x27;</span>;</span><br></pre></td></tr></table></figure>



<h3 id="🟡app-和-landing-页面的切换"><a href="#🟡app-和-landing-页面的切换" class="headerlink" title="🟡app 和 landing 页面的切换"></a>🟡app 和 landing 页面的切换</h3><p>APP/template.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-content</span> <span class="attr">:class</span>=<span class="string">&quot;$style.appContent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">landing</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-if</span>=<span class="string">&quot;landingVisible&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">key</span>=<span class="string">&quot;if-landing&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-on:open</span>=<span class="string">&quot;showFileUpload&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-on:open-urls</span>=<span class="string">&quot;autoLoadRemotes&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-on:open-files</span>=<span class="string">&quot;openFileList&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">layout-view</span> <span class="attr">v-else</span> <span class="attr">key</span>=<span class="string">&quot;if-landing&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">v-content</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里的意思是</p>
<p>如果 landingVisible 为 true ，则渲染 landing 组件</p>
<p>如果 landingVisible 为 false，则渲染 layout-view 组件</p>
<h3 id="🟡landing-模块分析"><a href="#🟡landing-模块分析" class="headerlink" title="🟡landing 模块分析"></a>🟡landing 模块分析</h3><p>路径 src/components/core/Landing</p>
<p>其实这个地方分析的意义不大，就是一个选择数据的入口，我们核心要留给阅片的部分</p>
<p><img src="/2021-06-24-Kitware-paraview-glance-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%9001/3.png" alt="3"></p>
<p>部分template.html 代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-flex</span> <span class="attr">xs12</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Sample Data （这里是展示数据）<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">v-flex</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">v-flex</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-for</span>=<span class="string">&quot;(sample, i) in samples&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:key</span>=<span class="string">&quot;i&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:xs4</span>=<span class="string">&quot;$vuetify.breakpoint.mdAndUp&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:xs6</span>=<span class="string">&quot;$vuetify.breakpoint.sm&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:xs12</span>=<span class="string">&quot;$vuetify.breakpoint.xs&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">v-card</span> <span class="attr">:class</span>=<span class="string">&quot;$style.sampleData&quot;</span> <span class="attr">flat</span> <span class="attr">tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">v-img</span> <span class="attr">:src</span>=<span class="string">&quot;sample.image&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300px&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:class</span>=<span class="string">&quot;$style.linkOverlay&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">click.stop</span>=<span class="string">&quot;openSample(sample)&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;$style.linkOverlayText&quot;</span> <span class="attr">class</span>=<span class="string">&quot;body-2&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; sample.label &#125;&#125; (&#123;&#123; sample.size &#125;&#125;)</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;$style.description&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;sample.description&quot;</span>&gt;</span></span><br><span class="line">          &#123;&#123; sample.description &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;$style.acknowledgement&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;sample.acknowledgement&quot;</span>&gt;</span></span><br><span class="line">          &#123;&#123; sample.acknowledgement &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">v-card</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">v-flex</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="🟡LayoutView模块"><a href="#🟡LayoutView模块" class="headerlink" title="🟡LayoutView模块"></a>🟡LayoutView模块</h3><p>template.html 代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-container</span> <span class="attr">fluid</span> <span class="attr">:class</span>=<span class="string">&quot;$style.container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:class</span>=<span class="string">&quot;$style.grid&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:style</span>=<span class="string">&quot;&#123; gridTemplateRows, gridTemplateColumns &#125;&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:class</span>=<span class="string">&quot;$style.viewContainer&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-for</span>=<span class="string">&quot;(viewType, index) in views&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-bind:key</span>=<span class="string">&quot;`$&#123;index&#125;::$&#123;viewType&#125;`&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-show</span>=<span class="string">&quot;index &lt; visibleCount&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">vtk-view</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-bind:view-type</span>=<span class="string">&quot;viewType&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-bind:layout-index</span>=<span class="string">&quot;index&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-bind:layout-count</span>=<span class="string">&quot;visibleCount&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-bind:background-color</span>=<span class="string">&quot;backgroundColors[viewType]&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-on:bg-change</span>=<span class="string">&quot;setViewBackground(view, arguments[0])&quot;</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">v-container</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>执行过程：</p>
<p>它会循环执行，根据用户的选择来生成相应数目的 <strong>vtk-view</strong> 窗口</p>
<p>其中 <strong>VtkView</strong> 这个组件来自 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VtkView</span> <span class="keyword">from</span> <span class="string">&#x27;paraview-glance/src/components/core/VtkView&#x27;</span>;</span><br></pre></td></tr></table></figure>



<h3 id="🟡VtkView模块-（核心部分）"><a href="#🟡VtkView模块-（核心部分）" class="headerlink" title="🟡VtkView模块 （核心部分）"></a>🟡VtkView模块 （核心部分）</h3><h4 id="1-html第一部分：右边工具栏"><a href="#1-html第一部分：右边工具栏" class="headerlink" title="1.html第一部分：右边工具栏"></a>1.html第一部分：右边工具栏</h4><p>template.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-layout</span> <span class="attr">column</span> <span class="attr">:class</span>=<span class="string">&quot;$style.floatToolbar&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: aliceblue;&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">v-tooltip</span> <span class="attr">left</span> <span class="attr">:disabled</span>=<span class="string">&quot;smallScreen&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;pv-no-select&quot;</span>&gt;</span>Reset camera<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:activator</span>=<span class="string">&quot;&#123; on &#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">v-btn</span> <span class="attr">icon</span> <span class="attr">dark</span> <span class="attr">v-on</span>=<span class="string">&quot;on&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;resetCamera()&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">v-icon</span>&gt;</span>mdi-image-filter-center-focus<span class="tag">&lt;/<span class="name">v-icon</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">v-btn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">v-tooltip</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">v-tooltip</span> <span class="attr">left</span> <span class="attr">:disabled</span>=<span class="string">&quot;smallScreen&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;pv-no-select&quot;</span>&gt;</span>Rotate camera left 90°<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:activator</span>=<span class="string">&quot;&#123; on &#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">v-btn</span> <span class="attr">icon</span> <span class="attr">dark</span> <span class="attr">v-on</span>=<span class="string">&quot;on&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;rollLeft()&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">v-icon</span>&gt;</span>mdi-rotate-left<span class="tag">&lt;/<span class="name">v-icon</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">v-btn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">v-tooltip</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">v-tooltip</span> <span class="attr">left</span> <span class="attr">:disabled</span>=<span class="string">&quot;smallScreen&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;pv-no-select&quot;</span>&gt;</span>Rotate camera right 90°<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:activator</span>=<span class="string">&quot;&#123; on &#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">v-btn</span> <span class="attr">icon</span> <span class="attr">dark</span> <span class="attr">v-on</span>=<span class="string">&quot;on&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;rollRight()&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">v-icon</span>&gt;</span>mdi-rotate-right<span class="tag">&lt;/<span class="name">v-icon</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">v-btn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">v-tooltip</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">v-tooltip</span> <span class="attr">left</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;View3D&#x27;&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;smallScreen&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;pv-no-select&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span>Reset Camera to Orientation &#123;&#123;orientationLabels[0]&#125;&#125;&lt;/span</span><br><span class="line">    &gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:activator</span>=<span class="string">&quot;&#123; on &#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">v-btn</span> <span class="attr">icon</span> <span class="attr">dark</span> <span class="attr">v-on</span>=<span class="string">&quot;on&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;updateOrientation(&#x27;x&#x27;)&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;orientationLabels[0]&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">v-btn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">v-tooltip</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">v-tooltip</span> <span class="attr">left</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;View3D&#x27;&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;smallScreen&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;pv-no-select&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span>Reset Camera to Orientation &#123;&#123;orientationLabels[1]&#125;&#125;&lt;/span</span><br><span class="line">    &gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:activator</span>=<span class="string">&quot;&#123; on &#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">v-btn</span> <span class="attr">icon</span> <span class="attr">dark</span> <span class="attr">v-on</span>=<span class="string">&quot;on&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;updateOrientation(&#x27;y&#x27;)&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;orientationLabels[1]&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">v-btn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">v-tooltip</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">v-tooltip</span> <span class="attr">left</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;View3D&#x27;&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;smallScreen&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;pv-no-select&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span>Reset Camera to Orientation &#123;&#123;orientationLabels[2]&#125;&#125;&lt;/span</span><br><span class="line">    &gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:activator</span>=<span class="string">&quot;&#123; on &#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">v-btn</span> <span class="attr">icon</span> <span class="attr">dark</span> <span class="attr">v-on</span>=<span class="string">&quot;on&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;updateOrientation(&#x27;z&#x27;)&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;orientationLabels[2]&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">v-btn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">v-tooltip</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">v-layout</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="2-html第二部分：底边工具栏"><a href="#2-html第二部分：底边工具栏" class="headerlink" title="2.html第二部分：底边工具栏"></a>2.html第二部分：底边工具栏</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 下侧工具栏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">v-layout</span> <span class="attr">column</span> <span class="attr">fill-height</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">v-flex</span></span></span><br><span class="line"><span class="tag">    <span class="attr">fill-height</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;js-view&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:class</span>=<span class="string">&quot;$style.vtkView&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:style</span>=<span class="string">&quot;&#123; background: backgroundColor &#125;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-on:mousedown</span>=<span class="string">&quot;view.activate()&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;isActive&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;$style.activeView&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;$style.toolbarWrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">toolbar-sheet</span> <span class="attr">v-model</span>=<span class="string">&quot;backgroundSheet&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">v-container</span> <span class="attr">grid-list-md</span> <span class="attr">class</span>=<span class="string">&quot;mr-0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">v-layout</span> <span class="attr">row</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">v-spacer</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">palette-picker</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:size</span>=<span class="string">&quot;24&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:palette</span>=<span class="string">&quot;palette&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:value</span>=<span class="string">&quot;backgroundColor&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-on:input</span>=<span class="string">&quot;changeBackgroundColor&quot;</span></span></span><br><span class="line"><span class="tag">          /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">v-layout</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">v-container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">toolbar-sheet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">v-toolbar</span> <span class="attr">dark</span> <span class="attr">height</span>=<span class="string">&quot;45px&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;$style.smallToolbar&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">v-select</span></span></span><br><span class="line"><span class="tag">        <span class="attr">dense</span></span></span><br><span class="line"><span class="tag">        <span class="attr">flat</span></span></span><br><span class="line"><span class="tag">        <span class="attr">hide-details</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:class</span>=<span class="string">&quot;$style.viewTypeSelector&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:items</span>=<span class="string">&quot;viewTypes&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:value</span>=<span class="string">&quot;viewType&quot;</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">change</span>=<span class="string">&quot;changeViewType&quot;</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">v-spacer</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">v-tooltip</span></span></span><br><span class="line"><span class="tag">        <span class="attr">top</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;View3D&#x27;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:disabled</span>=<span class="string">&quot;smallScreen || viewPointMenuVisible&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:activator</span>=<span class="string">&quot;&#123; on: tooltip &#125;&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">v-menu</span> <span class="attr">offset-y</span> <span class="attr">top</span> <span class="attr">left</span> <span class="attr">v-model</span>=<span class="string">&quot;viewPointMenuVisible&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:activator</span>=<span class="string">&quot;&#123; on: menu &#125;&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">v-btn</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:class</span>=<span class="string">&quot;$style.button&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">icon</span></span></span><br><span class="line"><span class="tag">                <span class="attr">v-on</span>=<span class="string">&quot;&#123; ...tooltip, ...menu &#125;&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">v-show</span>=<span class="string">&quot;cameraViewPoints.length&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:disabled</span>=<span class="string">&quot;viewPointMenuVisible&quot;</span></span></span><br><span class="line"><span class="tag">              &gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">v-icon</span>&gt;</span>mdi-camera-switch<span class="tag">&lt;/<span class="name">v-icon</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">v-btn</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">v-list</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">v-list-item</span></span></span><br><span class="line"><span class="tag">                <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in cameraViewPoints&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span></span></span><br><span class="line"><span class="tag">                @<span class="attr">click</span>=<span class="string">&quot;changeCameraViewPoint(item)&quot;</span></span></span><br><span class="line"><span class="tag">              &gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">v-list-item-title</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">v-list-item-title</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">v-list-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">v-list</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">v-menu</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;pv-no-select&quot;</span>&gt;</span>Change View Point<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">v-tooltip</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">v-tooltip</span> <span class="attr">top</span> <span class="attr">:disabled</span>=<span class="string">&quot;smallScreen&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;pv-no-select&quot;</span>&gt;</span>Background color<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:activator</span>=<span class="string">&quot;&#123; on &#125;&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">v-btn</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:class</span>=<span class="string">&quot;$style.button&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">icon</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:disabled</span>=<span class="string">&quot;backgroundSheet || !view&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-on</span>=<span class="string">&quot;on&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-on:click</span>=<span class="string">&quot;backgroundSheet = !backgroundSheet&quot;</span></span></span><br><span class="line"><span class="tag">          &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">v-icon</span>&gt;</span>mdi-palette<span class="tag">&lt;/<span class="name">v-icon</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">v-btn</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">v-tooltip</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">v-tooltip</span> <span class="attr">top</span> <span class="attr">:disabled</span>=<span class="string">&quot;smallScreen&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;pv-no-select&quot;</span>&gt;</span>Screenshot<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:activator</span>=<span class="string">&quot;&#123; on &#125;&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">v-btn</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:class</span>=<span class="string">&quot;$style.button&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">icon</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-on</span>=<span class="string">&quot;on&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-on:click</span>=<span class="string">&quot;screenCapture()&quot;</span></span></span><br><span class="line"><span class="tag">          &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">v-icon</span>&gt;</span>mdi-camera-plus<span class="tag">&lt;/<span class="name">v-icon</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">v-btn</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">v-tooltip</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">v-tooltip</span> <span class="attr">top</span> <span class="attr">v-if</span>=<span class="string">&quot;!smallScreen &amp;&amp; singleViewButton&quot;</span> <span class="attr">key</span>=<span class="string">&quot;singleView&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;pv-no-select&quot;</span>&gt;</span>Single view<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:activator</span>=<span class="string">&quot;&#123; on &#125;&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">v-btn</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:class</span>=<span class="string">&quot;$style.button&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">icon</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-on</span>=<span class="string">&quot;on&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-on:click</span>=<span class="string">&quot;singleView(layoutIndex)&quot;</span></span></span><br><span class="line"><span class="tag">          &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">v-icon</span>&gt;</span>mdi-fullscreen<span class="tag">&lt;/<span class="name">v-icon</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">v-btn</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">v-tooltip</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">v-tooltip</span> <span class="attr">top</span> <span class="attr">v-if</span>=<span class="string">&quot;!smallScreen &amp;&amp; flipViewButton&quot;</span> <span class="attr">key</span>=<span class="string">&quot;flipView&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;pv-no-select&quot;</span>&gt;</span>Split view<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:activator</span>=<span class="string">&quot;&#123; on &#125;&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">v-btn</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:class</span>=<span class="string">&quot;$style.button&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">icon</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-on</span>=<span class="string">&quot;on&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-on:click</span>=<span class="string">&quot;splitView(layoutIndex)&quot;</span></span></span><br><span class="line"><span class="tag">          &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">v-icon</span>&gt;</span>mdi-flip-horizontal<span class="tag">&lt;/<span class="name">v-icon</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">v-btn</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">v-tooltip</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">v-tooltip</span> <span class="attr">top</span> <span class="attr">v-if</span>=<span class="string">&quot;!smallScreen &amp;&amp; quadViewButton&quot;</span> <span class="attr">key</span>=<span class="string">&quot;quadView&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;pv-no-select&quot;</span>&gt;</span>Quad view<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:activator</span>=<span class="string">&quot;&#123; on &#125;&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">v-btn</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:class</span>=<span class="string">&quot;$style.button&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">icon</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-on</span>=<span class="string">&quot;on&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-on:click</span>=<span class="string">&quot;quadView(layoutIndex)&quot;</span></span></span><br><span class="line"><span class="tag">          &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">v-icon</span>&gt;</span>mdi-widgets<span class="tag">&lt;/<span class="name">v-icon</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">v-btn</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">v-tooltip</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">v-toolbar</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">v-layout</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="修改部分代码的测试结果"><a href="#修改部分代码的测试结果" class="headerlink" title="修改部分代码的测试结果"></a>修改部分代码的测试结果</h4><p><img src="/2021-06-24-Kitware-paraview-glance-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%9001/4.png" alt="4"></p>
<p>显示的结果基本符合预期，但是我们关注的主要不是UI层面的东西，我们想要了解这个图像是如何进行渲染的</p>
<p>尝试将UI全部都注释掉，只留下渲染的部分，发现核心的代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-flex</span></span></span><br><span class="line"><span class="tag">  <span class="attr">fill-height</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;js-view&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:class</span>=<span class="string">&quot;$style.vtkView&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:style</span>=<span class="string">&quot;&#123; background: backgroundColor &#125;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:mousedown</span>=<span class="string">&quot;view.activate()&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里只是设置了一个class 为 js-view的元素，它其实只提供一个底座的作用，用来产生一个DOM元素提供给VTK库进行渲染。</p>
<h4 id="渲染vtk-view"><a href="#渲染vtk-view" class="headerlink" title="渲染vtk view"></a>渲染vtk view</h4><p>/script.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">tryMountView</span>(<span class="params">view</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">internalViewId</span> &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> oldView = <span class="variable language_">this</span>.<span class="property">$proxyManager</span>.<span class="title function_">getProxyById</span>(<span class="variable language_">this</span>.<span class="property">internalViewId</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">unmountView</span>(oldView);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">internalViewId</span> = -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (view) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">internalViewId</span> = view.<span class="title function_">getProxyId</span>();</span><br><span class="line">    view.<span class="title function_">setContainer</span>(<span class="variable language_">this</span>.<span class="property">$el</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.js-view&#x27;</span>));</span><br><span class="line">    <span class="keyword">const</span> widgetManager = view.<span class="title function_">getReferenceByName</span>(<span class="string">&#x27;widgetManager&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (widgetManager) &#123;</span><br><span class="line">      widgetManager.<span class="title function_">setUseSvgLayer</span>(<span class="literal">true</span>);</span><br><span class="line">      <span class="comment">// workaround to disable picking if previously disabled</span></span><br><span class="line">      <span class="keyword">if</span> (!widgetManager.<span class="title function_">getPickingEnabled</span>()) &#123;</span><br><span class="line">        widgetManager.<span class="title function_">disablePicking</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>这里 view setContainer 就是选择了上文中的DOM元素，作为一个底座</p>
]]></content>
      <categories>
        <category>医学影像处理</category>
      </categories>
      <tags>
        <tag>医学影像处理</tag>
      </tags>
  </entry>
  <entry>
    <title>vtk.js结合React使用基础</title>
    <url>/2021-06-25-vtk-js%E7%BB%93%E5%90%88React%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h3 id="🔵前言"><a href="#🔵前言" class="headerlink" title="🔵前言"></a>🔵前言</h3><p>如果想要做web端的医学影像处理，如果不想从纯底层，例如webgl或者threejs开始做起，用好vtk.js就是必不可少的。这也是一个kitware组织开发的js库。</p>
<span id="more"></span>

<p>vtk.js的文档地址：</p>
<p><a href="https://kitware.github.io/vtk-js/">https://kitware.github.io/vtk-js/</a></p>
<p>机翻预警：</p>
<p>VTK.js是一个JavaScript库，可用于在浏览器中进行科学可视化。这个库可以通过NPM和(NPM ESM)或unpkg.com CDN来使用，所以它可以直接作为一个脚本标签导入到你的网页中。</p>
<p>本文会简单介绍如何在React代码中使用vtk.js渲染基础的图形。</p>
<h3 id="📘准备环境"><a href="#📘准备环境" class="headerlink" title="📘准备环境"></a>📘准备环境</h3><p>这里前端使用了umi3 的全套框架，我们先使用yarn指令获取最新的vtk.js</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yarn add @kitware/vtk.js</span></span><br></pre></td></tr></table></figure>

<p>如果想在代码中使用vtk.js的代码，还需要修改webpack的配置。在umi中修改webpack的配置的方法是，使用chainWebpack，具体可以参考umi的文档，这里不多做赘述。</p>
<p>我们打开node_modules下vtk.js的包，发现它的目录下有一个chainWebpack的配置，可以直接粘贴过来。</p>
<p>这个文件的路径在 /node_modules/@kitware/vtk.js/Utilities/config/chainWebpack.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (<span class="attr">config</span>: any) =&gt; &#123;</span><br><span class="line">  config.<span class="property">module</span></span><br><span class="line">    .<span class="title function_">rule</span>(<span class="string">&#x27;vtk-glsl&#x27;</span>)</span><br><span class="line">    .<span class="title function_">test</span>(<span class="regexp">/\.glsl$/i</span>)</span><br><span class="line">    .<span class="property">include</span>.<span class="title function_">add</span>(<span class="regexp">/vtk\.js[/\\]Sources/</span>)</span><br><span class="line">    .<span class="title function_">end</span>()</span><br><span class="line">    .<span class="title function_">use</span>(<span class="string">&#x27;shader-loader&#x27;</span>)</span><br><span class="line">    .<span class="title function_">loader</span>(<span class="string">&#x27;shader-loader&#x27;</span>)</span><br><span class="line">    .<span class="title function_">end</span>();</span><br><span class="line"></span><br><span class="line">  config.<span class="property">module</span></span><br><span class="line">    .<span class="title function_">rule</span>(<span class="string">&#x27;vtk-js&#x27;</span>)</span><br><span class="line">    .<span class="title function_">test</span>(<span class="regexp">/\.js$/i</span>)</span><br><span class="line">    .<span class="property">include</span>.<span class="title function_">add</span>(<span class="regexp">/vtk\.js[/\\]Sources/</span>)</span><br><span class="line">    .<span class="title function_">end</span>()</span><br><span class="line">    .<span class="title function_">use</span>(<span class="string">&#x27;babel-loader&#x27;</span>)</span><br><span class="line">    .<span class="title function_">loader</span>(<span class="string">&#x27;babel-loader&#x27;</span>)</span><br><span class="line">    .<span class="title function_">end</span>();</span><br><span class="line"></span><br><span class="line">  config.<span class="property">module</span></span><br><span class="line">    .<span class="title function_">rule</span>(<span class="string">&#x27;vtk-worker&#x27;</span>)</span><br><span class="line">    .<span class="title function_">test</span>(<span class="regexp">/\.worker\.js$/</span>)</span><br><span class="line">    .<span class="property">include</span>.<span class="title function_">add</span>(<span class="regexp">/vtk\.js[/\\]Sources/</span>)</span><br><span class="line">    .<span class="title function_">end</span>()</span><br><span class="line">    .<span class="title function_">use</span>(<span class="string">&#x27;worker-loader&#x27;</span>)</span><br><span class="line">    .<span class="title function_">loader</span>(<span class="string">&#x27;worker-loader&#x27;</span>)</span><br><span class="line">    .<span class="title function_">options</span>(&#123; <span class="attr">inline</span>: <span class="string">&#x27;no-fallback&#x27;</span> &#125;)</span><br><span class="line">    .<span class="title function_">end</span>();</span><br><span class="line"></span><br><span class="line">  config.<span class="property">module</span></span><br><span class="line">    .<span class="title function_">rule</span>(<span class="string">&#x27;vtk-css&#x27;</span>)</span><br><span class="line">    .<span class="title function_">test</span>(<span class="regexp">/\.css$/</span>)</span><br><span class="line">    .<span class="property">exclude</span>.<span class="title function_">add</span>(<span class="regexp">/\.module\.css$/</span>)</span><br><span class="line">    .<span class="title function_">end</span>()</span><br><span class="line">    .<span class="property">include</span>.<span class="title function_">add</span>(<span class="regexp">/vtk\.js[/\\]Sources/</span>)</span><br><span class="line">    .<span class="title function_">end</span>()</span><br><span class="line">    .<span class="title function_">use</span>(<span class="string">&#x27;styles&#x27;</span>)</span><br><span class="line">    .<span class="title function_">loader</span>(<span class="string">&#x27;style-loader&#x27;</span>)</span><br><span class="line">    .<span class="title function_">loader</span>(<span class="string">&#x27;css-loader&#x27;</span>)</span><br><span class="line">    .<span class="title function_">loader</span>(<span class="string">&#x27;postcss-loader&#x27;</span>)</span><br><span class="line">    .<span class="title function_">end</span>();</span><br><span class="line"></span><br><span class="line">  config.<span class="property">module</span></span><br><span class="line">    .<span class="title function_">rule</span>(<span class="string">&#x27;vtk-svg&#x27;</span>)</span><br><span class="line">    .<span class="title function_">test</span>(<span class="regexp">/\.svg$/</span>)</span><br><span class="line">    .<span class="property">include</span>.<span class="title function_">add</span>(<span class="regexp">/vtk\.js[/\\]Sources/</span>)</span><br><span class="line">    .<span class="title function_">end</span>()</span><br><span class="line">    .<span class="title function_">use</span>(<span class="string">&#x27;raw-loader&#x27;</span>)</span><br><span class="line">    .<span class="title function_">loader</span>(<span class="string">&#x27;raw-loader&#x27;</span>)</span><br><span class="line">    .<span class="title function_">end</span>();</span><br><span class="line"></span><br><span class="line">  config.<span class="property">module</span></span><br><span class="line">    .<span class="title function_">rule</span>(<span class="string">&#x27;vtk-module-css&#x27;</span>)</span><br><span class="line">    .<span class="title function_">test</span>(<span class="regexp">/\.css$/</span>)</span><br><span class="line">    .<span class="property">include</span>.<span class="title function_">add</span>(<span class="regexp">/vtk\.js[/\\]Sources/</span>)</span><br><span class="line">    .<span class="title function_">add</span>(<span class="regexp">/\.module\.css$/</span>)</span><br><span class="line">    .<span class="title function_">end</span>()</span><br><span class="line">    .<span class="title function_">use</span>(<span class="string">&#x27;styles&#x27;</span>)</span><br><span class="line">    .<span class="title function_">loader</span>(<span class="string">&#x27;style-loader&#x27;</span>)</span><br><span class="line">    .<span class="title function_">loader</span>(<span class="string">&#x27;css-loader&#x27;</span>)</span><br><span class="line">    .<span class="title function_">options</span>(&#123;</span><br><span class="line">      <span class="attr">modules</span>: &#123;</span><br><span class="line">        <span class="attr">localIdentName</span>: <span class="string">&#x27;[name]-[local]_[sha512:hash:base64:5]&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">loader</span>(<span class="string">&#x27;postcss-loader&#x27;</span>)</span><br><span class="line">    .<span class="title function_">end</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>除了 shader-loader 是vtk.js自己就有的loader之外，我们可能还需要自行安装一些loader ， 例如 babel-loader，注意部分loader的版本不要太新，否则可能可能会出现问题。</p>
<p>这里给出我目前的package配置：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@umijs/fabric&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.5.7&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@umijs/plugin-esbuild&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@umijs/preset-react&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.8.10&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;babel-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^8.2.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;commitizen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.2.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;copy-webpack-plugin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cross-env&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.0.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;css-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5.2.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cz-conventional-changelog&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.3.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eslint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.22.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lint-staged&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^10.5.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;postcss-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;prettier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.2.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;raw-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4.0.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;react-dev-inspector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.5.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;standard-version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^9.3.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;style-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5.31.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack-cli&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4.6.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack-dev-server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3.11.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack-merge&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5.7.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;worker-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3.0.8&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;yorkie&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>



<h3 id="📗现在可以写代码了"><a href="#📗现在可以写代码了" class="headerlink" title="📗现在可以写代码了"></a>📗现在可以写代码了</h3><p>我们尝试实现一个最简单的 vtk.js的 demo</p>
<p>这里参考一下官方文档里面的例子，我第一次看vtk.js的文档还没有和react结合的例子，现在居然更了…</p>
<p><a href="https://kitware.github.io/vtk-js/docs/vtk_react.html">https://kitware.github.io/vtk-js/docs/vtk_react.html</a></p>
<p>我修改了部分代码，以适应现有的框架，例如UI的样式。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useRef, useEffect, <span class="variable constant_">FC</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@kitware/vtk.js/Rendering/Profiles/Geometry&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> vtkFullScreenRenderWindow <span class="keyword">from</span> <span class="string">&#x27;@kitware/vtk.js/Rendering/Misc/FullScreenRenderWindow&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> vtkActor <span class="keyword">from</span> <span class="string">&#x27;@kitware/vtk.js/Rendering/Core/Actor&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> vtkMapper <span class="keyword">from</span> <span class="string">&#x27;@kitware/vtk.js/Rendering/Core/Mapper&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> vtkConeSource <span class="keyword">from</span> <span class="string">&#x27;@kitware/vtk.js/Filters/Sources/ConeSource&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Demo</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;&#123;&#125;&gt; = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> vtkContainerRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> context = useRef&lt;<span class="built_in">any</span> | <span class="literal">null</span>&gt;(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> [coneResolution, setConeResolution] = <span class="title function_">useState</span>(<span class="number">6</span>);</span><br><span class="line">  <span class="keyword">const</span> [representation, setRepresentation] = <span class="title function_">useState</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!context.<span class="property">current</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> fullScreenRenderer = vtkFullScreenRenderWindow.<span class="title function_">newInstance</span>(&#123;</span><br><span class="line">        <span class="attr">rootContainer</span>: vtkContainerRef.<span class="property">current</span>,</span><br><span class="line">        <span class="attr">containerStyle</span>: &#123;</span><br><span class="line">          <span class="attr">height</span>: <span class="string">&#x27;640px&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">const</span> coneSource = vtkConeSource.<span class="title function_">newInstance</span>(&#123; <span class="attr">height</span>: <span class="number">1.0</span> &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> mapper = vtkMapper.<span class="title function_">newInstance</span>();</span><br><span class="line">      mapper.<span class="title function_">setInputConnection</span>(coneSource.<span class="title function_">getOutputPort</span>());</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> actor = vtkActor.<span class="title function_">newInstance</span>();</span><br><span class="line">      actor.<span class="title function_">setMapper</span>(mapper);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> renderer = fullScreenRenderer.<span class="title function_">getRenderer</span>();</span><br><span class="line">      <span class="keyword">const</span> renderWindow = fullScreenRenderer.<span class="title function_">getRenderWindow</span>();</span><br><span class="line"></span><br><span class="line">      renderer.<span class="title function_">addActor</span>(actor);</span><br><span class="line">      renderer.<span class="title function_">resetCamera</span>();</span><br><span class="line">      renderWindow.<span class="title function_">render</span>();</span><br><span class="line"></span><br><span class="line">      fullScreenRenderer.<span class="title function_">setResizeCallback</span>(<span class="function">(<span class="params">&#123; width, height &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;resize&#x27;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      context.<span class="property">current</span> = &#123;</span><br><span class="line">        fullScreenRenderer,</span><br><span class="line">        renderWindow,</span><br><span class="line">        renderer,</span><br><span class="line">        coneSource,</span><br><span class="line">        actor,</span><br><span class="line">        mapper,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (context.<span class="property">current</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; fullScreenRenderer, coneSource, actor, mapper &#125; = context.<span class="property">current</span>;</span><br><span class="line">        actor.<span class="title function_">delete</span>();</span><br><span class="line">        mapper.<span class="title function_">delete</span>();</span><br><span class="line">        coneSource.<span class="title function_">delete</span>();</span><br><span class="line">        fullScreenRenderer.<span class="title function_">delete</span>();</span><br><span class="line">        context.<span class="property">current</span> = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, [vtkContainerRef]);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (context.<span class="property">current</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; coneSource, renderWindow &#125; = context.<span class="property">current</span>;</span><br><span class="line">      coneSource.<span class="title function_">setResolution</span>(coneResolution);</span><br><span class="line">      renderWindow.<span class="title function_">render</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [coneResolution]);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (context.<span class="property">current</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; actor, renderWindow &#125; = context.<span class="property">current</span>;</span><br><span class="line">      actor.<span class="title function_">getProperty</span>().<span class="title function_">setRepresentation</span>(representation);</span><br><span class="line">      renderWindow.<span class="title function_">render</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [representation]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">table</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">position:</span> &#x27;<span class="attr">absolute</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">margin:</span> &#x27;<span class="attr">30px</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">background:</span> &#x27;<span class="attr">white</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">padding:</span> &#x27;<span class="attr">12px</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">select</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">value</span>=<span class="string">&#123;representation&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">width:</span> &#x27;<span class="attr">100</span>%&#x27; &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">onInput</span>=<span class="string">&#123;(ev)</span> =&gt;</span> setRepresentation(Number(ev.target.value))&#125;</span></span><br><span class="line"><span class="language-xml">              &gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>Points<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>Wireframe<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>Surface<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">type</span>=<span class="string">&quot;range&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">min</span>=<span class="string">&quot;4&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">max</span>=<span class="string">&quot;80&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">value</span>=<span class="string">&#123;coneResolution&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">onChange</span>=<span class="string">&#123;(ev)</span> =&gt;</span> setConeResolution(Number(ev.target.value))&#125;</span></span><br><span class="line"><span class="language-xml">              /&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;vtkContainerRef&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Demo</span>;</span><br></pre></td></tr></table></figure>



<h4 id="📃渲染结果"><a href="#📃渲染结果" class="headerlink" title="📃渲染结果"></a>📃渲染结果</h4><p><img src="/2021-06-25-vtk-js%E7%BB%93%E5%90%88React%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%A1%80/5.png" alt="5"></p>
<h4 id="📓代码解析"><a href="#📓代码解析" class="headerlink" title="📓代码解析"></a>📓代码解析</h4><h5 id="🔵React部分"><a href="#🔵React部分" class="headerlink" title="🔵React部分"></a>🔵React部分</h5><p><strong>获取网页Dom元素</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vtkContainerRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&lt;div ref=&#123;vtkContainerRef&#125; /&gt;</span><br></pre></td></tr></table></figure>

<p>useRef 返回一个可变的 ref 对象，其 .current 属性被初始化为传入的参数（initialValue）。</p>
<p>返回的  **ref 对象 ** 在组件的 <strong>整个生命周期内保持不变。</strong></p>
<p>本质上，useRef 就像是可以在其 .current 属性中保存一个可变值的“盒子”。</p>
<p>请记住，当 ref 对象内容发生变化时，useRef 并不会通知你。<strong>变更 .current 属性不会引发组件重新渲染</strong>。</p>
<p><strong>保存上下文的属性，这一部分值的改变不会触发重新渲染</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> context = useRef&lt;any | <span class="literal">null</span>&gt;(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">context.<span class="property">current</span> = &#123;</span><br><span class="line">        fullScreenRenderer,</span><br><span class="line">        renderWindow,</span><br><span class="line">        renderer,</span><br><span class="line">        coneSource,</span><br><span class="line">        actor,</span><br><span class="line">        mapper,</span><br><span class="line">      &#125;;</span><br></pre></td></tr></table></figure>



<p><strong>保存coneResolution和representation，这一部分值的改变会触发重新渲染！</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [coneResolution, setConeResolution] = <span class="title function_">useState</span>(<span class="number">6</span>);</span><br><span class="line"><span class="keyword">const</span> [representation, setRepresentation] = <span class="title function_">useState</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (context.<span class="property">current</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; coneSource, renderWindow &#125; = context.<span class="property">current</span>;</span><br><span class="line">    coneSource.<span class="title function_">setResolution</span>(coneResolution);</span><br><span class="line">    renderWindow.<span class="title function_">render</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, [coneResolution]);</span><br><span class="line"></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (context.<span class="property">current</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; actor, renderWindow &#125; = context.<span class="property">current</span>;</span><br><span class="line">    actor.<span class="title function_">getProperty</span>().<span class="title function_">setRepresentation</span>(representation);</span><br><span class="line">    renderWindow.<span class="title function_">render</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, [representation]);</span><br></pre></td></tr></table></figure>



<h5 id="🔵vtk的渲染过程"><a href="#🔵vtk的渲染过程" class="headerlink" title="🔵vtk的渲染过程"></a>🔵vtk的渲染过程</h5><p><strong>步骤一，设置渲染窗口和渲染器</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fullScreenRenderer = vtkFullScreenRenderWindow.<span class="title function_">newInstance</span>(&#123;</span><br><span class="line">        <span class="attr">rootContainer</span>: vtkContainerRef.<span class="property">current</span>,</span><br><span class="line">        <span class="attr">containerStyle</span>: &#123;</span><br><span class="line">          <span class="attr">height</span>: <span class="string">&#x27;640px&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">...</span><br><span class="line"><span class="keyword">const</span> renderer = fullScreenRenderer.<span class="title function_">getRenderer</span>();</span><br><span class="line"><span class="keyword">const</span> renderWindow = fullScreenRenderer.<span class="title function_">getRenderWindow</span>();</span><br></pre></td></tr></table></figure>



<p><strong>步骤二，设置数据源</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> coneSource = vtkConeSource.<span class="title function_">newInstance</span>(&#123; <span class="attr">height</span>: <span class="number">1.0</span> &#125;);</span><br></pre></td></tr></table></figure>



<p><strong>步骤三，为cone 设置渲染流水线</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mapper = vtkMapper.<span class="title function_">newInstance</span>();</span><br><span class="line">mapper.<span class="title function_">setInputConnection</span>(coneSource.<span class="title function_">getOutputPort</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actor = vtkActor.<span class="title function_">newInstance</span>();</span><br><span class="line">actor.<span class="title function_">setMapper</span>(mapper);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">renderer.<span class="title function_">addActor</span>(actor);</span><br></pre></td></tr></table></figure>



<p><strong>步骤四，重置摄像头，并渲染</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">renderer.<span class="title function_">resetCamera</span>();</span><br><span class="line">renderWindow.<span class="title function_">render</span>();</span><br></pre></td></tr></table></figure>



<h5 id="🔵vtk的渲染流水线"><a href="#🔵vtk的渲染流水线" class="headerlink" title="🔵vtk的渲染流水线"></a>🔵vtk的渲染流水线</h5><p>资料来源是官方的ppt</p>
<p><a href="https://kitware.github.io/vtk-js/docs/tutorial.html">https://kitware.github.io/vtk-js/docs/tutorial.html</a></p>
<p><strong>概要图</strong></p>
<p><img src="/2021-06-25-vtk-js%E7%BB%93%E5%90%88React%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%A1%80/6.png"></p>
<p><strong>流水线</strong></p>
<ul>
<li><p>ConeSource提供数据</p>
</li>
<li><p>数据通过Mapper</p>
</li>
<li><p>Mapper被附加到Actor</p>
</li>
<li><p>Renderer包含许多actor</p>
</li>
<li><p>RenderWindow 包含许多渲染器</p>
</li>
</ul>
<p><img src="/2021-06-25-vtk-js%E7%BB%93%E5%90%88React%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%A1%80/7.png" alt="7"></p>
<p><strong>ConeSource</strong></p>
<ul>
<li><p>vtkConeSource是一个VTK过滤器</p>
</li>
<li><p>输出vtkPolyData的算法</p>
<ul>
<li><p>顶点、线和面的集合</p>
</li>
<li><p>基本的vtk.js数据类型</p>
</li>
</ul>
</li>
<li><p>ConeSource算法:0输入，1输出</p>
</li>
</ul>
<p><img src="/2021-06-25-vtk-js%E7%BB%93%E5%90%88React%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%A1%80/8.png" alt="8"></p>
<p><strong>流水线</strong></p>
<ul>
<li>InputData / OutputData<ul>
<li>静态:需要调用getOutputData() 来获取更新的数据</li>
</ul>
</li>
<li>InputConnection / OutputPort<ul>
<li>响应式:响应式:获取过滤器链的输出数据将获取给定现有参数的最新数据</li>
</ul>
</li>
<li>数据可以通过多个渲染管线</li>
</ul>
<p><img src="/2021-06-25-vtk-js%E7%BB%93%E5%90%88React%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%A1%80/9.png" alt="9"></p>
]]></content>
      <categories>
        <category>医学影像处理</category>
      </categories>
      <tags>
        <tag>医学影像处理</tag>
        <tag>前端</tag>
        <tag>vtk.js</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>vtk.js中代理(vtkProxyManager)的用法解析01</title>
    <url>/2021-06-28-vtk-js%E4%B8%AD%E4%BB%A3%E7%90%86-vtkProxyManager-%E7%9A%84%E7%94%A8%E6%B3%95%E8%A7%A3%E6%9E%9001/</url>
    <content><![CDATA[<h2 id="📋何为代理？"><a href="#📋何为代理？" class="headerlink" title="📋何为代理？"></a>📋何为代理？</h2><p>资料来源，官方ppt：</p>
<p><a href="https://docs.google.com/presentation/d/1Sr1OGxMSw0oCt46koKQbmwSIE11Kqq8MGtyW3W0ASpk">https://docs.google.com/presentation/d/1Sr1OGxMSw0oCt46koKQbmwSIE11Kqq8MGtyW3W0ASpk</a></p>
<span id="more"></span>

<h3 id="Proxy-Architecture-代理架构"><a href="#Proxy-Architecture-代理架构" class="headerlink" title="Proxy Architecture 代理架构"></a>Proxy Architecture 代理架构</h3><ul>
<li><p>用于高级渲染管线管理的代理接口</p>
<ul>
<li>受ParaView的代理启发</li>
</ul>
</li>
<li><p>允许使用统一的API来控制本地或远程渲染管线</p>
</li>
<li><p>创建简单的渲染管线</p>
</li>
</ul>
<p><img src="/2021-06-28-vtk-js%E4%B8%AD%E4%BB%A3%E7%90%86-vtkProxyManager-%E7%9A%84%E7%94%A8%E6%B3%95%E8%A7%A3%E6%9E%9001/1.png" alt="1"></p>
<h3 id="架构内容"><a href="#架构内容" class="headerlink" title="架构内容"></a>架构内容</h3><ul>
<li><p>数据源 Sources </p>
<ul>
<li><p>数据的来源</p>
</li>
<li><p>原始数据、过滤器等。</p>
</li>
</ul>
</li>
<li><p>表现 Representations </p>
<ul>
<li><p>为渲染数据绑定适当的actor、mapper和properties </p>
</li>
<li><p>例:SliceRepresentationProxy</p>
</li>
</ul>
</li>
<li><p>视口 view</p>
<ul>
<li><p>使用适当的交互器创建预定义的视图设置</p>
</li>
<li><p>例如:2D视口，3D视口</p>
</li>
</ul>
</li>
</ul>
<h3 id="架构简述"><a href="#架构简述" class="headerlink" title="架构简述"></a>架构简述</h3><ul>
<li><p>Proxy Manager 是 state 的中心存储</p>
</li>
<li><p>基于配置连接</p>
<ul>
<li>Source-Representation-View管道</li>
<li>视图类型</li>
<li>其他代理(如LookupTable 和 PiecewiseFunction)</li>
</ul>
</li>
<li><p>生命周期管理</p>
<ul>
<li>渲染管线</li>
<li>数据源</li>
<li>表现 Representations  和 视口 view</li>
</ul>
</li>
</ul>
<h3 id="代理设置"><a href="#代理设置" class="headerlink" title="代理设置"></a>代理设置</h3><ul>
<li>为数据源、表现和视口定义类</li>
<li>在类上公开所需的属性</li>
<li>同步不同对象的属性</li>
<li>定义数据在不同视口类型中的外观</li>
</ul>
<h2 id="📗ProxyManager-源码解析"><a href="#📗ProxyManager-源码解析" class="headerlink" title="📗ProxyManager 源码解析"></a>📗ProxyManager 源码解析</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">index.<span class="property">js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> macro <span class="keyword">from</span> <span class="string">&#x27;vtk.js/Sources/macro&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> core <span class="keyword">from</span> <span class="string">&#x27;./core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> state <span class="keyword">from</span> <span class="string">&#x27;./state&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> view <span class="keyword">from</span> <span class="string">&#x27;./view&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> properties <span class="keyword">from</span> <span class="string">&#x27;./properties&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">extend</span>(<span class="params">publicAPI, model, initialValues = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">assign</span>(</span><br><span class="line">    model,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">proxyIdMapping</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">proxyByGroup</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">proxyConfiguration</span>: &#123;&#125;, </span><br><span class="line">        <span class="comment">// &#123; definitions: &#123;&#125;, representations: &#123; viewName: &#123; sourceType: representationName &#125; &#125; &#125;</span></span><br><span class="line">      <span class="attr">sv2rMapping</span>: &#123;&#125;, <span class="comment">// sv2rMapping[sourceId][viewId] = rep</span></span><br><span class="line">      <span class="attr">r2svMapping</span>: &#123;&#125;, <span class="comment">// r2svMapping[representationId] = &#123; sourceId, viewId &#125;</span></span><br><span class="line">      <span class="attr">collapseState</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">lookupTables</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">piecewiseFunctions</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">animating</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    initialValues</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对象方法</span></span><br><span class="line">  macro.<span class="title function_">obj</span>(publicAPI, model);</span><br><span class="line">  <span class="comment">// 创建 set get 方法</span></span><br><span class="line">  macro.<span class="title function_">setGet</span>(publicAPI, model, [</span><br><span class="line">    <span class="string">&#x27;proxyConfiguration&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;activeSource&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;activeView&#x27;</span>,</span><br><span class="line">  ]);</span><br><span class="line">  <span class="comment">// 事件</span></span><br><span class="line">  macro.<span class="title function_">event</span>(publicAPI, model, <span class="string">&#x27;ActiveSourceChange&#x27;</span>);</span><br><span class="line">  macro.<span class="title function_">event</span>(publicAPI, model, <span class="string">&#x27;ActiveViewChange&#x27;</span>);</span><br><span class="line">  macro.<span class="title function_">event</span>(publicAPI, model, <span class="string">&#x27;ProxyRegistrationChange&#x27;</span>);</span><br><span class="line">	</span><br><span class="line">  <span class="comment">// 代理注册处理</span></span><br><span class="line">  <span class="title function_">core</span>(publicAPI, model);</span><br><span class="line">  <span class="comment">// 代理状态处理</span></span><br><span class="line">  <span class="title function_">state</span>(publicAPI, model);</span><br><span class="line">  <span class="comment">// 代理视口处理</span></span><br><span class="line">  <span class="title function_">view</span>(publicAPI, model);</span><br><span class="line">  <span class="comment">// 代理属性管理</span></span><br><span class="line">  <span class="title function_">properties</span>(publicAPI, model);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 增加 代理 API</span></span><br><span class="line">  macro.<span class="title function_">proxy</span>(publicAPI, model);</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//设置类名</span></span><br><span class="line">  model.<span class="property">classHierarchy</span>.<span class="title function_">push</span>(<span class="string">&#x27;vtkProxyManager&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> newInstance = macro.<span class="title function_">newInstance</span>(extend, <span class="string">&#x27;vtkProxyManager&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; newInstance, extend &#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>医学影像处理</category>
      </categories>
      <tags>
        <tag>医学影像处理</tag>
        <tag>前端</tag>
        <tag>vtk.js</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在vtk.js中创建新的类(class)？</title>
    <url>/2021-06-28-%E5%A6%82%E4%BD%95%E5%9C%A8vtk-js%E4%B8%AD%E5%88%9B%E5%BB%BA%E6%96%B0%E7%9A%84%E7%B1%BB-class-%EF%BC%9F/</url>
    <content><![CDATA[<p>原文：<a href="https://kitware.github.io/vtk-js/docs/develop_class.html">https://kitware.github.io/vtk-js/docs/develop_class.html</a></p>
<h2 id="📃在vtk-js中创建新的类"><a href="#📃在vtk-js中创建新的类" class="headerlink" title="📃在vtk.js中创建新的类"></a>📃在vtk.js中创建新的类</h2><p>本指南说明了如何向vtk.js库添加新类，以及我们使用的基本结构背后的概念。</p>
<span id="more"></span>

<p>首先，vtk.js不依赖于ES6规范中引入的类定义。相反，vtk.js提供了一个基于闭包的基础架构，它允许我们在没有任何层次约束的情况下将方法组合到特定的实例中。</p>
<p>由于我们的闭包范式，方法可以在它们的实例上下文之外使用，并且可以作为回调函数直接传递。因此，它们的使用不需要每次引用<strong>this</strong>。</p>
<p>按照惯例，我们为每个类创建一个目录。目录名必须是类名的大写形式，不带“vtk”前缀(尽管在导入类时，我们会添加“vtk”前缀)。该类的定义应该保存在该目录中的“index.js”文件中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> vtkDataSet <span class="keyword">from</span> <span class="string">&#x27;vtk.js/Sources/Common/DataModel/DataSet&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>使用目录而不是简单的JavaScript文件的原因是允许将几个资源关联到特定的类，比如常量文件、测试、示例和/或其他文档。</p>
<p>这个类应该属于一个<strong>模块</strong>，而那个模块应该属于一个**工具 (kit)**。</p>
<p><strong>Kits</strong>对应于存储库的<strong>source</strong>目录下的根目录。</p>
<p>每个<strong>kit</strong>包含几个<strong>模块</strong>，这些模块是内部的直接子目录。</p>
<p>在每个<strong>模块</strong>中，您可以找到它的类定义。</p>
<p>例如，vtk.js目前有以下粗体套件和斜体模块。</p>
<ul>
<li>Common<ul>
<li><em>Core</em></li>
<li><em>DataModel</em></li>
<li><em>System</em></li>
</ul>
</li>
<li>Filters<ul>
<li><em>General</em></li>
<li><em>Sources</em></li>
</ul>
</li>
<li>IO<ul>
<li><em>Core</em></li>
</ul>
</li>
<li>Interaction<ul>
<li><em>Style</em></li>
</ul>
</li>
<li>Rendering<ul>
<li><em>Core</em></li>
<li><em>Misc</em></li>
<li><em>OpenGL</em></li>
<li><em>SceneGraph</em></li>
</ul>
</li>
</ul>
<h3 id="🔵类定义"><a href="#🔵类定义" class="headerlink" title="🔵类定义"></a>🔵类定义</h3><p>下面是一个如何为vtk.js编写一个新类的例子。</p>
<p>设计灵感来源于Douglas Crockford的功能继承，但我们在某些方面也走得更远。这个博客(<a href="https://medium.com/javascript-scene/functional-mixins-composing-software-ffb66d5e731c)%E6%8F%90%E4%BE%9B%E4%BA%86%E4%B8%80%E4%B8%AA%E9%9D%9E%E5%B8%B8%E5%A5%BD%E7%9A%84%E8%83%8C%E6%99%AF%E6%8A%80%E6%9C%AF%EF%BC%8C%E6%88%91%E4%BB%AC%E4%BD%BF%E7%94%A8%E5%92%8C%E5%88%A9%E7%94%A8vtk.js%E3%80%82">https://medium.com/javascript-scene/functional-mixins-composing-software-ffb66d5e731c)提供了一个非常好的背景技术，我们使用和利用vtk.js。</a></p>
<p>这个博客(<a href="https://medium.com/@kentcdodds/classes-complexity-and-functional-programming-a8dd86903747)%E8%BF%98%E8%A7%A3%E9%87%8A%E4%BA%86%E4%B8%BA%E4%BB%80%E4%B9%88JavaScript%E4%B8%AD%E7%9A%84%E7%B1%BB%E5%B9%B6%E4%B8%8D%E6%80%BB%E6%98%AF%E6%9C%80%E5%A5%BD%E7%9A%84%E9%80%89%E6%8B%A9%E3%80%82">https://medium.com/@kentcdodds/classes-complexity-and-functional-programming-a8dd86903747)还解释了为什么JavaScript中的类并不总是最好的选择。</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">MyClass</span>/index.<span class="property">js</span></span><br><span class="line"><span class="keyword">import</span> macro          <span class="keyword">from</span> <span class="string">&#x27;vtk.js/macro&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> vtk            <span class="keyword">from</span> <span class="string">&#x27;vtk.js/vtk&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> vtkParentClass <span class="keyword">from</span> <span class="string">&#x27;vtk.js/Kit/Module/ParentClass&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> vtkOtherClass  <span class="keyword">from</span> <span class="string">&#x27;vtk.js/Kit/Module/OtherClass&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Constants</span>      <span class="keyword">from</span> <span class="string">&#x27;vtk.js/Kit/Module/MyClass/Constants&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Representation</span> &#125; = <span class="title class_">Constants</span>;  <span class="comment">// &#123; POINT: 0, WIREFRAME: 1, ... &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// 全局函数</span></span><br><span class="line"><span class="comment">// ----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加您想要静态公开的 模块级函数 或 api</span></span><br><span class="line"><span class="comment">// 下一节...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">moduleScopedMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 做一些什么..</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">moduleScopedStaticMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 做一些什么...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// 静态 API</span></span><br><span class="line"><span class="comment">// ----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">STATIC</span> = &#123;</span><br><span class="line">  moduleScopedStaticMethod,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// vtkMyClass 方法</span></span><br><span class="line"><span class="comment">// ----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">vtkMyClass</span>(<span class="params">publicAPI, model</span>) &#123;</span><br><span class="line">  <span class="comment">// 设置我们的 类名</span></span><br><span class="line">  model.<span class="property">classHierarchy</span>.<span class="title function_">push</span>(<span class="string">&#x27;vtkMyClass&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 捕获 “parentClass” api以供内部使用</span></span><br><span class="line">  <span class="keyword">const</span> superClass = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, publicAPI);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Public API 方法</span></span><br><span class="line">  publicAPI.<span class="property">exposedMethod</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 这是该对象的一个公开的方法</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  publicAPI.<span class="property">overriddenMethod</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    superClass.<span class="title function_">overriddenMethod</span>();</span><br><span class="line">    <span class="comment">// 让我们在这里添加自定义代码</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// 对象工厂</span></span><br><span class="line"><span class="comment">// ----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DEFAULT_VALUES</span> = &#123;</span><br><span class="line">  <span class="attr">myProp1</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">  <span class="comment">// myProp2: null,     // 不初始化内部对象</span></span><br><span class="line">  <span class="attr">myProp3</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">myProp4</span>: <span class="number">6</span>,</span><br><span class="line">  <span class="attr">myProp5</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">  <span class="attr">myProp6</span>: <span class="title class_">Representation</span>.<span class="property">WIREFRAME</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">extend</span>(<span class="params">publicAPI, model, initialValues = &#123;&#125;</span>) &#123;</span><br><span class="line">   <span class="comment">// model 获取值的顺序，首先是DEFAULT_VALUES，然后是initialValues</span></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">assign</span>(model, <span class="variable constant_">DEFAULT_VALUES</span>, initialValues);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 继承</span></span><br><span class="line">  vtkParentClass.<span class="title function_">extend</span>(publicAPI, model, initialValues);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 内部对象初始化</span></span><br><span class="line">  <span class="keyword">if</span> (model.<span class="property">myProp2</span>) &#123;</span><br><span class="line">    model.<span class="property">myProp2</span> = <span class="title function_">vtk</span>(model.<span class="property">myProp2</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    model.<span class="property">myProp2</span> = vtkOtherClass.<span class="title function_">newInstance</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建 get-only 宏</span></span><br><span class="line">  macro.<span class="title function_">get</span>(publicAPI, model, [<span class="string">&#x27;myProp2&#x27;</span>, <span class="string">&#x27;myProp4&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建 get-set 宏</span></span><br><span class="line">  macro.<span class="title function_">setGet</span>(publicAPI, model, [<span class="string">&#x27;myProp3&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 为数组创建set宏(需要知道大小)</span></span><br><span class="line">  macro.<span class="title function_">setArray</span>(publicAPI, model, [<span class="string">&#x27;myProp5&#x27;</span>], <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create get macros for array</span></span><br><span class="line">  macro.<span class="title function_">getArray</span>(publicAPI, model, [<span class="string">&#x27;myProp1&#x27;</span>, <span class="string">&#x27;myProp5&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 为数组创建get宏</span></span><br><span class="line">  macro.<span class="title function_">setGet</span>(publicAPI, model, [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;myProp6&#x27;</span>, <span class="attr">enum</span>: <span class="title class_">Representation</span>, <span class="attr">type</span>: <span class="string">&#x27;enum&#x27;</span> &#125;,</span><br><span class="line">  ]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更多宏方法, 参阅 &quot;Sources/macro.js&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对象特定的方法</span></span><br><span class="line">  <span class="title function_">vtkMyClass</span>(publicAPI, model);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> newInstance = macro.<span class="title function_">newInstance</span>(extend, <span class="string">&#x27;vtkMyClass&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123; newInstance, extend &#125;, <span class="variable constant_">STATIC</span>, <span class="title class_">Constants</span>);</span><br></pre></td></tr></table></figure>



<h3 id="🔵常量定义"><a href="#🔵常量定义" class="headerlink" title="🔵常量定义"></a>🔵常量定义</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">MyClass</span>/<span class="title class_">Constants</span>.<span class="property">js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Representation</span> = &#123;</span><br><span class="line">  <span class="attr">POINT</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">WIREFRAME</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">SURFACE</span>: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Format</span> = &#123;</span><br><span class="line">  <span class="attr">ASCII</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">BINARY</span>: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title class_">Representation</span>,</span><br><span class="line">  <span class="title class_">Format</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="🔵API-文档"><a href="#🔵API-文档" class="headerlink" title="🔵API 文档"></a>🔵API 文档</h3><p>如果您不想让代码成为文档的唯一来源，您可以添加自己的markdown文件，以进一步用代码片段、成员变量和方法使用对其进行文档记录。</p>
<p>为此，您需要添加一个api。Md在类目录中，如下所示:</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="section">## Usage</span></span><br><span class="line"></span><br><span class="line"><span class="code">```js</span></span><br><span class="line"><span class="code">import ConeSource from &#x27;vtk.js/Sources/Filters/Sources/ConeSource&#x27;;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">const coneSource = ConeSource.New(&#123; height: 2, radius: 1, resolution: 80 &#125;);</span></span><br><span class="line"><span class="code">const polydata = coneSource.getOutputData();</span></span><br></pre></td></tr></table></figure>

<h4 id="Height-set-get"><a href="#Height-set-get" class="headerlink" title="Height (set/get)"></a>Height (set/get)</h4><p>Floating point number representing the height of the cone.</p>
<h4 id="Radius-set-get"><a href="#Radius-set-get" class="headerlink" title="Radius (set/get)"></a>Radius (set/get)</h4><p>Floating point number representing the radius of the cone base.</p>
<h4 id="Resolution-set-get"><a href="#Resolution-set-get" class="headerlink" title="Resolution (set/get)"></a>Resolution (set/get)</h4><p>Integer representing the number of points used to build the base of the cone.</p>
<h4 id="Capping-set-get"><a href="#Capping-set-get" class="headerlink" title="Capping (set/get)"></a>Capping (set/get)</h4><p>Boolean letting you close the base of the cone.</p>
<h2 id="📋我补充的部分内容"><a href="#📋我补充的部分内容" class="headerlink" title="📋我补充的部分内容"></a>📋我补充的部分内容</h2><p>这里不再是原文中有的内容。</p>
<h3 id="🔵macro-newInstance-的方法"><a href="#🔵macro-newInstance-的方法" class="headerlink" title="🔵macro.newInstance 的方法"></a>🔵macro.newInstance 的方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">macro.js</span><br><span class="line">    </span><br><span class="line"><span class="comment">// ----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// newInstance</span></span><br><span class="line"><span class="comment">// ----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">export function <span class="title function_">newInstance</span><span class="params">(extend, className)</span> &#123;</span><br><span class="line">  <span class="type">const</span> <span class="variable">constructor</span> <span class="operator">=</span> (initialValues = &#123;&#125;) =&gt; &#123;</span><br><span class="line">    <span class="type">const</span> <span class="variable">model</span> <span class="operator">=</span> &#123;&#125;;</span><br><span class="line">    <span class="type">const</span> <span class="variable">publicAPI</span> <span class="operator">=</span> &#123;&#125;;</span><br><span class="line">    <span class="comment">// 运行我们定义的class，为publicAPI和model赋值</span></span><br><span class="line">    extend(publicAPI, model, initialValues);</span><br><span class="line">	<span class="comment">// 此方法可以冻结一个对象，一个被冻结的对象再也不能被修改</span></span><br><span class="line">    <span class="keyword">return</span> Object.freeze(publicAPI);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 注册 构造函数 到工厂</span></span><br><span class="line">  <span class="keyword">if</span> (className) &#123;</span><br><span class="line">    vtk.register(className, constructor);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最后返回一个方法，这个方法放回冻结的 publicAPI</span></span><br><span class="line">  <span class="keyword">return</span> constructor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vtk.<span class="property">js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">register</span>(<span class="params">vtkClassName, constructor</span>) &#123;</span><br><span class="line">  factoryMapping[vtkClassName] = constructor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>newInstance 需要传入2个参数:</strong></p>
<ul>
<li><p>extend：我们定义的继承方法</p>
</li>
<li><p>className： 类的名字 </p>
</li>
</ul>
<h3 id="🔵macro-get-的方法"><a href="#🔵macro-get-的方法" class="headerlink" title="🔵macro.get 的方法"></a>🔵macro.get 的方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">publicAPI, model, fieldNames</span>) &#123;</span><br><span class="line">  fieldNames.<span class="title function_">forEach</span>(<span class="function">(<span class="params">field</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> field === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">      publicAPI[<span class="string">`get<span class="subst">$&#123;capitalize(field.name)&#125;</span>`</span>] = <span class="function">() =&gt;</span> model[field.<span class="property">name</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      publicAPI[<span class="string">`get<span class="subst">$&#123;capitalize(field)&#125;</span>`</span>] = <span class="function">() =&gt;</span> model[field];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="🔵一个的实例"><a href="#🔵一个的实例" class="headerlink" title="🔵一个的实例"></a>🔵一个的实例</h3><p>例如平时使用的 vtkHttpDataSetReader,它的使用方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> reader = vtkHttpDataSetReader.<span class="title function_">newInstance</span>(&#123; <span class="attr">fetchGzip</span>: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure>

<p>它的源码（不全）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">index.<span class="property">js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// For vtk factory</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;vtk.js/Sources/Common/DataModel/ImageData&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;vtk.js/Sources/Common/DataModel/PolyData&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> vtk <span class="keyword">from</span> <span class="string">&#x27;vtk.js/Sources/vtk&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> macro <span class="keyword">from</span> <span class="string">&#x27;vtk.js/Sources/macro&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">DataAccessHelper</span> <span class="keyword">from</span> <span class="string">&#x27;vtk.js/Sources/IO/Core/DataAccessHelper&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> vtkDataArray <span class="keyword">from</span> <span class="string">&#x27;vtk.js/Sources/Common/Core/DataArray&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> vtkStringArray <span class="keyword">from</span> <span class="string">&#x27;vtk.js/Sources/Common/Core/StringArray&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Enable data soure for DataAccessHelper</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;vtk.js/Sources/IO/Core/DataAccessHelper/LiteHttpDataAccessHelper&#x27;</span>; <span class="comment">// Just need HTTP</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fieldDataLocations = [<span class="string">&#x27;pointData&#x27;</span>, <span class="string">&#x27;cellData&#x27;</span>, <span class="string">&#x27;fieldData&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">ARRAY_BUILDERS</span> = &#123;</span><br><span class="line">  vtkDataArray,</span><br><span class="line">  vtkStringArray,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// 全局方法</span></span><br><span class="line"><span class="comment">// ----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cachedArrays = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">GEOMETRY_ARRAYS</span> = &#123;</span><br><span class="line">  <span class="title function_">vtkPolyData</span>(<span class="params">dataset</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">vtkImageData</span>(<span class="params">dataset</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">vtkUnstructuredGrid</span>(<span class="params">dataset</span>) &#123;</span><br><span class="line">    ....</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">vtkRectilinearGrid</span>(<span class="params">dataset</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processDataSet</span>(<span class="params"></span></span><br><span class="line"><span class="params">  publicAPI,</span></span><br><span class="line"><span class="params">  model,</span></span><br><span class="line"><span class="params">  dataset,</span></span><br><span class="line"><span class="params">  fetchArray,</span></span><br><span class="line"><span class="params">  resolve,</span></span><br><span class="line"><span class="params">  reject,</span></span><br><span class="line"><span class="params">  loadData</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> enable = model.<span class="property">enableArray</span>;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// vtkHttpDataSetReader 类</span></span><br><span class="line"><span class="comment">// ----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">vtkHttpDataSetReader</span>(<span class="params">publicAPI, model</span>) &#123;</span><br><span class="line">  <span class="comment">// 设置类名</span></span><br><span class="line">  model.<span class="property">classHierarchy</span>.<span class="title function_">push</span>(<span class="string">&#x27;vtkHttpDataSetReader&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 默认为空输出</span></span><br><span class="line">  model.<span class="property">output</span>[<span class="number">0</span>] = <span class="title function_">vtk</span>(&#123; <span class="attr">vtkClass</span>: <span class="string">&#x27;vtkPolyData&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建默认的dataAccessHelper(如果不可用)</span></span><br><span class="line">  <span class="keyword">if</span> (!model.<span class="property">dataAccessHelper</span>) &#123;</span><br><span class="line">    model.<span class="property">dataAccessHelper</span> = <span class="title class_">DataAccessHelper</span>.<span class="title function_">get</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取Array的内部方法</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fetchArray</span>(<span class="params">array, options = &#123;&#125;</span>) &#123;</span><br><span class="line">  	 ...</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(cachedArrays[arrayId]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取数据集 (metadata)</span></span><br><span class="line">  publicAPI.<span class="property">updateMetadata</span> = <span class="function">(<span class="params">loadData = <span class="literal">false</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (model.<span class="property">compression</span> === <span class="string">&#x27;zip&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置数据集的 url</span></span><br><span class="line">  publicAPI.<span class="property">setUrl</span> = <span class="function">(<span class="params">url, options = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (url.<span class="title function_">indexOf</span>(<span class="string">&#x27;index.json&#x27;</span>) === -<span class="number">1</span> &amp;&amp; !options.<span class="property">fullpath</span>) &#123;</span><br><span class="line">      model.<span class="property">baseURL</span> = url;</span><br><span class="line">      model.<span class="property">url</span> = <span class="string">`<span class="subst">$&#123;url&#125;</span>/index.json`</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      model.<span class="property">url</span> = url;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Remove the file in the URL</span></span><br><span class="line">      <span class="keyword">const</span> path = url.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">      path.<span class="title function_">pop</span>();</span><br><span class="line">      model.<span class="property">baseURL</span> = path.<span class="title function_">join</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    model.<span class="property">compression</span> = options.<span class="property">compression</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 metadata</span></span><br><span class="line">    <span class="keyword">return</span> publicAPI.<span class="title function_">updateMetadata</span>(!!options.<span class="property">loadData</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取实际的数据数组</span></span><br><span class="line">  publicAPI.<span class="property">loadData</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> datasetObj = model.<span class="property">dataset</span>;</span><br><span class="line">    <span class="keyword">const</span> arrayToFecth = model.<span class="property">arrays</span></span><br><span class="line">      .<span class="title function_">filter</span>(<span class="function">(<span class="params">array</span>) =&gt;</span> array.<span class="property">enable</span>)</span><br><span class="line">      .<span class="title function_">filter</span>(<span class="function">(<span class="params">array</span>) =&gt;</span> array.<span class="property">array</span>.<span class="property">ref</span>)</span><br><span class="line">      .<span class="title function_">map</span>(<span class="function">(<span class="params">array</span>) =&gt;</span> array.<span class="property">array</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">error</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">        <span class="title function_">reject</span>(e);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">processNext</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (arrayToFecth.<span class="property">length</span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> &#123; progressCallback &#125; = model;</span><br><span class="line">           <span class="comment">// 是否启用 fetchGzip</span></span><br><span class="line">          <span class="keyword">const</span> compression = model.<span class="property">fetchGzip</span> ? <span class="string">&#x27;gz&#x27;</span> : <span class="literal">null</span>;</span><br><span class="line">          <span class="title function_">fetchArray</span>(arrayToFecth.<span class="title function_">pop</span>(), &#123;</span><br><span class="line">            compression,</span><br><span class="line">            progressCallback,</span><br><span class="line">          &#125;).<span class="title function_">then</span>(processNext, error);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (datasetObj) &#123;</span><br><span class="line">          <span class="comment">// Perform array registration on new arrays</span></span><br><span class="line">          model.<span class="property">arrays</span></span><br><span class="line">            .<span class="title function_">filter</span>(</span><br><span class="line">              <span class="function">(<span class="params">metaArray</span>) =&gt;</span> metaArray.<span class="property">registration</span> &amp;&amp; !metaArray.<span class="property">array</span>.<span class="property">ref</span></span><br><span class="line">            )</span><br><span class="line">            .<span class="title function_">forEach</span>(<span class="function">(<span class="params">metaArray</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">const</span> newArray = <span class="variable constant_">ARRAY_BUILDERS</span>[</span><br><span class="line">                metaArray.<span class="property">array</span>.<span class="property">vtkClass</span></span><br><span class="line">              ].<span class="title function_">newInstance</span>(metaArray.<span class="property">array</span>);</span><br><span class="line">              datasetObj[<span class="string">`get<span class="subst">$&#123;macro.capitalize(metaArray.location)&#125;</span>`</span>]()[</span><br><span class="line">                metaArray.<span class="property">registration</span></span><br><span class="line">              ](newArray);</span><br><span class="line">              <span class="keyword">delete</span> metaArray.<span class="property">registration</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">          datasetObj.<span class="title function_">modified</span>();</span><br><span class="line">          <span class="title function_">resolve</span>(publicAPI, datasetObj);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 开始处理队列</span></span><br><span class="line">      <span class="title function_">processNext</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  publicAPI.<span class="property">requestData</span> = <span class="function">(<span class="params">inData, outData</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do nothing loadData will eventually load up the data</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 切换数组以加载</span></span><br><span class="line">  publicAPI.<span class="property">enableArray</span> = <span class="function">(<span class="params">location, name, enable = <span class="literal">true</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> activeArray = model.<span class="property">arrays</span>.<span class="title function_">filter</span>(</span><br><span class="line">      <span class="function">(<span class="params">array</span>) =&gt;</span> array.<span class="property">name</span> === name &amp;&amp; array.<span class="property">location</span> === location</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (activeArray.<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">      activeArray[<span class="number">0</span>].<span class="property">enable</span> = enable;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// return Busy state</span></span><br><span class="line">  publicAPI.<span class="property">isBusy</span> = <span class="function">() =&gt;</span> !!model.<span class="property">requestCount</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// 对象工厂</span></span><br><span class="line"><span class="comment">// ----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DEFAULT_VALUES</span> = &#123;</span><br><span class="line">  <span class="attr">enableArray</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">fetchGzip</span>: <span class="literal">false</span>, <span class="comment">// fetchGzip 默认是false</span></span><br><span class="line">  <span class="attr">arrays</span>: [],</span><br><span class="line">  <span class="attr">url</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">requestCount</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="comment">// dataAccessHelper: null,</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">extend</span>(<span class="params">publicAPI, model, initialValues = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// model 获取值的顺序，首先是DEFAULT_VALUES，然后是initialValues</span></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">assign</span>(model, <span class="variable constant_">DEFAULT_VALUES</span>, initialValues);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构建 VTK API</span></span><br><span class="line">  macro.<span class="title function_">obj</span>(publicAPI, model);</span><br><span class="line">  <span class="comment">// get</span></span><br><span class="line">  macro.<span class="title function_">get</span>(publicAPI, model, [</span><br><span class="line">    <span class="string">&#x27;enableArray&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;fetchGzip&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;url&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;baseURL&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;dataAccessHelper&#x27;</span>,</span><br><span class="line">  ]);</span><br><span class="line">  <span class="comment">// set</span></span><br><span class="line">  macro.<span class="title function_">set</span>(publicAPI, model, [<span class="string">&#x27;dataAccessHelper&#x27;</span>, <span class="string">&#x27;progressCallback&#x27;</span>]);</span><br><span class="line">  <span class="comment">// getArray</span></span><br><span class="line">  macro.<span class="title function_">getArray</span>(publicAPI, model, [<span class="string">&#x27;arrays&#x27;</span>]);</span><br><span class="line">  <span class="comment">// vtkAlgorithm: setInputData(), setInputConnection(), getOutputData(), getOutputPort()</span></span><br><span class="line">  macro.<span class="title function_">algo</span>(publicAPI, model, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="comment">// 注册事件</span></span><br><span class="line">  macro.<span class="title function_">event</span>(publicAPI, model, <span class="string">&#x27;busy&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对象方法</span></span><br><span class="line">  <span class="title function_">vtkHttpDataSetReader</span>(publicAPI, model);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 确保我们可以从模型中解构progressCallback</span></span><br><span class="line">  <span class="keyword">if</span> (model.<span class="property">progressCallback</span> === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    model.<span class="property">progressCallback</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> newInstance = macro.<span class="title function_">newInstance</span>(extend, <span class="string">&#x27;vtkHttpDataSetReader&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; newInstance, extend &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>医学影像处理</category>
      </categories>
      <tags>
        <tag>医学影像处理</tag>
        <tag>前端</tag>
        <tag>vtk.js</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>vtk.js中ProxyManager的API整理v1.0</title>
    <url>/2021-06-29-vtk-js%E4%B8%ADProxyManager%E7%9A%84API%E6%95%B4%E7%90%86v1-0/</url>
    <content><![CDATA[<p>这个 ProxyManager 官方似乎是不给api文档的，尝试自己总结一下：</p>
<p><strong>当前vtk.js 版本：18.2.0</strong></p>
<p><strong>使用例来源大多数来自paraview-glance</strong></p>
<span id="more"></span>

<h2 id="🔵基础API"><a href="#🔵基础API" class="headerlink" title="🔵基础API"></a>🔵基础API</h2><h3 id="setProxyConfiguration"><a href="#setProxyConfiguration" class="headerlink" title="setProxyConfiguration"></a>setProxyConfiguration</h3><p>设置proxyConfiguration</p>
<h3 id="getProxyConfiguration"><a href="#getProxyConfiguration" class="headerlink" title="getProxyConfiguration"></a>getProxyConfiguration</h3><p>获取proxyConfiguration</p>
<h3 id="setActiveSource"><a href="#setActiveSource" class="headerlink" title="setActiveSource"></a><del>setActiveSource</del></h3><p><del>设置activeSource</del></p>
<h3 id="getActiveSource"><a href="#getActiveSource" class="headerlink" title="getActiveSource"></a>getActiveSource</h3><p>设置activeSource</p>
<p><strong>使用例:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> source = <span class="variable language_">this</span>.<span class="property">$proxyManager</span>.<span class="title function_">getActiveSource</span>();</span><br><span class="line"><span class="keyword">if</span> (source) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setInternalValue</span>(source.<span class="title function_">getProxyId</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">updateSourceList</span>();</span><br></pre></td></tr></table></figure>

<h3 id="setActiveView"><a href="#setActiveView" class="headerlink" title="setActiveView"></a><del>setActiveView</del></h3><p><del>设置activeView</del></p>
<h3 id="getActiveView"><a href="#getActiveView" class="headerlink" title="getActiveView"></a>getActiveView</h3><p>设置activeView</p>
<p><strong>使用例:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="variable">activeView</span> <span class="operator">=</span> <span class="built_in">this</span>.$proxyManager.getActiveView();.</span><br></pre></td></tr></table></figure>



<h2 id="🔵事件"><a href="#🔵事件" class="headerlink" title="🔵事件"></a>🔵事件</h2><h3 id="onActiveSourceChange"><a href="#onActiveSourceChange" class="headerlink" title="onActiveSourceChange"></a>onActiveSourceChange</h3><p>当 activeSource 改变</p>
<p><strong>使用例:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$proxyManager</span>.<span class="title function_">onActiveSourceChange</span>(<span class="function">(<span class="params">s</span>) =&gt;</span></span><br><span class="line">  macro.<span class="title function_">setImmediate</span>(<span class="function">() =&gt;</span></span><br><span class="line">    hooks.<span class="property">onActiveSourceChange</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, s)</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="onActiveViewChange"><a href="#onActiveViewChange" class="headerlink" title="onActiveViewChange"></a>onActiveViewChange</h3><p>当 activeView 改变</p>
<p><strong>使用例:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$proxyManager</span>.<span class="title function_">onActiveViewChange</span>(<span class="function">(<span class="params">v</span>) =&gt;</span></span><br><span class="line">  macro.<span class="title function_">setImmediate</span>(<span class="function">() =&gt;</span> hooks.<span class="property">onActiveViewChange</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, v))</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="onProxyRegistrationChange"><a href="#onProxyRegistrationChange" class="headerlink" title="onProxyRegistrationChange"></a>onProxyRegistrationChange</h3><p>当 proxyRegistration 改变时</p>
<p><strong>使用例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$proxyManager</span>.<span class="title function_">onProxyRegistrationChange</span>(<span class="function">(<span class="params">info</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; action, proxyId, proxy &#125; = info;</span><br><span class="line">  <span class="keyword">if</span> (action === <span class="string">&#x27;register&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (hooks.<span class="property">onProxyCreated</span>) &#123;</span><br><span class="line">      hooks.<span class="property">onProxyCreated</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, info);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (hooks.<span class="property">onProxyModified</span>) &#123;</span><br><span class="line">      proxySubs[proxyId] = proxy.<span class="title function_">onModified</span>(<span class="function">(<span class="params">p</span>) =&gt;</span></span><br><span class="line">        hooks.<span class="property">onProxyModified</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, p)</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (action === <span class="string">&#x27;unregister&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (proxyId <span class="keyword">in</span> proxySubs) &#123;</span><br><span class="line">      proxySubs[proxyId].<span class="title function_">unsubscribe</span>();</span><br><span class="line">      <span class="keyword">delete</span> proxySubs[proxyId];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (hooks.<span class="property">onProxyDeleted</span>) &#123;</span><br><span class="line">      hooks.<span class="property">onProxyDeleted</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, info);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (hooks.<span class="property">onProxyRegistrationChange</span>) &#123;</span><br><span class="line">    hooks.<span class="property">onProxyRegistrationChange</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, info);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="🔵核心core"><a href="#🔵核心core" class="headerlink" title="🔵核心core"></a>🔵核心core</h2><h3 id="setActiveSource-1"><a href="#setActiveSource-1" class="headerlink" title="setActiveSource"></a>setActiveSource</h3><p>设置 activeSource</p>
<p><strong>源码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">publicAPI.<span class="property">setActiveSource</span> = <span class="function">(<span class="params">source</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (model.<span class="property">activeSource</span> !== source) &#123;</span><br><span class="line">      <span class="keyword">if</span> (model.<span class="property">activeSourceSubscription</span>) &#123;</span><br><span class="line">        model.<span class="property">activeSourceSubscription</span>.<span class="title function_">unsubscribe</span>();</span><br><span class="line">        model.<span class="property">activeSourceSubscription</span> = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      model.<span class="property">activeSource</span> = source;</span><br><span class="line">      <span class="keyword">if</span> (source) &#123;</span><br><span class="line">        model.<span class="property">activeSourceSubscription</span> = source.<span class="title function_">onModified</span>(publicAPI.<span class="property">modified</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      publicAPI.<span class="title function_">modified</span>();</span><br><span class="line">      publicAPI.<span class="title function_">invokeActiveSourceChange</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>



<h3 id="setActiveView-1"><a href="#setActiveView-1" class="headerlink" title="setActiveView"></a>setActiveView</h3><p>设置 activeView</p>
<p><strong>源码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">publicAPI.<span class="property">setActiveView</span> = <span class="function">(<span class="params">view</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (model.<span class="property">activeView</span> !== view) &#123;</span><br><span class="line">    <span class="keyword">if</span> (model.<span class="property">activeViewSubscription</span>) &#123;</span><br><span class="line">      model.<span class="property">activeViewSubscription</span>.<span class="title function_">unsubscribe</span>();</span><br><span class="line">      model.<span class="property">activeViewSubscription</span> = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    model.<span class="property">activeView</span> = view;</span><br><span class="line">    <span class="keyword">if</span> (view) &#123;</span><br><span class="line">      model.<span class="property">activeViewSubscription</span> = view.<span class="title function_">onModified</span>(publicAPI.<span class="property">modified</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    publicAPI.<span class="title function_">modified</span>();</span><br><span class="line">    publicAPI.<span class="title function_">invokeActiveViewChange</span>(view);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="getProxyById"><a href="#getProxyById" class="headerlink" title="getProxyById"></a>getProxyById</h3><p>获取 proxy 通过 id</p>
<p><strong>源码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">publicAPI.<span class="property">getProxyById</span> = <span class="function">(<span class="params">id</span>) =&gt;</span> model.<span class="property">proxyIdMapping</span>[id];</span><br></pre></td></tr></table></figure>

<p><strong>使用例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">source</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$proxyManager</span>.<span class="title function_">getProxyById</span>(<span class="variable language_">this</span>.<span class="property">sourceId</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<h3 id="getProxyGroups"><a href="#getProxyGroups" class="headerlink" title="getProxyGroups"></a>getProxyGroups</h3><p>获取 proxy Groups</p>
<p><strong>源码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">publicAPI.<span class="property">getProxyGroups</span> = <span class="function">() =&gt;</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(model.<span class="property">proxyByGroup</span>);</span><br></pre></td></tr></table></figure>

<p><strong>使用例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> groups = <span class="variable language_">this</span>.<span class="property">$proxyManager</span>.<span class="title function_">getProxyGroups</span>();</span><br></pre></td></tr></table></figure>



<h3 id="getProxyInGroup"><a href="#getProxyInGroup" class="headerlink" title="getProxyInGroup"></a>getProxyInGroup</h3><p>获取 group 中的proxy</p>
<p><strong>源码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">publicAPI.<span class="property">getProxyInGroup</span> = <span class="function">(<span class="params">name</span>) =&gt;</span></span><br><span class="line">  [].<span class="title function_">concat</span>(model.<span class="property">proxyByGroup</span>[name] || []);</span><br></pre></td></tr></table></figure>

<p><strong>使用例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; groups.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> name = groups[i];</span><br><span class="line">  proxies = proxies.<span class="title function_">concat</span>(</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$proxyManager</span>.<span class="title function_">getProxyInGroup</span>(name)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="getSources"><a href="#getSources" class="headerlink" title="getSources"></a>getSources</h3><p>获取 sources</p>
<p><strong>源码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">publicAPI.<span class="property">getSources</span> = <span class="function">() =&gt;</span> [].<span class="title function_">concat</span>(model.<span class="property">proxyByGroup</span>.<span class="property">Sources</span> || []);</span><br></pre></td></tr></table></figure>

<p><strong>使用例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// restore proxy keys</span></span><br><span class="line">proxyManager.<span class="title function_">getSources</span>().<span class="title function_">forEach</span>(<span class="function">(<span class="params">source</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> ds = source.<span class="title function_">getDataset</span>();</span><br><span class="line">  <span class="keyword">if</span> (restoreProxyKeys.<span class="title function_">has</span>(ds)) &#123;</span><br><span class="line">    <span class="keyword">const</span> kv = restoreProxyKeys.<span class="title function_">get</span>(ds);</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(kv).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> source.<span class="title function_">setKey</span>(key, kv[key]));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h3 id="getRepresentations"><a href="#getRepresentations" class="headerlink" title="getRepresentations"></a>getRepresentations</h3><p>获取所有 Representations</p>
<p><strong>源码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">publicAPI.<span class="property">getRepresentations</span> = <span class="function">() =&gt;</span></span><br><span class="line">  [].<span class="title function_">concat</span>(model.<span class="property">proxyByGroup</span>.<span class="property">Representations</span> || []);</span><br></pre></td></tr></table></figure>

<p><strong>使用例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myReps = <span class="variable language_">this</span>.<span class="property">$proxyManager</span></span><br><span class="line">  .<span class="title function_">getRepresentations</span>()</span><br><span class="line">  .<span class="title function_">filter</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> r.<span class="title function_">getInput</span>() === <span class="variable language_">this</span>.<span class="property">source</span>);</span><br></pre></td></tr></table></figure>



<h3 id="getViews"><a href="#getViews" class="headerlink" title="getViews"></a>getViews</h3><p>获取所有 views</p>
<p><strong>源码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">publicAPI.<span class="property">getViews</span> = <span class="function">() =&gt;</span> [].<span class="title function_">concat</span>(model.<span class="property">proxyByGroup</span>.<span class="property">Views</span> || []);</span><br></pre></td></tr></table></figure>

<p><strong>使用例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> views2D = pxm.<span class="title function_">getViews</span>().<span class="title function_">filter</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> v.<span class="title function_">isA</span>(<span class="string">&#x27;vtkView2DProxy&#x27;</span>));</span><br><span class="line">...</span><br><span class="line"><span class="keyword">const</span> view3d = pxm.<span class="title function_">getViews</span>().<span class="title function_">find</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> v.<span class="title function_">getProxyName</span>() === <span class="string">&#x27;View3D&#x27;</span>);</span><br><span class="line">...</span><br><span class="line"><span class="keyword">const</span> view = <span class="variable language_">this</span>.<span class="property">$proxyManager</span>.<span class="title function_">getViews</span>()[<span class="number">0</span>];</span><br></pre></td></tr></table></figure>



<h3 id="createProxy"><a href="#createProxy" class="headerlink" title="createProxy"></a>createProxy</h3><p>创建 proxy</p>
<p><strong>源码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">publicAPI.<span class="property">createProxy</span> = <span class="function">(<span class="params">group, name, options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; definitions &#125; = model.<span class="property">proxyConfiguration</span>;</span><br><span class="line">  <span class="keyword">if</span> (!definitions[group] || !definitions[group][name]) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> definition = definitions[group][name];</span><br><span class="line">  <span class="keyword">const</span> definitionOptions = &#123; ...definition.<span class="property">options</span>, ...options &#125;;</span><br><span class="line">  <span class="keyword">const</span> proxy = definition.<span class="property">class</span>.<span class="title function_">newInstance</span>(&#123;</span><br><span class="line">    ...definitionOptions,</span><br><span class="line">    <span class="attr">proxyGroup</span>: group,</span><br><span class="line">    <span class="attr">proxyName</span>: name,</span><br><span class="line">    <span class="attr">proxyManager</span>: publicAPI,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Handle proxy property settings</span></span><br><span class="line">  <span class="keyword">if</span> (definition.<span class="property">proxyProps</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> proxyMap = &#123;&#125;;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(definition.<span class="property">proxyProps</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> newProxyDef = definition.<span class="property">proxyProps</span>[key];</span><br><span class="line">      proxyMap[key] = publicAPI.<span class="title function_">createProxy</span>(</span><br><span class="line">        newProxyDef.<span class="property">group</span>,</span><br><span class="line">        newProxyDef.<span class="property">name</span>,</span><br><span class="line">        newProxyDef.<span class="property">options</span></span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">    proxy.<span class="title function_">set</span>(proxyMap);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Handle property setting</span></span><br><span class="line">  <span class="keyword">if</span> (definition.<span class="property">props</span>) &#123;</span><br><span class="line">    proxy.<span class="title function_">set</span>(definition.<span class="property">props</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">registerProxy</span>(proxy);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (definitionOptions.<span class="property">activateOnCreate</span>) &#123;</span><br><span class="line">    proxy.<span class="title function_">activate</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> proxy;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>使用例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> view = proxyManager.<span class="title function_">createProxy</span>(<span class="string">&#x27;Views&#x27;</span>, <span class="string">&#x27;ItkVtkView&#x27;</span>);</span><br><span class="line">...</span><br><span class="line"><span class="keyword">const</span> imageSource = proxyManager.<span class="title function_">createProxy</span>(<span class="string">&#x27;Sources&#x27;</span>, <span class="string">&#x27;TrivialProducer&#x27;</span>, &#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;Image&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="getRepresentation"><a href="#getRepresentation" class="headerlink" title="getRepresentation"></a>getRepresentation</h3><p>获取 Representation</p>
<p><strong>源码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">publicAPI.<span class="property">getRepresentation</span> = <span class="function">(<span class="params">source, view</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> sourceToUse = source || publicAPI.<span class="title function_">getActiveSource</span>();</span><br><span class="line">  <span class="keyword">const</span> viewToUse = view || publicAPI.<span class="title function_">getActiveView</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Can only get a representation for a source and a view</span></span><br><span class="line">  <span class="keyword">if</span> (!sourceToUse || !viewToUse || !sourceToUse.<span class="title function_">getType</span>()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> sourceId = sourceToUse.<span class="title function_">getProxyId</span>();</span><br><span class="line">  <span class="keyword">const</span> viewId = viewToUse.<span class="title function_">getProxyId</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> viewRepMap = model.<span class="property">sv2rMapping</span>[sourceId];</span><br><span class="line">  <span class="keyword">if</span> (!viewRepMap) &#123;</span><br><span class="line">    viewRepMap = &#123;&#125;;</span><br><span class="line">    model.<span class="property">sv2rMapping</span>[sourceId] = viewRepMap;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> rep = viewRepMap[viewId];</span><br><span class="line">  <span class="keyword">if</span> (!rep) &#123;</span><br><span class="line">    <span class="keyword">const</span> viewName = viewToUse.<span class="title function_">getProxyName</span>();</span><br><span class="line">    <span class="keyword">const</span> sourceType = sourceToUse.<span class="title function_">getType</span>();</span><br><span class="line">    <span class="keyword">const</span> definition =</span><br><span class="line">      model.<span class="property">proxyConfiguration</span>.<span class="property">representations</span>[viewName][sourceType];</span><br><span class="line">    <span class="keyword">if</span> (!definition) &#123;</span><br><span class="line">      <span class="title function_">vtkErrorMacro</span>(</span><br><span class="line">        <span class="string">`No definition for representation of <span class="subst">$&#123;sourceType&#125;</span> in view <span class="subst">$&#123;viewName&#125;</span>`</span></span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    rep = publicAPI.<span class="title function_">createProxy</span>(</span><br><span class="line">      <span class="string">&#x27;Representations&#x27;</span>,</span><br><span class="line">      definition.<span class="property">name</span>,</span><br><span class="line">      definition.<span class="property">options</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    model.<span class="property">r2svMapping</span>[rep.<span class="title function_">getProxyId</span>()] = &#123; sourceId, viewId &#125;;</span><br><span class="line">    viewRepMap[viewId] = rep;</span><br><span class="line"></span><br><span class="line">    rep.<span class="title function_">setInput</span>(sourceToUse);</span><br><span class="line">    viewToUse.<span class="title function_">addRepresentation</span>(rep);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> rep;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>使用例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> imageRepresentation = proxyManager.<span class="title function_">getRepresentation</span>(imageSource, view);</span><br><span class="line">...</span><br><span class="line"><span class="keyword">const</span> sliceActors = imageRepresentation.<span class="title function_">getActors</span>();</span><br><span class="line">sliceActors.<span class="title function_">forEach</span>(<span class="function">(<span class="params">actor</span>) =&gt;</span> &#123;</span><br><span class="line">	actor.<span class="title function_">getProperty</span>().<span class="title function_">setRGBTransferFunction</span>(lut);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h3 id="deleteProxy"><a href="#deleteProxy" class="headerlink" title="deleteProxy"></a>deleteProxy</h3><p>删除代理</p>
<p><strong>源码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">publicAPI.deleteProxy = (proxy) =&gt; &#123;</span><br><span class="line">  <span class="type">const</span> <span class="variable">group</span> <span class="operator">=</span> proxy.getProxyGroup().toLowerCase();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (group === <span class="string">&#x27;views&#x27;</span>) &#123;</span><br><span class="line">    proxy.getRepresentations().forEach((repProxy) =&gt; &#123;</span><br><span class="line">      publicAPI.deleteProxy(repProxy);</span><br><span class="line">    &#125;);</span><br><span class="line">    proxy.setContainer(<span class="literal">null</span>);</span><br><span class="line">    unRegisterProxy(proxy);</span><br><span class="line">    <span class="keyword">if</span> (publicAPI.getActiveView() === proxy) &#123;</span><br><span class="line">      publicAPI.setActiveView(publicAPI.getViews()[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (group === <span class="string">&#x27;representations&#x27;</span>) &#123;</span><br><span class="line">    const &#123; sourceId, viewId &#125; = model.r2svMapping[proxy.getProxyId()];</span><br><span class="line">    <span class="type">const</span> <span class="variable">view</span> <span class="operator">=</span> publicAPI.getProxyById(viewId);</span><br><span class="line">    view.removeRepresentation(proxy);</span><br><span class="line">    delete model.r2svMapping[proxy.getProxyId()];</span><br><span class="line">    delete model.sv2rMapping[sourceId][viewId];</span><br><span class="line">    unRegisterProxy(proxy);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (group === <span class="string">&#x27;sources&#x27;</span>) &#123;</span><br><span class="line">    <span class="type">const</span> <span class="variable">viewToRep</span> <span class="operator">=</span> model.sv2rMapping[proxy.getProxyId()];</span><br><span class="line">    Object.keys(viewToRep).forEach((viewId) =&gt; &#123;</span><br><span class="line">      publicAPI.deleteProxy(viewToRep[viewId]);</span><br><span class="line">    &#125;);</span><br><span class="line">    unRegisterProxy(proxy);</span><br><span class="line">    <span class="keyword">if</span> (publicAPI.getActiveSource() === proxy) &#123;</span><br><span class="line">      publicAPI.setActiveSource(publicAPI.getSources()[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    unRegisterProxy(proxy);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Delete the object itself</span></span><br><span class="line">  proxy.delete();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>使用例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">deleteDataset</span>(<span class="params">sourceId</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> proxy = <span class="variable language_">this</span>.<span class="property">$proxyManager</span>.<span class="title function_">getProxyById</span>(sourceId);</span><br><span class="line">  <span class="keyword">if</span> (proxy) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$proxyManager</span>.<span class="title function_">deleteProxy</span>(proxy);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<h2 id="🔵状态-state"><a href="#🔵状态-state" class="headerlink" title="🔵状态 state"></a>🔵状态 state</h2><h3 id="loadState"><a href="#loadState" class="headerlink" title="loadState"></a>loadState</h3><p>加载 state</p>
<p><strong>源码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">publicAPI.<span class="property">loadState</span> = <span class="function">(<span class="params">state, options = &#123;&#125;</span>) =&gt;</span></span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> proxyMapping = &#123;&#125;;</span><br><span class="line">    <span class="keyword">const</span> $oldToNewIdMapping = &#123;&#125;;</span><br><span class="line">    <span class="keyword">const</span> cameras = &#123;&#125;;</span><br><span class="line">    <span class="keyword">const</span> datasetHandler = options.<span class="property">datasetHandler</span> || vtk;</span><br><span class="line">    <span class="keyword">const</span> sourcePromises = [];</span><br><span class="line"></span><br><span class="line">    state.<span class="property">sources</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">&#123; id, group, name, props &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      sourcePromises.<span class="title function_">push</span>(</span><br><span class="line">        <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title function_">datasetHandler</span>(props.<span class="property">dataset</span>)).<span class="title function_">then</span>(<span class="function">(<span class="params">dataset</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (dataset) &#123;</span><br><span class="line">            <span class="keyword">const</span> proxy = publicAPI.<span class="title function_">createProxy</span>(group, name);</span><br><span class="line">            proxy.<span class="title function_">setName</span>(props.<span class="property">name</span>);</span><br><span class="line">            proxy.<span class="title function_">setInputData</span>(dataset, props.<span class="property">type</span>);</span><br><span class="line">            proxyMapping[id] = proxy;</span><br><span class="line">            <span class="keyword">return</span> proxy;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">all</span>(sourcePromises)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> views = publicAPI.<span class="title function_">getViews</span>();</span><br><span class="line">        state.<span class="property">views</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">&#123; id, group, name, props, camera &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> proxy = <span class="literal">null</span>;</span><br><span class="line">          <span class="keyword">if</span> (state.<span class="property">options</span>.<span class="property">recycleViews</span>) &#123;</span><br><span class="line">            proxy = views.<span class="title function_">find</span>(</span><br><span class="line">              <span class="function">(<span class="params">v</span>) =&gt;</span></span><br><span class="line">                v.<span class="title function_">getProxyGroup</span>() === group &amp;&amp;</span><br><span class="line">                v.<span class="title function_">getProxyName</span>() === name &amp;&amp;</span><br><span class="line">                v.<span class="title function_">getName</span>() === props.<span class="property">name</span></span><br><span class="line">            );</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (!proxy) &#123;</span><br><span class="line">            proxy = publicAPI.<span class="title function_">createProxy</span>(group, name, &#123;</span><br><span class="line">              <span class="attr">disableAnimation</span>: <span class="literal">true</span>,</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            proxy.<span class="title function_">setDisableAnimation</span>(<span class="literal">true</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          proxy.<span class="title function_">set</span>(props, <span class="literal">true</span>);</span><br><span class="line">          proxyMapping[id] = proxy;</span><br><span class="line">          cameras[id] = camera;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">updateView</span>(<span class="params">view</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!proxyMapping[view] || !cameras[view]) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          proxyMapping[view].<span class="title function_">resetOrientation</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            proxyMapping[view].<span class="title function_">getCamera</span>().<span class="title function_">set</span>(cameras[view]);</span><br><span class="line">            proxyMapping[view]</span><br><span class="line">              .<span class="title function_">getRenderer</span>()</span><br><span class="line">              .<span class="title function_">updateLightsGeometryToFollowCamera</span>();</span><br><span class="line">            proxyMapping[view].<span class="title function_">renderLater</span>();</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        state.<span class="property">representations</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">&#123; source, view, props &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> proxy = publicAPI.<span class="title function_">getRepresentation</span>(</span><br><span class="line">            proxyMapping[source],</span><br><span class="line">            proxyMapping[view]</span><br><span class="line">          );</span><br><span class="line">          proxy.<span class="title function_">set</span>(props, <span class="literal">true</span>);</span><br><span class="line">          <span class="title function_">updateView</span>(view);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// restore luts and pwfs after restoring reps to avoid</span></span><br><span class="line">        <span class="comment">// rep initialization from resetting restored luts/pwfs</span></span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">keys</span>(state.<span class="property">fields</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">fieldName</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> &#123; lookupTable, piecewiseFunction &#125; = state.<span class="property">fields</span>[fieldName];</span><br><span class="line">          <span class="keyword">const</span> lutProxy = publicAPI.<span class="title function_">getLookupTable</span>(fieldName, lookupTable);</span><br><span class="line">          lutProxy.<span class="title function_">setPresetName</span>(lookupTable.<span class="property">presetName</span>);</span><br><span class="line">          lutProxy.<span class="title function_">setDataRange</span>(...lookupTable.<span class="property">dataRange</span>);</span><br><span class="line">          <span class="keyword">const</span> pwfProxy = publicAPI.<span class="title function_">getPiecewiseFunction</span>(</span><br><span class="line">            fieldName,</span><br><span class="line">            piecewiseFunction</span><br><span class="line">          );</span><br><span class="line">          <span class="keyword">switch</span> (piecewiseFunction.<span class="property">mode</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> vtkPiecewiseFunctionProxy.<span class="property">Mode</span>.<span class="property">Gaussians</span>:</span><br><span class="line">              pwfProxy.<span class="title function_">setGaussians</span>(piecewiseFunction.<span class="property">gaussians</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> vtkPiecewiseFunctionProxy.<span class="property">Mode</span>.<span class="property">Points</span>:</span><br><span class="line">              pwfProxy.<span class="title function_">setPoints</span>(piecewiseFunction.<span class="property">points</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> vtkPiecewiseFunctionProxy.<span class="property">Mode</span>.<span class="property">Nodes</span>:</span><br><span class="line">              pwfProxy.<span class="title function_">setNodes</span>(piecewiseFunction.<span class="property">nodes</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="attr">default</span>:</span><br><span class="line">              <span class="comment">// nothing that we can do</span></span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          pwfProxy.<span class="title function_">setMode</span>(piecewiseFunction.<span class="property">mode</span>);</span><br><span class="line">          pwfProxy.<span class="title function_">setDataRange</span>(...piecewiseFunction.<span class="property">dataRange</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Apply camera no matter what</span></span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">keys</span>(cameras).<span class="title function_">forEach</span>(updateView);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create id mapping</span></span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">keys</span>(proxyMapping).<span class="title function_">forEach</span>(<span class="function">(<span class="params">originalId</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> newId = proxyMapping[originalId].<span class="title function_">getProxyId</span>();</span><br><span class="line">          $oldToNewIdMapping[originalId] = newId;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Re-enable animation on views</span></span><br><span class="line">        state.<span class="property">views</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">&#123; id &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">          proxyMapping[id].<span class="title function_">setDisableAnimation</span>(<span class="literal">false</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="title function_">resolve</span>(&#123; ...state.<span class="property">userData</span>, $oldToNewIdMapping &#125;);</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(reject);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p><strong>使用例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">restoreAppState</span>(<span class="params">&#123; commit, dispatch, state &#125;, appState</span>) &#123;</span><br><span class="line">  <span class="title function_">commit</span>(<span class="string">&#x27;loadingState&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> restoreProxyKeys = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line"></span><br><span class="line">  <span class="title function_">dispatch</span>(<span class="string">&#x27;resetWorkspace&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> proxyManager</span><br><span class="line">    .<span class="title function_">loadState</span>(appState, &#123;</span><br><span class="line">      <span class="title function_">datasetHandler</span>(<span class="params">ds</span>) &#123;</span><br><span class="line">      ...</span><br></pre></td></tr></table></figure>



<h3 id="saveState"><a href="#saveState" class="headerlink" title="saveState"></a>saveState</h3><p>保存 state</p>
<p><strong>源码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">publicAPI.<span class="property">saveState</span> = <span class="function">(<span class="params">options = &#123;&#125;, userData = &#123;&#125;</span>) =&gt;</span></span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> sources = publicAPI.<span class="title function_">getSources</span>();</span><br><span class="line">    <span class="comment">// const representations = publicAPI.getRepresentations();</span></span><br><span class="line">    <span class="keyword">const</span> views = publicAPI.<span class="title function_">getViews</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Extract handlers</span></span><br><span class="line">    <span class="keyword">const</span> datasetHandler = options.<span class="property">datasetHandler</span> || (<span class="function">(<span class="params">d</span>) =&gt;</span> d.<span class="title function_">getState</span>());</span><br><span class="line">    <span class="keyword">delete</span> options.<span class="property">datasetHandler</span>;</span><br><span class="line">    <span class="keyword">const</span> datasets = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> fieldNames = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">    <span class="keyword">const</span> state = &#123;</span><br><span class="line">      userData,</span><br><span class="line">      options,</span><br><span class="line">      <span class="attr">sources</span>: [],</span><br><span class="line">      <span class="attr">views</span>: [],</span><br><span class="line">      <span class="attr">representations</span>: [],</span><br><span class="line">      <span class="attr">fields</span>: &#123;&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    sources.<span class="title function_">forEach</span>(<span class="function">(<span class="params">source</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> dataset = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(</span><br><span class="line">        <span class="title function_">datasetHandler</span>(source.<span class="title function_">getDataset</span>(), source)</span><br><span class="line">      );</span><br><span class="line">      datasets.<span class="title function_">push</span>(dataset);</span><br><span class="line">      state.<span class="property">sources</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">id</span>: source.<span class="title function_">getProxyId</span>(),</span><br><span class="line">        <span class="attr">group</span>: source.<span class="title function_">getProxyGroup</span>(),</span><br><span class="line">        <span class="attr">name</span>: source.<span class="title function_">getProxyName</span>(),</span><br><span class="line">        <span class="attr">props</span>: &#123;</span><br><span class="line">          <span class="attr">name</span>: source.<span class="title function_">getName</span>(),</span><br><span class="line">          <span class="attr">type</span>: source.<span class="title function_">getType</span>(),</span><br><span class="line">          dataset,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    views.<span class="title function_">forEach</span>(<span class="function">(<span class="params">view</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> camera = view.<span class="title function_">getCamera</span>().<span class="title function_">get</span>(<span class="string">&#x27;position&#x27;</span>, <span class="string">&#x27;viewUp&#x27;</span>, <span class="string">&#x27;focalPoint&#x27;</span>);</span><br><span class="line">      state.<span class="property">views</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">id</span>: view.<span class="title function_">getProxyId</span>(),</span><br><span class="line">        <span class="attr">group</span>: view.<span class="title function_">getProxyGroup</span>(),</span><br><span class="line">        <span class="attr">name</span>: view.<span class="title function_">getProxyName</span>(),</span><br><span class="line">        <span class="attr">props</span>: <span class="title class_">Object</span>.<span class="title function_">assign</span>(</span><br><span class="line">          <span class="title function_">getProperties</span>(view),</span><br><span class="line">          view.<span class="title function_">get</span>(<span class="string">&#x27;axis&#x27;</span>, <span class="string">&#x27;orientation&#x27;</span>, <span class="string">&#x27;viewUp&#x27;</span>)</span><br><span class="line">        ),</span><br><span class="line">        camera,</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Loop over view representations</span></span><br><span class="line">      <span class="keyword">const</span> representations = view.<span class="title function_">getRepresentations</span>();</span><br><span class="line">      representations.<span class="title function_">forEach</span>(<span class="function">(<span class="params">representation</span>) =&gt;</span> &#123;</span><br><span class="line">        state.<span class="property">representations</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">          <span class="attr">source</span>: representation.<span class="title function_">getInput</span>().<span class="title function_">getProxyId</span>(),</span><br><span class="line">          <span class="attr">view</span>: view.<span class="title function_">getProxyId</span>(),</span><br><span class="line">          <span class="attr">props</span>: <span class="title function_">getProperties</span>(representation),</span><br><span class="line">        &#125;);</span><br><span class="line">        fieldNames.<span class="title function_">add</span>(representation.<span class="title function_">getColorBy</span>()[<span class="number">0</span>]);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    fieldNames.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fieldName</span>) =&gt;</span> &#123;</span><br><span class="line">      state.<span class="property">fields</span>[fieldName] = &#123;</span><br><span class="line">        <span class="attr">lookupTable</span>: publicAPI</span><br><span class="line">          .<span class="title function_">getLookupTable</span>(fieldName)</span><br><span class="line">          .<span class="title function_">get</span>(</span><br><span class="line">            <span class="string">&#x27;mode&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;presetName&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;rgbPoints&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;hsvPoints&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;nodes&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;arrayName&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;arrayLocation&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;dataRange&#x27;</span></span><br><span class="line">          ),</span><br><span class="line">        <span class="attr">piecewiseFunction</span>: publicAPI</span><br><span class="line">          .<span class="title function_">getPiecewiseFunction</span>(fieldName)</span><br><span class="line">          .<span class="title function_">get</span>(</span><br><span class="line">            <span class="string">&#x27;mode&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;gaussians&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;points&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;nodes&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;arrayName&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;arrayLocation&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;dataRange&#x27;</span></span><br><span class="line">          ),</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">all</span>(datasets)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// Patch datasets in state to the result of the promises</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; state.<span class="property">sources</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">          state.<span class="property">sources</span>[i].<span class="property">props</span>.<span class="property">dataset</span>.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">            state.<span class="property">sources</span>[i].<span class="property">props</span>.<span class="property">dataset</span> = value;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// provide valide state</span></span><br><span class="line">        <span class="title function_">resolve</span>(state);</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(reject);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p><strong>使用例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> zip = <span class="keyword">new</span> <span class="title class_">JSZip</span>();</span><br><span class="line">proxyManager.<span class="title function_">saveState</span>(options, userData).<span class="title function_">then</span>(<span class="function">(<span class="params">stateObject</span>) =&gt;</span> &#123;</span><br><span class="line">  zip.<span class="title function_">file</span>(<span class="string">&#x27;state.json&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(stateObject));</span><br><span class="line">  zip</span><br></pre></td></tr></table></figure>



<h2 id="🔵视口-view"><a href="#🔵视口-view" class="headerlink" title="🔵视口 view"></a>🔵视口 view</h2><h3 id="create3DView"><a href="#create3DView" class="headerlink" title="create3DView"></a>create3DView</h3><p>创建3D视口</p>
<p><strong>源码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">publicAPI.<span class="property">create3DView</span> = <span class="function">(<span class="params">options</span>) =&gt;</span></span><br><span class="line">  publicAPI.<span class="title function_">createProxy</span>(<span class="string">&#x27;Views&#x27;</span>, <span class="string">&#x27;View3D&#x27;</span>, options);</span><br></pre></td></tr></table></figure>



<h3 id="create2DView"><a href="#create2DView" class="headerlink" title="create2DView"></a>create2DView</h3><p>创建2D视口</p>
<p><strong>源码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">publicAPI.<span class="property">create2DView</span> = <span class="function">(<span class="params">options</span>) =&gt;</span></span><br><span class="line">  publicAPI.<span class="title function_">createProxy</span>(<span class="string">&#x27;Views&#x27;</span>, <span class="string">&#x27;View2D&#x27;</span>, options);</span><br></pre></td></tr></table></figure>



<h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><p>渲染单个view</p>
<p><strong>源码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">publicAPI.<span class="property">render</span> = <span class="function">(<span class="params">view</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> viewToRender = view || publicAPI.<span class="title function_">getActiveView</span>();</span><br><span class="line">  <span class="keyword">if</span> (viewToRender) &#123;</span><br><span class="line">    viewToRender.<span class="title function_">renderLater</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="renderAllViews"><a href="#renderAllViews" class="headerlink" title="renderAllViews"></a>renderAllViews</h3><p>渲染所有views</p>
<p><strong>源码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">publicAPI.<span class="property">renderAllViews</span> = <span class="function">(<span class="params">blocking = <span class="literal">false</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> allViews = publicAPI.<span class="title function_">getViews</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; allViews.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    allViews[i].<span class="title function_">render</span>(blocking);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>使用例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">view.<span class="title function_">resize</span>();</span><br><span class="line">proxyManager.<span class="title function_">renderAllViews</span>();</span><br></pre></td></tr></table></figure>



<h3 id="setAnimationOnAllViews"><a href="#setAnimationOnAllViews" class="headerlink" title="setAnimationOnAllViews"></a>setAnimationOnAllViews</h3><p>在所有views上设置动画</p>
<p><strong>源码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">publicAPI.<span class="property">setAnimationOnAllViews</span> = <span class="function">(<span class="params">enable = <span class="literal">false</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> allViews = publicAPI</span><br><span class="line">    .<span class="title function_">getViews</span>()</span><br><span class="line">    .<span class="title function_">filter</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> !enable || v.<span class="title function_">getContainer</span>());</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; allViews.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    allViews[i].<span class="title function_">setAnimation</span>(enable, publicAPI);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>使用例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">piecewiseWidget</span>.<span class="title function_">onAnimation</span>(<span class="function">(<span class="params">animating</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> pwfproxy = <span class="variable language_">this</span>.<span class="property">piecewiseFunction</span>;</span><br><span class="line">  <span class="keyword">if</span> (pwfproxy) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">proxyManager</span>.<span class="title function_">setAnimationOnAllViews</span>(animating);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure>



<h3 id="clearAnimations"><a href="#clearAnimations" class="headerlink" title="clearAnimations"></a>clearAnimations</h3><p>清理所有动画</p>
<p><strong>源码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clearAnimations</span>(<span class="params"></span>) &#123;</span><br><span class="line">  model.<span class="property">animating</span> = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">const</span> allViews = publicAPI.<span class="title function_">getViews</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; allViews.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    allViews[i].<span class="title function_">setAnimation</span>(<span class="literal">false</span>, publicAPI);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="autoAnimateViews"><a href="#autoAnimateViews" class="headerlink" title="autoAnimateViews"></a>autoAnimateViews</h3><p>自动播放动画</p>
<p><strong>源码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">publicAPI.<span class="property">autoAnimateViews</span> = <span class="function">(<span class="params">debouceTimout = <span class="number">250</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!model.<span class="property">animating</span>) &#123;</span><br><span class="line">    model.<span class="property">animating</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">const</span> allViews = publicAPI.<span class="title function_">getViews</span>().<span class="title function_">filter</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> v.<span class="title function_">getContainer</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; allViews.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      allViews[i].<span class="title function_">setAnimation</span>(<span class="literal">true</span>, publicAPI);</span><br><span class="line">    &#125;</span><br><span class="line">    model.<span class="property">clearAnimations</span> = macro.<span class="title function_">debounce</span>(clearAnimations, debouceTimout);</span><br><span class="line">  &#125;</span><br><span class="line">  model.<span class="title function_">clearAnimations</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>使用例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">proxyManagerHooks</span>: &#123;</span><br><span class="line">  <span class="title function_">onProxyModified</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">loadingState</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$proxyManager</span>.<span class="title function_">autoAnimateViews</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<h3 id="resizeAllViews"><a href="#resizeAllViews" class="headerlink" title="resizeAllViews"></a>resizeAllViews</h3><p>重置视口大小</p>
<p><strong>源码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">publicAPI.<span class="property">resizeAllViews</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> allViews = publicAPI.<span class="title function_">getViews</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; allViews.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    allViews[i].<span class="title function_">resize</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>使用例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, proxyManager.<span class="property">resizeAllViews</span>);</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="title function_">updated</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$proxyManager</span>.<span class="title function_">resizeAllViews</span>();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<h3 id="resetCamera"><a href="#resetCamera" class="headerlink" title="resetCamera"></a>resetCamera</h3><p>重置Camera</p>
<p><strong>源码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">publicAPI.<span class="property">resetCamera</span> = <span class="function">(<span class="params">view</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> viewToRender = view || publicAPI.<span class="title function_">getActiveView</span>();</span><br><span class="line">  <span class="keyword">if</span> (viewToRender &amp;&amp; viewToRender.<span class="property">resetCamera</span>) &#123;</span><br><span class="line">    viewToRender.<span class="title function_">resetCamera</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>使用例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">resetCamera</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">view</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">view</span>.<span class="title function_">resetCamera</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<h3 id="createRepresentationInAllViews"><a href="#createRepresentationInAllViews" class="headerlink" title="createRepresentationInAllViews"></a>createRepresentationInAllViews</h3><p>在所有views 上创建 Representation</p>
<p><strong>源码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">publicAPI.<span class="property">createRepresentationInAllViews</span> = <span class="function">(<span class="params">source</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> allViews = publicAPI.<span class="title function_">getViews</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; allViews.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    publicAPI.<span class="title function_">getRepresentation</span>(source, allViews[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>使用例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">proxyManager.<span class="title function_">createRepresentationInAllViews</span>(imageSource);</span><br><span class="line"><span class="keyword">const</span> imageRepresentation = proxyManager.<span class="title function_">getRepresentation</span>(imageSource, view);</span><br></pre></td></tr></table></figure>



<h3 id="resetCameraInAllViews"><a href="#resetCameraInAllViews" class="headerlink" title="resetCameraInAllViews"></a>resetCameraInAllViews</h3><p>重置所有views上面的摄像头</p>
<p><strong>源码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">publicAPI.<span class="property">resetCameraInAllViews</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> allViews = publicAPI.<span class="title function_">getViews</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; allViews.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    allViews[i].<span class="title function_">resetCamera</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>使用例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  proxyManager.<span class="title function_">renderAllViews</span>();</span><br><span class="line">  proxyManager.<span class="title function_">resetCameraInAllViews</span>();</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>



<h2 id="🔵属性-properties"><a href="#🔵属性-properties" class="headerlink" title="🔵属性 properties"></a>🔵属性 properties</h2><h3 id="getSections"><a href="#getSections" class="headerlink" title="getSections"></a>getSections</h3><p>获取 sections</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">publicAPI.<span class="property">getSections</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> sections = [];</span><br><span class="line">  <span class="keyword">const</span> source = publicAPI.<span class="title function_">getActiveSource</span>();</span><br><span class="line">  <span class="keyword">if</span> (!source) &#123;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> view = publicAPI.<span class="title function_">getActiveView</span>();</span><br><span class="line">  <span class="keyword">if</span> (source) &#123;</span><br><span class="line">    <span class="keyword">const</span> section = source.<span class="title function_">getProxySection</span>();</span><br><span class="line">    <span class="keyword">if</span> (section.<span class="property">ui</span>.<span class="property">length</span>) &#123;</span><br><span class="line">      sections.<span class="title function_">push</span>(</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">assign</span>(section, &#123;</span><br><span class="line">          <span class="attr">collapsed</span>: model.<span class="property">collapseState</span>[section.<span class="property">name</span>],</span><br><span class="line">        &#125;)</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (source &amp;&amp; view) &#123;</span><br><span class="line">    <span class="keyword">const</span> representation = publicAPI.<span class="title function_">getRepresentation</span>(source, view);</span><br><span class="line">    <span class="keyword">if</span> (representation) &#123;</span><br><span class="line">      <span class="keyword">const</span> section = representation.<span class="title function_">getProxySection</span>();</span><br><span class="line">      <span class="keyword">if</span> (section.<span class="property">ui</span>.<span class="property">length</span>) &#123;</span><br><span class="line">        sections.<span class="title function_">push</span>(</span><br><span class="line">          <span class="title class_">Object</span>.<span class="title function_">assign</span>(section, &#123;</span><br><span class="line">            <span class="attr">collapsed</span>: model.<span class="property">collapseState</span>[section.<span class="property">name</span>],</span><br><span class="line">          &#125;)</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (view) &#123;</span><br><span class="line">    <span class="keyword">const</span> section = view.<span class="title function_">getProxySection</span>();</span><br><span class="line">    <span class="keyword">if</span> (section.<span class="property">ui</span>.<span class="property">length</span>) &#123;</span><br><span class="line">      sections.<span class="title function_">push</span>(</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">assign</span>(section, &#123;</span><br><span class="line">          <span class="attr">collapsed</span>: model.<span class="property">collapseState</span>[section.<span class="property">name</span>],</span><br><span class="line">        &#125;)</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sections;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>使用例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">无...</span><br></pre></td></tr></table></figure>



<h3 id="updateCollapseState"><a href="#updateCollapseState" class="headerlink" title="updateCollapseState"></a>updateCollapseState</h3><p>更新 数据的 CollapseState</p>
<p><strong>源码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">publicAPI.<span class="property">updateCollapseState</span> = <span class="function">(<span class="params">name, state</span>) =&gt;</span> &#123;</span><br><span class="line">  model.<span class="property">collapseState</span>[name] = state;</span><br><span class="line">  publicAPI.<span class="title function_">modified</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>使用例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">无...</span><br></pre></td></tr></table></figure>



<h3 id="applyChanges"><a href="#applyChanges" class="headerlink" title="applyChanges"></a>applyChanges</h3><p><strong>源码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">publicAPI.<span class="property">applyChanges</span> = <span class="function">(<span class="params">changeSet</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> groupBy = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(changeSet);</span><br><span class="line">  <span class="keyword">let</span> count = keys.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">while</span> (count--) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = keys[count];</span><br><span class="line">    <span class="keyword">const</span> [id, prop] = key.<span class="title function_">split</span>(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!groupBy[id]) &#123;</span><br><span class="line">      groupBy[id] = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (changeSet[key] === <span class="string">&#x27;__command_execute__&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> obj = publicAPI.<span class="title function_">getProxyById</span>(id);</span><br><span class="line">      <span class="keyword">if</span> (obj) &#123;</span><br><span class="line">        obj[prop]();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      groupBy[id][prop] = changeSet[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Apply changes</span></span><br><span class="line">  <span class="keyword">const</span> objIds = <span class="title class_">Object</span>.<span class="title function_">keys</span>(groupBy);</span><br><span class="line">  count = objIds.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">while</span> (count--) &#123;</span><br><span class="line">    <span class="keyword">const</span> id = objIds[count];</span><br><span class="line">    <span class="keyword">const</span> obj = publicAPI.<span class="title function_">getProxyById</span>(id);</span><br><span class="line">    <span class="keyword">if</span> (obj) &#123;</span><br><span class="line">      obj.<span class="title function_">set</span>(groupBy[id]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  publicAPI.<span class="title function_">modified</span>();</span><br><span class="line">  publicAPI.<span class="title function_">renderAllViews</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>使用例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">无...</span><br></pre></td></tr></table></figure>



<h3 id="getLookupTable"><a href="#getLookupTable" class="headerlink" title="getLookupTable"></a>getLookupTable</h3><p>获取 LookupTable</p>
<p><strong>源码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">publicAPI.<span class="property">getLookupTable</span> = <span class="function">(<span class="params">arrayName, options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!model.<span class="property">lookupTables</span>[arrayName]) &#123;</span><br><span class="line">    model.<span class="property">lookupTables</span>[arrayName] = publicAPI.<span class="title function_">createProxy</span>(</span><br><span class="line">      <span class="string">&#x27;Proxy&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;LookupTable&#x27;</span>,</span><br><span class="line">      &#123; arrayName, ...options &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> model.<span class="property">lookupTables</span>[arrayName];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>使用例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dataArray = imageData.<span class="title function_">getPointData</span>().<span class="title function_">getScalars</span>();</span><br><span class="line"><span class="keyword">const</span> lookupTableProxy = proxyManager.<span class="title function_">getLookupTable</span>(dataArray.<span class="title function_">getName</span>());</span><br></pre></td></tr></table></figure>



<h3 id="getPiecewiseFunction"><a href="#getPiecewiseFunction" class="headerlink" title="getPiecewiseFunction"></a>getPiecewiseFunction</h3><p>获取 PiecewiseFunction</p>
<p><strong>源码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">publicAPI.<span class="property">getPiecewiseFunction</span> = <span class="function">(<span class="params">arrayName, options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!model.<span class="property">piecewiseFunctions</span>[arrayName]) &#123;</span><br><span class="line">    model.<span class="property">piecewiseFunctions</span>[arrayName] = publicAPI.<span class="title function_">createProxy</span>(</span><br><span class="line">      <span class="string">&#x27;Proxy&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;PiecewiseFunction&#x27;</span>,</span><br><span class="line">      &#123; arrayName, ...options &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> model.<span class="property">piecewiseFunctions</span>[arrayName];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>使用例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> piecewiseFunction = proxyManager.<span class="title function_">getPiecewiseFunction</span>(dataArray.<span class="title function_">getName</span>());</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pwfProxy = <span class="variable language_">this</span>.<span class="property">$proxyManager</span>.<span class="title function_">getPiecewiseFunction</span>(arrayName);</span><br><span class="line"><span class="keyword">if</span> (value) &#123;</span><br><span class="line">    pwfProxy.<span class="title function_">setMode</span>(<span class="title class_">PwfMode</span>.<span class="property">Points</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    pwfProxy.<span class="title function_">setMode</span>(<span class="title class_">PwfMode</span>.<span class="property">Gaussians</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="rescaleTransferFunctionToDataRange"><a href="#rescaleTransferFunctionToDataRange" class="headerlink" title="rescaleTransferFunctionToDataRange"></a>rescaleTransferFunctionToDataRange</h3><p>设置转换区间</p>
<p><strong>源码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">publicAPI.<span class="property">rescaleTransferFunctionToDataRange</span> = <span class="function">(<span class="params">arrayName, dataRange</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> lut = publicAPI.<span class="title function_">getLookupTable</span>(arrayName);</span><br><span class="line">  <span class="keyword">const</span> pwf = publicAPI.<span class="title function_">getPiecewiseFunction</span>(arrayName);</span><br><span class="line">  lut.<span class="title function_">setDataRange</span>(dataRange[<span class="number">0</span>], dataRange[<span class="number">1</span>]);</span><br><span class="line">  pwf.<span class="title function_">setDataRange</span>(dataRange[<span class="number">0</span>], dataRange[<span class="number">1</span>]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>使用例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无..</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>医学影像处理</category>
      </categories>
      <tags>
        <tag>医学影像处理</tag>
        <tag>前端</tag>
        <tag>vtk.js</tag>
        <tag>React</tag>
        <tag>API文档</tag>
      </tags>
  </entry>
  <entry>
    <title>记录使用react写组件，然后发布到NPM</title>
    <url>/2021-07-04-%E8%AE%B0%E5%BD%95%E4%BD%BF%E7%94%A8react%E5%86%99%E7%BB%84%E4%BB%B6%EF%BC%8C%E7%84%B6%E5%90%8E%E5%8F%91%E5%B8%83%E5%88%B0NPM/</url>
    <content><![CDATA[<p>想使用lerna和yarn workspace来管理大型项目，学会如何发布npm包是不可缺少的。</p>
<p>如何用 react 发包参考的是这个博客的内容：</p>
<p><a href="https://segmentfault.com/a/1190000018079170">https://segmentfault.com/a/1190000018079170</a></p>
<span id="more"></span>

<h2 id="📘初始化项目"><a href="#📘初始化项目" class="headerlink" title="📘初始化项目"></a>📘初始化项目</h2><p>首先在git上创建一个项目，项目地址：</p>
<p><a href="https://github.com/alexiusll/test_react_npm">https://github.com/alexiusll/test_react_npm</a></p>
<p>如果这个能搭建好的话，可以考虑成为一个通用的脚手架。</p>
<h4 id="构建项目："><a href="#构建项目：" class="headerlink" title="构建项目："></a>构建项目：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn init</span><br></pre></td></tr></table></figure>

<p>生成 package.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm_common&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm发包通用&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;repository&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/alexiusll/test_react_npm&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;linkenzone &lt;linkenzone@163.com&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MIT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>安装 react 相关的包</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn add react react-dom --dev</span><br></pre></td></tr></table></figure>

<p>💢疑点？为啥这里放dev呢？</p>
<p><strong>采用 babel 编译相关的依赖</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn add @babel/cli @babel/core @babel/preset-env @babel/preset-react --dev</span><br></pre></td></tr></table></figure>

<p>💢疑点？这些都是干啥的？</p>
<p><strong>采用 webpack 做构建，webpack-dev-server 作为本地开发服务器，所以需要安装如下依赖：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn add webpack webpack-cli webpack-dev-server --dev</span><br></pre></td></tr></table></figure>



<p><strong>这里为了简单演示，只安装 babel-loader 用来编译 jsx，其他 loader 安装自己的需要自己安装。</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn add babel-loader --dev</span><br></pre></td></tr></table></figure>



<p><strong>另外再安装一个 webpack 插件 html-webpack-plugin ，用来生成 html：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn add html-webpack-plugin --dev</span><br></pre></td></tr></table></figure>



<p><strong>然后再添加上常规的 start 和 build 脚本，package.json 如下：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm_common&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm发包通用&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;repository&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/alexiusll/test_react_npm&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;linkenzone &lt;linkenzone@163.com&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MIT&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack-dev-server --open development&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack --mode production&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@babel/cli&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.14.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@babel/core&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.14.6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@babel/preset-env&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.14.7&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@babel/preset-react&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.14.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;babel-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^8.2.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;html-webpack-plugin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.3.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;react&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^17.0.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;react-dom&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^17.0.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.42.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack-cli&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.7.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack-dev-server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.11.2&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h4 id="使用-typescript"><a href="#使用-typescript" class="headerlink" title="使用 typescript"></a><strong>使用 typescript</strong></h4><p>为了使用 typescript 在原博客的内容上补充一些内容</p>
<p>参考：<a href="https://zh-hans.reactjs.org/docs/static-type-checking.html#using-typescript-with-create-react-app">https://zh-hans.reactjs.org/docs/static-type-checking.html#using-typescript-with-create-react-app</a></p>
<p><strong>添加 TypeScript 到现有项目中</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn add --dev typescript</span><br></pre></td></tr></table></figure>

<p><strong>配置 TypeScript 编译器</strong></p>
<p><strong>执行：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn run tsc --init</span><br></pre></td></tr></table></figure>

<p>会生成 tsconfig.json，配置文档：<a href="https://www.typescriptlang.org/docs/handbook/tsconfig-json.html">https://www.typescriptlang.org/docs/handbook/tsconfig-json.html</a></p>
<p>我们来看一下 <code>rootDir</code> 和 <code>outDir</code> 这两个配置项。编译器将从项目中找到 TypeScript 文件并编译成相对应 JavaScript 文件。但我们不想混淆源文件和编译后的输出文件。</p>
<p>为了解决该问题，我们将执行以下两个步骤：</p>
<ul>
<li>首先，让我们重新整理下项目目录，把所有的源代码放入 <code>src</code> 目录中。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── package.json</span><br><span class="line">├── src</span><br><span class="line">│   └── index.ts</span><br><span class="line">└── tsconfig.json</span><br></pre></td></tr></table></figure>

<ul>
<li>更改 tsconfig.json 为</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build/dist&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;es6&quot;</span><span class="punctuation">,</span> <span class="string">&quot;dom&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noImplicitReturns&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noImplicitThis&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noImplicitAny&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strictNullChecks&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;node_modules&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;scripts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;acceptance-tests&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;webpack&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;jest&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;src/setupTests.ts&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;typePatches&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<p><strong>安装 react 的声明文件</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn add --dev @types/react @types/react-dom</span><br></pre></td></tr></table></figure>



<h2 id="📘配置-webpack"><a href="#📘配置-webpack" class="headerlink" title="📘配置 webpack"></a>📘配置 webpack</h2><p>配置非常简单的 webpack, 在项目根路径下创建 webpack.config.js 文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> htmlWebpackPlugin = <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">    <span class="attr">template</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;./example/src/index.html&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;./index.html&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;./example/src/app.js&quot;</span>),</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;example/dist&quot;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [&#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">            <span class="attr">use</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">            <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [htmlWebpackPlugin],</span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&quot;.js&quot;</span>, <span class="string">&quot;.jsx&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">port</span>: <span class="number">3001</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Webpack 的配置文件主要做了如下事情：</p>
<ul>
<li>使用 example/src/index.js 作为项目入口，处理资源文件的依赖关系</li>
<li>通过 babel-loader 来编译处理 js 和 jsx 文件</li>
<li>通过 html-webpack-plugin 自动注入编译打包好的脚本文件</li>
<li>为 demo 启动端口为 3001 的服务</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>使用threejs实现简单的Volume Rendering</title>
    <url>/2021-07-14-%E4%BD%BF%E7%94%A8threejs%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84Volume-Rendering/</url>
    <content><![CDATA[<p>因为项目需要，现在要在web上实现一个体绘制（Volume Rendering）</p>
<p>本文的内容将会基于github项目: <a href="https://github.com/lebarba/WebGLVolumeRendering">https://github.com/lebarba/WebGLVolumeRendering</a></p>
<p>多数内容翻译自文档 : <a href="http://www.lebarba.com/">http://www.lebarba.com/</a></p>
<span id="more"></span>

<h2 id="📘什么是体绘制-Volume-Rendering"><a href="#📘什么是体绘制-Volume-Rendering" class="headerlink" title="📘什么是体绘制(Volume Rendering)?"></a>📘什么是体绘制(Volume Rendering)?</h2><p>​    与传统的渲染不同，使用三角形(triangles)来显示3D图形，体渲染使用其他方法，如 <strong>体素光线投射算法(Volume Ray Casting)</strong> 。这种基于图像的方法渲染一个3D标量场（scalar field）到一个2D图像通过沿着3D体素来投射光线（看不懂…）。我们在屏幕上看到的每一个像素是射线通过立方体并以一定的间隔从体素中获得强度样本的结果。</p>
<p>​    但是我们如何投射射线呢?</p>
<p>​    一个简单的方法是使用大小为(1,1,1)3D网格立方体，并且渲染正面和背面(启用和禁用背面剔除)在两个不同的渲染通道。</p>
<p>​    对于屏幕中生成的每一个立方体片段，我们可以创建一个射线，从立方体的正面开始，在背面结束。有了光线的起始点和结束点，我们就可以开始以固定的间隔对体素进行采样，以生成生成的片段颜色。</p>
<p><img src="/2021-07-14-%E4%BD%BF%E7%94%A8threejs%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84Volume-Rendering/voxels.jpg" alt="voxels"></p>
<p>标量场 (scalar field) 以体素表示，这个体素包含每个(x,y,z)位置上的强度值（intensity ）</p>
<h2 id="💙一步一步在WebGL中实现"><a href="#💙一步一步在WebGL中实现" class="headerlink" title="💙一步一步在WebGL中实现"></a>💙一步一步在WebGL中实现</h2><p>在本节中，我们将解释使用WebGL和ThreeJS实现体绘制的实现步骤。</p>
<p>（根据项目的实际情况，对于原文中的步骤我会进行一些修改，并且实现方式为<strong>React + ThreeJs</strong>）</p>
<h3 id="①第一步-准备数据"><a href="#①第一步-准备数据" class="headerlink" title="①第一步:准备数据"></a>①第一步:准备数据</h3><p>​    <strong>原始文件 Raw files</strong>（后文都叫Raw fIle) 是非常简单的文件，只包含体素强度，它们没有头部（head）或元数据（metadata），它们通常是一个8bit 或者 16bit 的强度值，每个体素以X, Y和Z的顺序排列。</p>
<p>​    在OpenGL或DirectX中，我们将能够在3D纹理中加载所有这些数据。但由于WebGL目前不支持存储或采样3D纹理，我们必须以一种可用于2D纹理的方式存储它（**实际上现在好像可以了…**）。出于这个原因，我们可以存储一个带有Z切片的png图像文件，从而生成2D切片的拼接图。文章作者的开发了一个包含源代码的极其简单的转换器工具。该工具使用原始文件并生成一个png图像的拼接，在alpha通道中编码每个体素的强度(尽管理想的情况是将png存储为A8格式，只是为了节省一些空间)。</p>
<p>​    一旦png文件作为2D纹理加载到内存中，我们可以使用我们自己的自定义sampleAs3DTexture函数将其作为3D纹理进行采样。</p>
<p>原文中的数据格式十分有趣：</p>
<p><img src="/2021-07-14-%E4%BD%BF%E7%94%A8threejs%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84Volume-Rendering/114.png" alt="114"></p>
<p>这里只展示部分数据…实际数据太大，有将近5MB</p>
<p>它是由16 * 16 个图片拼接得到的，类似做2D游戏的时候，将多个素材拼接到一个材质上</p>
<p>因为实际上现在WebGl支持三维的纹理数据了，所以我们可以直接去生成一个三维纹理数据来作为输入。</p>
<h4 id="方式1-直接生成像素数据"><a href="#方式1-直接生成像素数据" class="headerlink" title="方式1 直接生成像素数据:"></a>方式1 直接生成像素数据:</h4><p>使用javascript来生成一个 <strong>Uint8Array</strong> 的 <strong>TypedArray</strong></p>
<p>然后在循环遍历它，填充它的像素</p>
<p>最后将这个数组传入到 THREE.DataTexture3D 中，生成一个三维的纹理</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// create a buffer with color data</span></span><br><span class="line"><span class="keyword">const</span> _width = <span class="number">512</span>;</span><br><span class="line"><span class="keyword">const</span> _height = <span class="number">512</span>;</span><br><span class="line"><span class="keyword">const</span> _depth = <span class="number">41</span>;</span><br><span class="line"><span class="keyword">const</span> size = _width * _height;</span><br><span class="line"><span class="keyword">const</span> data = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(<span class="number">4</span> * size * _depth);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; _depth; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> color = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Color</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>(), <span class="title class_">Math</span>.<span class="title function_">random</span>(), <span class="title class_">Math</span>.<span class="title function_">random</span>());</span><br><span class="line">    <span class="keyword">const</span> r = <span class="title class_">Math</span>.<span class="title function_">floor</span>(color.<span class="property">r</span> * <span class="number">255</span>);</span><br><span class="line">    <span class="keyword">const</span> g = <span class="title class_">Math</span>.<span class="title function_">floor</span>(color.<span class="property">g</span> * <span class="number">255</span>);</span><br><span class="line">    <span class="keyword">const</span> b = <span class="title class_">Math</span>.<span class="title function_">floor</span>(color.<span class="property">b</span> * <span class="number">255</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; size; j += <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> stride = (i * size + j) * <span class="number">4</span>;</span><br><span class="line">        data[stride] = r;</span><br><span class="line">        data[stride + <span class="number">1</span>] = g;</span><br><span class="line">        data[stride + <span class="number">2</span>] = b;</span><br><span class="line">        data[stride + <span class="number">3</span>] = <span class="number">125</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> cubeTex = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">DataTexture3D</span>(data, _width, _height, _depth);</span><br><span class="line">cubeTex.<span class="property">format</span> = <span class="variable constant_">THREE</span>.<span class="property">RGBAFormat</span>;</span><br><span class="line">cubeTex.<span class="property">type</span> = <span class="variable constant_">THREE</span>.<span class="property">UnsignedByteType</span>;</span><br><span class="line">cubeTex.<span class="property">minFilter</span> = <span class="variable constant_">THREE</span>.<span class="property">LinearFilter</span>;</span><br><span class="line">cubeTex.<span class="property">magFilter</span> = <span class="variable constant_">THREE</span>.<span class="property">LinearFilter</span>;</span><br><span class="line">cubeTex.<span class="property">unpackAlignment</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>



<h4 id="方式2-从DICOM文件中获取"><a href="#方式2-从DICOM文件中获取" class="headerlink" title="方式2 从DICOM文件中获取:"></a>方式2 从DICOM文件中获取:</h4><p>思路是首先从DICOM中获取16bit的rawData</p>
<p>然后将16bit的数据通过窗宽窗位的算法转为8bit的数据</p>
<p>最后将生成的8bit数据传入到 THREE.DataTexture3D 中，生成一个三维的纹理</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取真实数据</span></span><br><span class="line">   <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">getDicomSeriesImageData</span>(uuid);</span><br><span class="line">   <span class="keyword">if</span> (!res) <span class="keyword">return</span>;</span><br><span class="line">   <span class="keyword">const</span> &#123; <span class="variable constant_">WW</span>, <span class="variable constant_">WL</span>, dataArray, rescaleSlope, rescaleIntercept &#125; = store;</span><br><span class="line">   <span class="keyword">const</span> numPixels = store.<span class="property">xDim</span> * store.<span class="property">yDim</span> * store.<span class="property">zDim</span>;</span><br><span class="line">   <span class="keyword">const</span> imgPixels = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(numPixels * <span class="number">4</span>);</span><br><span class="line">   <span class="keyword">if</span> (<span class="variable constant_">WW</span> !== <span class="literal">null</span> &amp;&amp; <span class="variable constant_">WL</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; store.<span class="property">zDim</span>; j += <span class="number">1</span>) &#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; store.<span class="property">xDim</span> * store.<span class="property">yDim</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">         <span class="keyword">const</span> stride = (j * store.<span class="property">xDim</span> * store.<span class="property">yDim</span> + i) * <span class="number">4</span>;</span><br><span class="line">         <span class="comment">// NewValue = (RawPixelValue * RescaleSlope) + RescaleIntercept</span></span><br><span class="line">         <span class="comment">// U = m*SV + b</span></span><br><span class="line">         <span class="keyword">const</span> valScaled =</span><br><span class="line">           dataArray[j * store.<span class="property">xDim</span> * store.<span class="property">yDim</span> + i] * rescaleSlope + rescaleIntercept;</span><br><span class="line">         <span class="keyword">let</span> val = <span class="title class_">Math</span>.<span class="title function_">floor</span>(((valScaled - <span class="variable constant_">WL</span> + <span class="variable constant_">WW</span> / <span class="number">2</span>) * <span class="number">255</span>) / <span class="variable constant_">WW</span>);</span><br><span class="line">           </span><br><span class="line">         val = val &gt;= <span class="number">0</span> ? val : <span class="number">0</span>;</span><br><span class="line">         val = val &lt; <span class="number">255</span> ? val : <span class="number">255</span>;</span><br><span class="line">           </span><br><span class="line">         imgPixels[stride] = val;</span><br><span class="line">         imgPixels[stride + <span class="number">1</span>] = val;</span><br><span class="line">         imgPixels[stride + <span class="number">2</span>] = val;</span><br><span class="line">         imgPixels[stride + <span class="number">3</span>] = <span class="number">255</span>;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">const</span> imgTexture = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">DataTexture3D</span>(imgPixels, store.<span class="property">xDim</span>, store.<span class="property">yDim</span>, store.<span class="property">zDim</span>);</span><br><span class="line">   imgTexture.<span class="property">format</span> = <span class="variable constant_">THREE</span>.<span class="property">RGBAFormat</span>;</span><br><span class="line">   imgTexture.<span class="property">type</span> = <span class="variable constant_">THREE</span>.<span class="property">UnsignedByteType</span>;</span><br><span class="line">   imgTexture.<span class="property">minFilter</span> = <span class="variable constant_">THREE</span>.<span class="property">LinearFilter</span>;</span><br><span class="line">   imgTexture.<span class="property">magFilter</span> = <span class="variable constant_">THREE</span>.<span class="property">LinearFilter</span>;</span><br><span class="line">   imgTexture.<span class="property">unpackAlignment</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>



<h3 id="②第二步-第一个渲染通道"><a href="#②第二步-第一个渲染通道" class="headerlink" title="②第二步:第一个渲染通道"></a>②第二步:第一个渲染通道</h3><p>​    在第二步，我们打算生成很多片段，作为射线的终点。所以对于第一个渲染通道，不绘制背面的颜色，我们将片段的World-Space位置存储在渲染纹理中，作为RGB片段颜色中的x、y、z坐标值(这里RGB被编码为浮点值)。</p>
<p>​    注意worldSpaceCoords是如何用于存储立方体背面位置的世界空间位置的。</p>
<p><strong>前端代码（部分）</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> materialFirstPass = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">ShaderMaterial</span>(&#123;</span><br><span class="line">    <span class="attr">vertexShader</span>: vertexShaderFirstPass,</span><br><span class="line">    <span class="attr">fragmentShader</span>: fragmentShaderFirstPass,</span><br><span class="line">    <span class="comment">// 定义将要渲染哪一面 - 正面，背面或两者</span></span><br><span class="line">    <span class="comment">// BackSide，FrontSide，DoubleSide</span></span><br><span class="line">    <span class="attr">side</span>: <span class="variable constant_">THREE</span>.<span class="property">BackSide</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> boxGeometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">BoxGeometry</span>(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>);</span><br><span class="line"><span class="keyword">const</span> meshFirstPass = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(boxGeometry, materialFirstPass);</span><br><span class="line">scene.<span class="title function_">add</span>(meshFirstPass);</span><br></pre></td></tr></table></figure>



<p><strong>顶点着色器：</strong></p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">varying</span> <span class="type">vec3</span> worldSpaceCoords;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//Set the world space coordinates of the back faces vertices as output.</span></span><br><span class="line">    worldSpaceCoords = position + <span class="type">vec3</span>(<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>); <span class="comment">//move it from [-0.5;0.5] to [0,1]</span></span><br><span class="line">    <span class="built_in">gl_Position</span> = projectionMatrix * modelViewMatrix * <span class="type">vec4</span>( position, <span class="number">1.0</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>片段着色器</strong></p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">varying</span> <span class="type">vec3</span> worldSpaceCoords;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//The fragment&#x27;s world space coordinates as fragment output.</span></span><br><span class="line">    <span class="built_in">gl_FragColor</span> = <span class="type">vec4</span>( worldSpaceCoords.x , worldSpaceCoords.y, worldSpaceCoords.z, <span class="number">1</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注解：</strong></p>
<p><strong>varying变量</strong> 是vertex和fragment shader之间做数据传递用的。</p>
<p><strong>position</strong> 哪里来的？内置的变量(uniforms)和属性 包括：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">// default vertex attributes provided by Geometry and BufferGeometry</span></span><br><span class="line"><span class="keyword">attribute</span> <span class="type">vec3</span> position;</span><br><span class="line"><span class="keyword">attribute</span> <span class="type">vec3</span> normal;</span><br><span class="line"><span class="keyword">attribute</span> <span class="type">vec2</span> uv;</span><br></pre></td></tr></table></figure>



<p><strong>渲染结果</strong></p>
<p><img src="/2021-07-14-%E4%BD%BF%E7%94%A8threejs%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84Volume-Rendering/tu.jpg" alt="tu"></p>
<p>​                                                                            左边是 back side  右边是 Front side</p>
<h4 id="使用-WebGLRenderTarget-建立缓冲"><a href="#使用-WebGLRenderTarget-建立缓冲" class="headerlink" title="使用 WebGLRenderTarget 建立缓冲"></a>使用 WebGLRenderTarget 建立缓冲</h4><p>文档：</p>
<p><a href="https://threejs.org/docs/index.html?q=WebGLRenderTarget#api/zh/renderers/WebGLRenderTarget">https://threejs.org/docs/index.html?q=WebGLRenderTarget#api/zh/renderers/WebGLRenderTarget</a></p>
<p>render target是一个缓冲，就是在这个缓冲中，显卡为正在后台渲染的场景绘制像素。 它用于不同的效果，例如用于在一个图像显示在屏幕上之前先做一些处理。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用NearestFilter来消除插值.  在 cube 阶段, 生成世界坐标插值</span></span><br><span class="line"><span class="comment">// 将在片段着色器中产生虚假的射线方向，从而产生外来的颜色。</span></span><br><span class="line"><span class="keyword">const</span> rtTexture = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">WebGLRenderTarget</span>(width, height, &#123;</span><br><span class="line">    <span class="attr">minFilter</span>: <span class="variable constant_">THREE</span>.<span class="property">NearestFilter</span>,</span><br><span class="line">    <span class="attr">magFilter</span>: <span class="variable constant_">THREE</span>.<span class="property">NearestFilter</span>,</span><br><span class="line">    <span class="attr">wrapS</span>: <span class="variable constant_">THREE</span>.<span class="property">ClampToEdgeWrapping</span>,</span><br><span class="line">    <span class="attr">wrapT</span>: <span class="variable constant_">THREE</span>.<span class="property">ClampToEdgeWrapping</span>,</span><br><span class="line">    <span class="comment">// format: THREE.RGBFormat,</span></span><br><span class="line">    <span class="attr">type</span>: <span class="variable constant_">THREE</span>.<span class="property">FloatType</span>,</span><br><span class="line">    <span class="attr">generateMipmaps</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>参数详解：</strong></p>
<p><strong>width</strong> - renderTarget的宽度<br><strong>height</strong> - renderTarget的高度</p>
<p>🤍options - (可选)一个保存着自动生成的目标纹理的纹理参数以及表示是否使用深度缓存/模板缓存的布尔值的对象 以下是一些合法选项：</p>
<p><strong>magFilter</strong> - 默认是LinearFilter. <strong>放大滤镜</strong><br><strong>minFilter</strong> - 默认是LinearFilter. <strong>缩小滤镜</strong></p>
<p>这2个参数代表纹理的放大和缩小，这里使用 THREE.NearestFilter</p>
<p><strong>wrapS</strong> - 默认是ClampToEdgeWrapping.  <strong>包裹模式</strong><br><strong>wrapT</strong> - 默认是ClampToEdgeWrapping. <strong>包裹模式</strong></p>
<p>使用RepeatWrapping，纹理将简单地重复到无穷大。</p>
<p>ClampToEdgeWrapping是默认值，纹理中的最后一个像素将延伸到网格的边缘。</p>
<p>使用MirroredRepeatWrapping， 纹理将重复到无穷大，在每次重复时将进行镜像。</p>
<p><strong>format</strong> - 默认是RGBAFormat. <strong>纹理的格式</strong>  目前来看，好像必须设置成RGBA的格式，设置成别的格式会报warning？</p>
<p><strong>type</strong> - 默认是UnsignedByteType. 用于纹理的type属性，这些属性必须与正确的格式相对应。</p>
<p><strong>generateMipmaps</strong> - 默认是<strong>false</strong>.  <strong>是否生成 Mipmaps</strong></p>
<h4 id="进行渲染，获得一个材质的缓冲"><a href="#进行渲染，获得一个材质的缓冲" class="headerlink" title="进行渲染，获得一个材质的缓冲"></a>进行渲染，获得一个材质的缓冲</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Render first pass and store the world space coords of the back face fragments into the texture.</span></span><br><span class="line">renderer.<span class="title function_">setRenderTarget</span>(rtTexture);</span><br><span class="line">renderer.<span class="title function_">render</span>(sceneFirstPass, camera);</span><br><span class="line">renderer.<span class="title function_">setRenderTarget</span>(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>

<p><strong>使用函数：</strong></p>
<p>**setRenderTarget **  该方法设置活跃rendertarget。</p>
<p><strong>( renderTarget : WebGLRenderTarget, activeCubeFace : Integer, activeMipmapLevel : Integer ) : null</strong></p>
<p><strong>renderTarget</strong> – 需要被激活的renderTarget(可选)。若此参数为空，则将canvas设置成活跃render target。<br><strong>activeCubeFace</strong> – Specifies the active cube side (PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5) of WebGLCubeRenderTarget (optional).<br><strong>activeMipmapLevel</strong> – Specifies the active mipmap level (optional).</p>
<h3 id="③第三步-第二个渲染通道"><a href="#③第三步-第二个渲染通道" class="headerlink" title="③第三步:第二个渲染通道"></a>③第三步:第二个渲染通道</h3><p>这个渲染通道实际上是执行体积光线投射的，它从绘制立方体的正面开始，正面的每个点都是射线的起点。</p>
<p>顶点着色器创建两个输出:<strong>投影坐标(片段的2D屏幕坐标)(projectedCoords)</strong> 和 <strong>世界空间坐标 (worldSpaceCoords)</strong> 。</p>
<p><strong>世界空间坐标</strong>将被用作射线起点，而<strong>投影坐标</strong>将被用于采样存储立方体背面位置的纹理。</p>
<p><strong>vertexShaderSecondPass.vert</strong></p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">varying</span> <span class="type">vec3</span> worldSpaceCoords;</span><br><span class="line"><span class="keyword">varying</span> <span class="type">vec4</span> projectedCoords;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    worldSpaceCoords = (modelMatrix * <span class="type">vec4</span>(position + <span class="type">vec3</span>(<span class="number">0.5</span>, <span class="number">0.5</span>,<span class="number">0.5</span>), <span class="number">1.0</span> )).xyz;</span><br><span class="line">    <span class="built_in">gl_Position</span> = projectionMatrix *  modelViewMatrix * <span class="type">vec4</span>( position, <span class="number">1.0</span> );</span><br><span class="line">    projectedCoords =  projectionMatrix * modelViewMatrix * <span class="type">vec4</span>( position, <span class="number">1.0</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注解</strong></p>
<p>这里 gl_Position = projectedCoords 都是片段的2D屏幕坐标</p>
<p>而 worldSpaceCoords 是世界空间坐标，范围是 （0 -1）的区间</p>
<p>这个片段着色器的第二个渲染通道有点复杂，所以我们要慢慢分析这个部分。</p>
<p><img src="/2021-07-14-%E4%BD%BF%E7%94%A8threejs%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84Volume-Rendering/rays.jpg" alt="rays"></p>
<p>​    在这个例子中，射线 R0 到 R4 是从立方体正面的片段位置投射的 （f0 到 f4 ) ，结束在立方体背面的位置(I0到I4)</p>
<h4 id="得到射线的向量"><a href="#得到射线的向量" class="headerlink" title="得到射线的向量"></a>得到射线的向量</h4><p>基于上一步的位置，我们对纹理进行采样，以获得背面片段的世界空间位置。</p>
<p>注意我们如何通过除以W将投影坐标转换为NDC(标准化设备坐标)，然后如何将其转换为[0;1]范围，以便将其用作UV坐标。当我们对之前渲染通道中生成的2D纹理采样时，就得到了射线的结束位置。</p>
<p><strong>fragmentShaderSecondPass.frag</strong></p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将坐标从 vert shader 中传入</span></span><br><span class="line"><span class="keyword">varying</span> <span class="type">vec3</span> worldSpaceCoords;</span><br><span class="line"><span class="keyword">varying</span> <span class="type">vec4</span> projectedCoords;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uniform</span> <span class="type">sampler2D</span> tex;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main( <span class="type">void</span> ) &#123;</span><br><span class="line">   <span class="comment">//转换屏幕空间坐标从 [-1;1] 到 [0;1]</span></span><br><span class="line">    <span class="type">vec2</span> texc = <span class="type">vec2</span>(((projectedCoords.x / projectedCoords.w) + <span class="number">1.0</span> ) / <span class="number">2.0</span>, ((projectedCoords.y / projectedCoords.w) + <span class="number">1.0</span> ) / <span class="number">2.0</span> );</span><br><span class="line">    <span class="comment">//后面的位置 是 存储在材质中的世界空间坐标</span></span><br><span class="line">    <span class="type">vec3</span> backPos = <span class="built_in">texture</span>(tex, texc).xyz;</span><br><span class="line">    <span class="comment">//前面的位置 是 世界空间坐标</span></span><br><span class="line">    <span class="type">vec3</span> frontPos = worldSpaceCoords;</span><br><span class="line">   <span class="comment">//从前面的位置 到 后面的位置 的向量</span></span><br><span class="line">    <span class="type">vec3</span> dir = backPos - frontPos;</span><br><span class="line">    <span class="comment">// 射线长度</span></span><br><span class="line">    <span class="type">float</span> rayLength = <span class="built_in">length</span>(dir);</span><br><span class="line">	<span class="comment">// 测试用...</span></span><br><span class="line">    <span class="built_in">gl_FragColor</span> = <span class="type">vec4</span>( backPos.rgb, <span class="number">1.0</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后开启正面着色的话，就会在屏幕上绘制立方体后面的位置的坐标信息。</p>
<h4 id="设置射线"><a href="#设置射线" class="headerlink" title="设置射线"></a>设置射线</h4><p>有了front和back位置，我们现在可以创建一个从frontPos开始并以backPos结束的射线。  </p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">// step2</span></span><br><span class="line"><span class="comment">// 计算步长</span></span><br><span class="line"><span class="type">float</span> delta = <span class="number">1.0</span> / steps;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算长度</span></span><br><span class="line"><span class="type">vec3</span> deltaDirection = <span class="built_in">normalize</span>(dir) * delta;</span><br><span class="line"><span class="type">float</span> deltaDirectionLength = <span class="built_in">length</span>(deltaDirection);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 射线从 立方体前面位置 射入</span></span><br><span class="line"><span class="type">vec3</span> currentPosition = frontPos;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置一个颜色的累积器</span></span><br><span class="line"><span class="type">vec4</span> accumulatedColor = <span class="type">vec4</span>(<span class="number">0.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置一个 Alpha 的累积器</span></span><br><span class="line"><span class="type">float</span> accumulatedAlpha = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 射线传播了多长的距离</span></span><br><span class="line"><span class="type">float</span> accumulatedLength = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//If we have twice as many samples, we only need ~1/2 the alpha per sample.</span></span><br><span class="line"><span class="comment">//Scaling by 256/10 just happens to give a good value for the alphaCorrection slider.</span></span><br><span class="line"><span class="type">float</span> alphaScaleFactor = <span class="number">25.6</span> * delta;</span><br><span class="line"></span><br><span class="line"><span class="type">vec4</span> colorSample;</span><br><span class="line"><span class="type">float</span> alphaSample;</span><br></pre></td></tr></table></figure>



<h4 id="射线发射"><a href="#射线发射" class="headerlink" title="射线发射"></a>射线发射</h4><p>一旦射线被设置好，我们的射线将从起始位置，推进射线的当前位置到 <strong>dir</strong> 。</p>
<p>在每一步中，我们对纹理进行采样，以寻找体素强度。需要注意的是，体素只包含强度值，因此到目前为止它们还没有关于颜色的任何信息。赋予每个体素颜色的是<strong>变换函数 <strong>（</strong>transform function</strong> ）。可以看看 <strong>sampleAs3DTexture</strong> 函数代码，看看转换函数是如何工作的。</p>
<p>在我们有了由sampleAs3DTexture给出的体素颜色后，它会被 <strong>alphaCorrection</strong> 参数校正。你可以在线调整这个值，看看有什么不同的结果。</p>
<p>每次迭代的重要部分是实际的颜色构成，在这里，<strong>accumulatedColor</strong> 值被添加到之前存储的基于alpha值的值之上。我们还保存了一个<strong>alphaAccumulator</strong>，它将让我们知道何时停止射线的前进。</p>
<p>迭代会一直进行，直到满足以下三个条件之一:</p>
<ul>
<li>射线走过的距离达到了假定的射线长度。记住，射线是从startPos到endPos。</li>
<li>累计alpha值达到100%</li>
<li>迭代达到最大常数 MAX_STEPS （本例中，由于生成的体素数据为512 * 512 * 512 的，所以MAX_STEPS 设置为 512倍的根号三，约等于887)</li>
</ul>
<p>最后，片段着色器返回被遍历的体素值的合成结果。</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">// step3</span></span><br><span class="line"><span class="comment">// 执行射线前进的迭代</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX_STEPS; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 从3D纹理中获得体素强度值。</span></span><br><span class="line">    colorSample = getTexture(currentPosition);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// alpha校正</span></span><br><span class="line">    alphaSample = colorSample.a * alphaCorrection;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将这种效果应用于颜色和alpha积累，可以获得更真实的透明度。</span></span><br><span class="line">    alphaSample *= (<span class="number">1.0</span> - accumulatedAlpha);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按步长缩放alpha 使最终颜色不受步长影响。</span></span><br><span class="line">    alphaSample *= alphaScaleFactor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行合成</span></span><br><span class="line">    accumulatedColor += colorSample * alphaSample;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储到目前为止积累的alpha。</span></span><br><span class="line">    accumulatedAlpha += alphaSample;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 推进射线</span></span><br><span class="line">    currentPosition += deltaDirection;</span><br><span class="line">    accumulatedLength += deltaDirectionLength;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果遍历的长度大于射线长度，或者累计的alpha达到1.0，那么退出。</span></span><br><span class="line">    <span class="keyword">if</span>(accumulatedLength &gt;= rayLength || accumulatedAlpha &gt;= <span class="number">1.0</span> )</span><br><span class="line">    	<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>改变控制面板中的 <strong>steps</strong> ，可以改变每条射线的最大迭代次数，可能需要相应地调整 <strong>alphaCorrection</strong> 值。</p>
<p><strong>注解：</strong></p>
<p><strong>每次迭代的步骤：</strong></p>
<ol>
<li> 从3D纹理中获得体素强度值。（这一步利用函数 getTexture 实际上是从转换方程中获取到颜色值）</li>
<li> alpha校正，这里默认 alphaCorrection 的值设置为 <strong>0.1</strong> （即实际拿到的 RGBA颜色 的 alpha 值，取它的十分之一）</li>
<li>获取到的 alpha值 ，还要乘以 <strong>(1.0 - accumulatedAlpha)</strong> ，即越往后的像素点，对于 alpha累计值 的影响越小</li>
<li>再将 alpha 的值乘以 <strong>alphaScaleFactor</strong> ，按步长缩放 alpha 使最终颜色不受步长影响。</li>
<li>执行合成 ： accumulatedColor += colorSample * alphaSample;</li>
<li>存储到目前为止积累的alpha： accumulatedAlpha += alphaSample;</li>
<li>推进射线</li>
</ol>
<h3 id="④渲染结果："><a href="#④渲染结果：" class="headerlink" title="④渲染结果："></a>④渲染结果：</h3><p>直接渲染出来效果很差，性能表现也很一般，后续需要持续优化。</p>
<p><img src="/2021-07-14-%E4%BD%BF%E7%94%A8threejs%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84Volume-Rendering/111.png" alt="渲染结果"></p>
<h2 id="💜补充内容"><a href="#💜补充内容" class="headerlink" title="💜补充内容"></a>💜补充内容</h2><h3 id="如何设置转换方程？"><a href="#如何设置转换方程？" class="headerlink" title="如何设置转换方程？"></a>如何设置转换方程？</h3><p>首先设置3种颜色的数据，和它的在 0-1 区间上的位置 位置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [colorSetting, setColorSetting] = <span class="title function_">useState</span>([</span><br><span class="line">  &#123; <span class="attr">color</span>: <span class="string">&#x27;#00fa58&#x27;</span>, <span class="attr">stepPos</span>: <span class="number">0.1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">color</span>: <span class="string">&#x27;#cc6600&#x27;</span>, <span class="attr">stepPos</span>: <span class="number">0.7</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">color</span>: <span class="string">&#x27;#f2f200&#x27;</span>, <span class="attr">stepPos</span>: <span class="number">1</span> &#125;,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<p>使用canvas来生成 转换方程 的图片</p>
<p>它将生成为一个 three.js 中的材质数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">updateTransferFunction</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;colorSetting&#x27;</span>, colorSetting);</span><br><span class="line">  <span class="keyword">const</span> tfCanvasDom = tfCanvas.<span class="property">current</span>;</span><br><span class="line"></span><br><span class="line">  tfCanvasDom.<span class="property">height</span> = <span class="number">20</span>;</span><br><span class="line">  tfCanvasDom.<span class="property">width</span> = <span class="number">256</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> ctx = tfCanvasDom.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> grd = ctx.<span class="title function_">createLinearGradient</span>(<span class="number">0</span>, <span class="number">0</span>, tfCanvasDom.<span class="property">width</span> - <span class="number">1</span>, tfCanvasDom.<span class="property">height</span> - <span class="number">1</span>);</span><br><span class="line">  grd.<span class="title function_">addColorStop</span>(colorSetting[<span class="number">0</span>].<span class="property">stepPos</span>, colorSetting[<span class="number">0</span>].<span class="property">color</span>);</span><br><span class="line">  grd.<span class="title function_">addColorStop</span>(colorSetting[<span class="number">1</span>].<span class="property">stepPos</span>, colorSetting[<span class="number">1</span>].<span class="property">color</span>);</span><br><span class="line">  grd.<span class="title function_">addColorStop</span>(colorSetting[<span class="number">2</span>].<span class="property">stepPos</span>, colorSetting[<span class="number">2</span>].<span class="property">color</span>);</span><br><span class="line"></span><br><span class="line">  ctx.<span class="property">fillStyle</span> = grd;</span><br><span class="line">  ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, tfCanvasDom.<span class="property">width</span> - <span class="number">1</span>, tfCanvasDom.<span class="property">height</span> - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> transferTexture = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Texture</span>(tfCanvasDom);</span><br><span class="line">  transferTexture.<span class="property">wrapS</span> = <span class="variable constant_">THREE</span>.<span class="property">ClampToEdgeWrapping</span>;</span><br><span class="line">  transferTexture.<span class="property">wrapT</span> = <span class="variable constant_">THREE</span>.<span class="property">ClampToEdgeWrapping</span>;</span><br><span class="line">  transferTexture.<span class="property">needsUpdate</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> transferTexture;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>最后以uniform的形式传入到片元着色器中</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="type">vec4</span> getTexture( <span class="type">vec3</span> texCoord )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">vec4</span> colorSample = <span class="built_in">texture</span>(cubeTex , texCoord);</span><br><span class="line">    <span class="type">vec3</span> color = <span class="built_in">texture</span>( transferTex, <span class="type">vec2</span>( colorSample.r, <span class="number">1.0</span>) ).rgb;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">vec4</span>(color , colorSample.a) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意这里 getTexture 的方法在上文的 <strong>射线发射</strong> 中有使用到，即它的颜色数据从 色彩转换方程中获取</p>
<p>这里取色的时候，Y轴可以直接取1.0，因为这个材质在x坐标相同的时候颜色一致。X轴，取colorSample中rgb任意一个通道的值。</p>
<h3 id="优化1：解决立方体边缘的错误"><a href="#优化1：解决立方体边缘的错误" class="headerlink" title="优化1：解决立方体边缘的错误"></a>优化1：解决立方体边缘的错误</h3><p>我们获取到的第一个渲染结果，有一个显而易见的问题就是它的边缘会出现一些 ”不正确的像素“</p>
<p>解决方案：改变 第二个渲染通道 的 片元着色器</p>
<p>过滤掉边缘的点不进行渲染</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Using NearestFilter for rtTexture mostly eliminates bad backPos values at the edges</span></span><br><span class="line"><span class="comment">//of the cube, but there may still be no valid backPos value for the current fragment.</span></span><br><span class="line"><span class="keyword">if</span> ((backPos.x == <span class="number">0.0</span>) &amp;&amp; (backPos.y == <span class="number">0.0</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">gl_FragColor</span> = <span class="type">vec4</span>(<span class="number">0.0</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>效果：</strong></p>
<p><img src="/2021-07-14-%E4%BD%BF%E7%94%A8threejs%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84Volume-Rendering/112.png" alt="112"></p>
<h3 id="优化2：过滤掉一些太黑的像素"><a href="#优化2：过滤掉一些太黑的像素" class="headerlink" title="优化2：过滤掉一些太黑的像素"></a>优化2：过滤掉一些太黑的像素</h3><p>目前存在的问题的是，所有的像素的alpha都设置为了255，于是一些很黑的像素可能会遮挡视野，导致渲染的结果看起来很像一个立方体。</p>
<p>思路：将像素的 <strong>alpha</strong> 值 设置为它的灰度值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">imgPixels[stride] = val;</span><br><span class="line">imgPixels[stride + <span class="number">1</span>] = val;</span><br><span class="line">imgPixels[stride + <span class="number">2</span>] = val;</span><br><span class="line">imgPixels[stride + <span class="number">3</span>] = val;</span><br></pre></td></tr></table></figure>

<p><strong>效果：</strong></p>
<p><img src="/2021-07-14-%E4%BD%BF%E7%94%A8threejs%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84Volume-Rendering/113.png" alt="113"></p>
<h3 id="后续优化…"><a href="#后续优化…" class="headerlink" title="后续优化…"></a>后续优化…</h3><p>目前渲染出来的影像，由于原数据只有41层，层数比较少，所以锯齿感很强，要消除锯齿。</p>
<p>渲染效率很低，当steps值设置很高的时候，渲染速度会很卡，还需要继续优化算法</p>
]]></content>
      <categories>
        <category>医学影像处理</category>
      </categories>
      <tags>
        <tag>医学影像处理</tag>
        <tag>前端</tag>
        <tag>React</tag>
        <tag>threejs</tag>
        <tag>图形学</tag>
      </tags>
  </entry>
  <entry>
    <title>three.js中glsl写法整理01</title>
    <url>/2021-07-15-three-js%E4%B8%ADglsl%E5%86%99%E6%B3%95%E6%95%B4%E7%90%8601/</url>
    <content><![CDATA[<p>在web网页上写glsl是一件比较麻烦的事情，而且感觉网上比较缺乏一些glsl的文档，</p>
<p>所以本文结合three.js中shader的写法，对glsl中的语法进行整理。</p>
<span id="more"></span>



<h2 id="📘three-js-内置的变量-uniforms-和属性"><a href="#📘three-js-内置的变量-uniforms-和属性" class="headerlink" title="📘three.js 内置的变量(uniforms)和属性"></a>📘three.js 内置的变量(uniforms)和属性</h2><p>来源：<a href="https://threejs.org/docs/index.html#api/zh/renderers/webgl/WebGLProgram">https://threejs.org/docs/index.html#api/zh/renderers/webgl/WebGLProgram</a></p>
<h3 id="顶点着色器-无条件的"><a href="#顶点着色器-无条件的" class="headerlink" title="顶点着色器(无条件的):"></a>顶点着色器(无条件的):</h3><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">// = object.matrixWorld</span></span><br><span class="line"><span class="keyword">uniform</span> <span class="type">mat4</span> modelMatrix;</span><br><span class="line"></span><br><span class="line"><span class="comment">// = camera.matrixWorldInverse * object.matrixWorld</span></span><br><span class="line"><span class="keyword">uniform</span> <span class="type">mat4</span> modelViewMatrix;</span><br><span class="line"></span><br><span class="line"><span class="comment">// = camera.projectionMatrix</span></span><br><span class="line"><span class="keyword">uniform</span> <span class="type">mat4</span> projectionMatrix;</span><br><span class="line"></span><br><span class="line"><span class="comment">// = camera.matrixWorldInverse</span></span><br><span class="line"><span class="keyword">uniform</span> <span class="type">mat4</span> viewMatrix;</span><br><span class="line"></span><br><span class="line"><span class="comment">// = inverse transpose of modelViewMatrix</span></span><br><span class="line"><span class="keyword">uniform</span> <span class="type">mat3</span> normalMatrix;</span><br><span class="line"></span><br><span class="line"><span class="comment">// = camera position in world space</span></span><br><span class="line"><span class="keyword">uniform</span> <span class="type">vec3</span> cameraPosition;</span><br></pre></td></tr></table></figure>

<p>attribute:</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">// default vertex attributes provided by Geometry and BufferGeometry</span></span><br><span class="line"><span class="keyword">attribute</span> <span class="type">vec3</span> position;</span><br><span class="line"><span class="keyword">attribute</span> <span class="type">vec3</span> normal;</span><br><span class="line"><span class="keyword">attribute</span> <span class="type">vec2</span> uv;</span><br></pre></td></tr></table></figure>

<p>注意，可以通过以下方式计算顶点着色器中顶点的位置：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="built_in">gl_Position</span> = projectionMatrix * modelViewMatrix * <span class="type">vec4</span>( position, <span class="number">1.0</span> );</span><br></pre></td></tr></table></figure>

<p>或者也可以这样：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="built_in">gl_Position</span> = projectionMatrix * viewMatrix * modelMatrix * <span class="type">vec4</span>( position, <span class="number">1.0</span> );</span><br></pre></td></tr></table></figure>



<h2 id="🔵向量的分量访问"><a href="#🔵向量的分量访问" class="headerlink" title="🔵向量的分量访问"></a>🔵向量的分量访问</h2><p>glsl中的向量(vec2,vec3,vec4)往往有特殊的含义,比如可能代表了一个空间坐标(x,y,z,w),或者代表了一个颜色(r,g,b,a),再或者代表一个纹理坐标(s,t,p,q) 所以glsl提供了一些更人性化的分量访问方式.</p>
<p><code>vector.xyzw</code> 其中xyzw 可以任意组合</p>
<p><code>vector.rgba</code> 其中rgba 可以任意组合</p>
<p><code>vector.stpq</code> 其中rgba 可以任意组合</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="type">vec4</span> v=<span class="type">vec4</span>(<span class="number">1.0</span>,<span class="number">2.0</span>,<span class="number">3.0</span>,<span class="number">1.0</span>);</span><br><span class="line"><span class="type">float</span> x = v.x; <span class="comment">//1.0</span></span><br><span class="line"><span class="type">float</span> x1 = v.r; <span class="comment">//1.0</span></span><br><span class="line"><span class="type">float</span> x2 = v[<span class="number">0</span>]; <span class="comment">//1.0</span></span><br><span class="line"></span><br><span class="line"><span class="type">vec3</span> xyz = v.xyz; <span class="comment">//vec3(1.0,2.0,3.0)</span></span><br><span class="line"><span class="type">vec3</span> xyz1 = vec(v[<span class="number">0</span>],v[<span class="number">1</span>],v[<span class="number">2</span>]); <span class="comment">//vec3(1.0,2.0,3.0)</span></span><br><span class="line"><span class="type">vec3</span> rgb = v.rgb; <span class="comment">//vec3(1.0,2.0,3.0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">vec2</span> xyzw = v.xyzw; <span class="comment">//vec4(1.0,2.0,3.0,1.0);</span></span><br><span class="line"><span class="type">vec2</span> rgba = v.rgba; <span class="comment">//vec4(1.0,2.0,3.0,1.0);</span></span><br></pre></td></tr></table></figure>



<h2 id="🎈变量类型"><a href="#🎈变量类型" class="headerlink" title="🎈变量类型"></a>🎈变量类型</h2><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Type 		Meaning</span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line">void 		for functions that do not return a value</span><br><span class="line">bool 		a conditional type, taking on values of true or false</span><br><span class="line">int 		a signed integer</span><br><span class="line">uint 		an unsigned integer</span><br><span class="line">float 		a single floating-point scalar</span><br><span class="line">vec2 		a two-component floating-point vector</span><br><span class="line">vec3 		a three-component floating-point vector</span><br><span class="line">vec4	 	a four-component floating-point vector</span><br><span class="line">bvec2 		a two-component Boolean vector</span><br><span class="line">bvec3 		a three-component Boolean vector</span><br><span class="line">bvec4 		a four-component Boolean vector</span><br><span class="line">ivec2 		a two-component signed integer vector</span><br><span class="line">ivec3 		a three-component signed integer vector</span><br><span class="line">ivec4 		a four-component signed integer vector</span><br><span class="line">uvec2 		a two-component unsigned integer vector</span><br><span class="line">uvec3 		a three-component unsigned integer vector</span><br><span class="line">uvec4 		a four-component unsigned integer vector</span><br><span class="line">mat2 		a 2×2 floating-point matrix</span><br><span class="line">mat3 		a 3×3 floating-point matrix</span><br><span class="line">mat4 		a 4×4 floating-point matrix</span><br><span class="line">mat2x2 		same as a mat2</span><br><span class="line">mat2x3 		a floating-point matrix with 2 columns and 3 rows</span><br><span class="line">mat2x4 		a floating-point matrix with 2 columns and 4 rows</span><br><span class="line">mat3x2 		a floating-point matrix with 3 columns and 2 rows</span><br><span class="line">mat3x3 		same as a mat3</span><br><span class="line">mat3x4 		a floating-point matrix with 3 columns and 4 rows</span><br><span class="line">mat4x2 		a floating-point matrix with 4 columns and 2 rows</span><br><span class="line">mat4x3 		a floating-point matrix with 4 columns and 3 rows</span><br><span class="line">mat4x4 		same as a mat4</span><br></pre></td></tr></table></figure>

<h3 id="浮点采样器类型"><a href="#浮点采样器类型" class="headerlink" title="浮点采样器类型"></a>浮点采样器类型</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Type 					Meaning</span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line">sampler1D 				a handle for accessing a 1D texture</span><br><span class="line">sampler2D 				a handle for accessing a 2D texture</span><br><span class="line">sampler3D 				a handle for accessing a 3D texture</span><br><span class="line">samplerCube 			a handle for accessing a cube mapped texture</span><br><span class="line">sampler2DRect 			a handle for accessing a rectangular texture</span><br><span class="line">sampler1DShadow 		a handle for accessing a 1D depth texture with comparison</span><br><span class="line">sampler2DShadow 		a handle for accessing a 2D depth texture with comparison</span><br><span class="line">sampler2DRectShadow 	a handle for accessing a rectangular texture with comparison</span><br><span class="line">sampler1DArray 			a handle for accessing a 1D array texture</span><br><span class="line">sampler2DArray 			a handle for accessing a 2D array texture</span><br><span class="line">sampler1DArrayShadow 	a handle for accessing a 1D array depth texture with comparison</span><br><span class="line">sampler2DArrayShadow 	a handle for accessing a 2D array depth texture with comparison</span><br><span class="line">samplerBuffer 			a handle for accessing a buffer texture</span><br></pre></td></tr></table></figure>

<h3 id="有符号整数采样器类型"><a href="#有符号整数采样器类型" class="headerlink" title="有符号整数采样器类型"></a>有符号整数采样器类型</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Type 				Meaning</span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line">isampler1D 			a handle for accessing an integer 1D texture</span><br><span class="line">isampler2D 			a handle for accessing an integer 2D texture</span><br><span class="line">isampler3D 			a handle for accessing an integer 3D texture</span><br><span class="line">isamplerCube 		a handle for accessing an integer cube mapped texture</span><br><span class="line">isampler2DRect 		a handle for accessing an integer 2D rectangular texture</span><br><span class="line">isampler1DArray 	a handle for accessing an integer 1D array texture</span><br><span class="line">isampler2DArray 	a handle for accessing an integer 2D array texture</span><br><span class="line">isamplerBuffer 		a handle for accessing an integer buffer texture</span><br></pre></td></tr></table></figure>

<h3 id="无符号整数采样器类型"><a href="#无符号整数采样器类型" class="headerlink" title="无符号整数采样器类型"></a>无符号整数采样器类型</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Type 				Meaning</span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line">usampler1D 			a handle for accessing an unsigned integer 1D texture</span><br><span class="line">usampler2D 			a handle for accessing an unsigned integer 2D texture</span><br><span class="line">usampler3D 			a handle for accessing an unsigned integer 3D texture</span><br><span class="line">usamplerCube 		a handle for accessing an unsigned integer cube mapped texture</span><br><span class="line">usampler2DRect 		a handle for accessing an unsigned integer rectangular texture</span><br><span class="line">usampler1DArray 	a handle for accessing an unsigned integer 1D array texture</span><br><span class="line">usampler2DArray 	a handle for accessing an unsigned integer 2D array texture</span><br><span class="line">usamplerBuffer 		a handle for accessing an unsigned integer buffer texture</span><br></pre></td></tr></table></figure>



<h3 id="类型的一些例子"><a href="#类型的一些例子" class="headerlink" title="类型的一些例子"></a>类型的一些例子</h3><h4 id="sampler3D"><a href="#sampler3D" class="headerlink" title="sampler3D"></a>sampler3D</h4><p>简述：3D 的纹理类型</p>
<p>使用例：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">uniform</span> <span class="type">sampler3D</span> u_data;</span><br><span class="line">...</span><br><span class="line"><span class="built_in">texture</span>(u_data, texcoords.xyz).r</span><br></pre></td></tr></table></figure>



<h4 id="sampler2DArray"><a href="#sampler2DArray" class="headerlink" title="sampler2DArray"></a>sampler2DArray</h4><p>简述：2D 的纹理的列表</p>
<p>使用例：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">uniform</span> <span class="type">sampler2DArray</span> diffuse;</span><br><span class="line">...</span><br><span class="line"><span class="type">vec4</span> color = <span class="built_in">texture</span>( diffuse, pos.xyz );</span><br></pre></td></tr></table></figure>





<h2 id="💙内置函数库"><a href="#💙内置函数库" class="headerlink" title="💙内置函数库"></a>💙内置函数库</h2><h4 id="纹理查询函数"><a href="#纹理查询函数" class="headerlink" title="纹理查询函数"></a>纹理查询函数</h4><p>实际上例如 texture2D 这种方法是已经被弃用了，但是在以前的代码里面可能很常见</p>
<p><strong>主要的</strong></p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">gvec4 <span class="built_in">texture</span> (gsampler1D sampler, <span class="type">float</span> P [, <span class="type">float</span> bias] )</span><br><span class="line">gvec4 <span class="built_in">texture</span> (gsampler2D sampler, <span class="type">vec2</span> P [, <span class="type">float</span> bias] ) </span><br><span class="line">gvec4 <span class="built_in">texture</span> (gsampler3D sampler, <span class="type">vec3</span> P [, <span class="type">float</span> bias] ) </span><br></pre></td></tr></table></figure>

<p><strong>其他的</strong></p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">gvec4 <span class="built_in">texture</span> (gsamplerCube sampler, <span class="type">vec3</span> P [, <span class="type">float</span> bias] ) </span><br><span class="line"><span class="type">float</span> <span class="built_in">texture</span> (<span class="type">sampler1DShadow</span> sampler, <span class="type">vec3</span> P [, <span class="type">float</span> bias] ) </span><br><span class="line"><span class="type">float</span> <span class="built_in">texture</span> (<span class="type">sampler2DShadow</span> sampler, <span class="type">vec3</span> P [, <span class="type">float</span> bias] ) </span><br><span class="line"><span class="type">float</span> <span class="built_in">texture</span> (<span class="type">samplerCubeShadow</span> sampler, <span class="type">vec4</span> P [, <span class="type">float</span> bias] ) </span><br><span class="line">gvec4 <span class="built_in">texture</span> (gsampler1DArray sampler, <span class="type">vec2</span> P [, <span class="type">float</span> bias] ) </span><br><span class="line">gvec4 <span class="built_in">texture</span> (gsampler2DArray sampler, <span class="type">vec3</span> P [, <span class="type">float</span> bias] ) </span><br><span class="line"><span class="type">float</span> <span class="built_in">texture</span> (<span class="type">sampler1DArrayShadow</span> sampler, <span class="type">vec3</span> P [, <span class="type">float</span> bias] ) </span><br><span class="line"><span class="type">float</span> <span class="built_in">texture</span> (<span class="type">sampler2DArrayShadow</span> sampler, <span class="type">vec4</span> P) </span><br><span class="line">gvec4 <span class="built_in">texture</span> (gsampler2DRect sampler, <span class="type">vec2</span> P) </span><br><span class="line"><span class="type">float</span> <span class="built_in">texture</span> (<span class="type">sampler2DRectShadow</span> sampler, <span class="type">vec3</span> P)</span><br></pre></td></tr></table></figure>

<p><strong>解释：</strong></p>
<p>Use the texture coordinate P to do a texture lookup in the texture currently bound to sampler. The last component of P is used as Dref for the shadow forms. For array forms, the array layer comes from the last component of P in the nonshadow forms, and the second to last component of P in the shadow forms.</p>
<h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><ul>
<li>GLSL 中文手册 ：<a href="https://github.com/wshxbqq/GLSL-Card">https://github.com/wshxbqq/GLSL-Card</a></li>
<li>The OpenGL Shading Language ：<a href="https://www.khronos.org/registry/OpenGL/specs/gl/GLSLangSpec.1.40.pdf">https://www.khronos.org/registry/OpenGL/specs/gl/GLSLangSpec.1.40.pdf</a></li>
</ul>
]]></content>
      <categories>
        <category>计算机图形学</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>React</tag>
        <tag>threejs</tag>
        <tag>图形学</tag>
      </tags>
  </entry>
  <entry>
    <title>千伏工作室出品 《甲午战争 升龙与旭日 第二版》兵棋简评+推演</title>
    <url>/2021-08-19-%E5%8D%83%E4%BC%8F%E5%B7%A5%E4%BD%9C%E5%AE%A4%E5%87%BA%E5%93%81%E3%80%8A%E7%94%B2%E5%8D%88%E6%88%98%E4%BA%89%E5%8D%87%E9%BE%99%E4%B8%8E%E6%97%AD%E6%97%A5%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E5%85%B5%E6%A3%8B%E7%AE%80%E8%AF%84-%E6%8E%A8%E6%BC%94/</url>
    <content><![CDATA[<h2 id="🟦前言"><a href="#🟦前言" class="headerlink" title="🟦前言"></a>🟦前言</h2><p>​        由于之前很爱看稚嫩的魔法师的桌游视频，魔法师很喜欢推荐一些兵棋类的桌游，于是最近趁假期想找一款简单的兵棋类桌游尝试一下。</p>
<span id="more"></span>

<p>​        查阅相关资料之后，个人感觉国内桌游是小圈子（排除狼人杀和剧本杀的话），毕竟现在的桌游馆基本都转型做剧本杀了，能找到纯粹一点的桌游馆都不是一件容易的事情，那么兵棋可能是更小的一个圈子，很多人可能停留在知道有这个东西，比如战锤40k，更多的人可能都不知道兵棋这个桌游的大类。个人感觉国内被人熟知的兵棋类桌游有《光荣之路》，《冷战热斗》，《冰与火之歌》…这些，齐中后面2款知名度应该更大一些，我之前去的一家桌游店就有《冰与火之歌》。它们好像都有祖国版（被盗印，在淘宝上可以以比较低的价格买到，说明国内都有一定知名度。</p>
<p>​        目前，我总结的国内比较知名的一些兵棋出版社或者代理商有：千伏工作室（淘宝店 ：<a href="https://kvgame.taobao.com/index.htm?spm=a1z10.1-c-s.w5002-12029609689.2.441e6b3e09wAH2">千伏工作室</a>），战鼓工作室（淘宝店：<a href="https://wdgwardrumgames.tmall.com/index.htm?spm=a1z10.1-b.w5002-18129703492.2.62d160e4w50jjV">wdgwardrumgames旗舰店 </a>，战旗工作室 (淘宝店 ：<a href="https://wargames.taobao.com/index.htm?spm=a1z10.1-c.w5002-2618404312.2.5d1878f6RFUGrB">战旗工作室</a>)，香蕉桌游（淘宝店：<a href="https://xiangjiaogame.taobao.com/index.htm?spm=a1z10.1-c.w5002-18162359612.2.2d947a06PKC6KY">香蕉桌游</a>)，极光工作室（淘宝店：<a href="https://mmtown.taobao.com/index.htm?spm=a1z10.1-c.w5002-7997127765.2.fbe36234ZSBo0F">极光工作室</a>），如果还有，欢迎补充。然后格拉摩根伯爵领（仇人家的书店x   稚嫩的魔法师的书店 <a href="https://h5.youzan.com/v2/showcase/homepage?alias=j085tepy">书店</a>）里面也是有卖一些桌游的。这些店里面优秀的兵棋类的桌游还是非常多的，如果想入坑的话都可以逛一逛，里面也有很多比较便宜的入门级兵棋，非常适合新人。</p>
<p>​        这次入手的是一款比较入门级的兵棋类桌游《甲午战争 升龙与旭日 第二版》，由千伏工作室出品，在千伏的淘宝店可以买到。按本人的理解，兵棋类桌游的难度基本可以看它有多少的算子，这一款游戏就只有60个算子，复杂一点的兵棋通常都有超过200枚的算子。然后本人对这个题材也比较感兴趣，价格也不算很贵，还有一点就是因为是本国历史，也许存在推新的可能性？…</p>
<h2 id="🟩简单测评"><a href="#🟩简单测评" class="headerlink" title="🟩简单测评"></a>🟩简单测评</h2><p>​        由于这是本人第一次写关于兵棋的测评，也是第一次玩兵棋，可能很多地方并不专业，还请大佬们海涵。</p>
<h3 id="🤎来源"><a href="#🤎来源" class="headerlink" title="🤎来源"></a>🤎来源</h3><p>​    《甲午战争 升龙与旭日 第二版》这一款游戏，是由田岛准先生设计的，在日本桌游杂志 <strong>gamejournal</strong>（简称<strong>GJ</strong>) 的第21期中收录。（<a href="http://www.gamejournal.net/item_list/gj_021/index.html">原版游戏链接</a>）原本我还想找一些这个游戏的日文版说明书，但是<strong>GJ</strong>的官网上翻不到😞，只能找到可以用<strong>Vassal</strong>（类似桌游模拟器的一个东西）打开的原版游戏，和中文的补充说明书。</p>
<p><img src="/2021-08-19-%E5%8D%83%E4%BC%8F%E5%B7%A5%E4%BD%9C%E5%AE%A4%E5%87%BA%E5%93%81%E3%80%8A%E7%94%B2%E5%8D%88%E6%88%98%E4%BA%89%E5%8D%87%E9%BE%99%E4%B8%8E%E6%97%AD%E6%97%A5%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E5%85%B5%E6%A3%8B%E7%AE%80%E8%AF%84-%E6%8E%A8%E6%BC%94/1.png" alt="原版游戏"></p>
<p>​        战旗工作室和千伏工作室联合将这款游戏进行了引进，在原本的日文版规则中新增了许多中文版的规则，并且将游戏的美工进行了全面升级，修改了原版游戏中存在的一些错误。</p>
<p>​        本游戏着重推演甲午战争中的 <strong>陆战部分</strong>。</p>
<h3 id="💙背景介绍"><a href="#💙背景介绍" class="headerlink" title="💙背景介绍"></a>💙背景介绍</h3><p>​        游戏的背景不用细说，相信都是大家非常熟知的一段历史。甲午战争，日本称日清战争，朝鲜称清日战争，国际通称第一次中日战争（The First Sino-Japanese War）。</p>
<p>​        日本顷举国之力对中国发动侵略战争，最终的结果是 日本决定性大胜，清朝惨败。需要特别注意的是，清军实际纸面数据（陆军普遍装备德式装备，北洋水师舰速略逊一筹，但吨位、火力、装甲、重炮均占优势），包括海军在类，看起来并不差，最后却以如此大的代价惨败明治维新之后的日本，其中的原因令人深思。</p>
<blockquote>
<p>​        虽然甲午战争中，地面上的战斗远没有海战那样广为人知。但是不得不承认的是，陆上的惨败最终决定了战争的胜负走向。 —— 中文版游戏中的介绍</p>
</blockquote>
<p>​        （这里的资料大部分来自wiki）</p>
<p><img src="/2021-08-19-%E5%8D%83%E4%BC%8F%E5%B7%A5%E4%BD%9C%E5%AE%A4%E5%87%BA%E5%93%81%E3%80%8A%E7%94%B2%E5%8D%88%E6%88%98%E4%BA%89%E5%8D%87%E9%BE%99%E4%B8%8E%E6%97%AD%E6%97%A5%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E5%85%B5%E6%A3%8B%E7%AE%80%E8%AF%84-%E6%8E%A8%E6%BC%94/800px-First_Sino-Japanese_War.svg.png" alt="甲午战争形势图"></p>
<h3 id="🔷游戏开箱"><a href="#🔷游戏开箱" class="headerlink" title="🔷游戏开箱"></a>🔷游戏开箱</h3><h4 id="包装盒"><a href="#包装盒" class="headerlink" title="包装盒"></a>包装盒</h4><p>游戏提供了比较精美的包装盒，盒子挺大的。</p>
<p><img src="/2021-08-19-%E5%8D%83%E4%BC%8F%E5%B7%A5%E4%BD%9C%E5%AE%A4%E5%87%BA%E5%93%81%E3%80%8A%E7%94%B2%E5%8D%88%E6%88%98%E4%BA%89%E5%8D%87%E9%BE%99%E4%B8%8E%E6%97%AD%E6%97%A5%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E5%85%B5%E6%A3%8B%E7%AE%80%E8%AF%84-%E6%8E%A8%E6%BC%94/2.jpg" alt="包装盒"></p>
<h4 id="算子"><a href="#算子" class="headerlink" title="算子"></a>算子</h4><p>游戏算子大致分为，海军，陆军，国策，装备，标记类。已经从卡纸板上拆下放入算子盒中。</p>
<p><img src="/2021-08-19-%E5%8D%83%E4%BC%8F%E5%B7%A5%E4%BD%9C%E5%AE%A4%E5%87%BA%E5%93%81%E3%80%8A%E7%94%B2%E5%8D%88%E6%88%98%E4%BA%89%E5%8D%87%E9%BE%99%E4%B8%8E%E6%97%AD%E6%97%A5%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E5%85%B5%E6%A3%8B%E7%AE%80%E8%AF%84-%E6%8E%A8%E6%BC%94/3.jpg" alt="算子"></p>
<h4 id="游戏地图-骰子-提示卡"><a href="#游戏地图-骰子-提示卡" class="headerlink" title="游戏地图+骰子+提示卡"></a>游戏地图+骰子+提示卡</h4><p>地图包括辽宁半岛，朝鲜半岛，山东半岛，东北区域和它们的海域。</p>
<p>骰子官方配的是5颗 大的 <strong>黑色骰子</strong>。</p>
<p><img src="/2021-08-19-%E5%8D%83%E4%BC%8F%E5%B7%A5%E4%BD%9C%E5%AE%A4%E5%87%BA%E5%93%81%E3%80%8A%E7%94%B2%E5%8D%88%E6%88%98%E4%BA%89%E5%8D%87%E9%BE%99%E4%B8%8E%E6%97%AD%E6%97%A5%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E5%85%B5%E6%A3%8B%E7%AE%80%E8%AF%84-%E6%8E%A8%E6%BC%94/4.jpg" alt="游戏地图+骰子+提示卡"></p>
<h4 id="规则书"><a href="#规则书" class="headerlink" title="规则书"></a>规则书</h4><p>规则书总共有14页，不算长。</p>
<p><img src="/2021-08-19-%E5%8D%83%E4%BC%8F%E5%B7%A5%E4%BD%9C%E5%AE%A4%E5%87%BA%E5%93%81%E3%80%8A%E7%94%B2%E5%8D%88%E6%88%98%E4%BA%89%E5%8D%87%E9%BE%99%E4%B8%8E%E6%97%AD%E6%97%A5%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E5%85%B5%E6%A3%8B%E7%AE%80%E8%AF%84-%E6%8E%A8%E6%BC%94/5-16293769733691.jpg" alt="规则书"></p>
<h3 id="🔶简单介绍一些规则"><a href="#🔶简单介绍一些规则" class="headerlink" title="🔶简单介绍一些规则"></a>🔶简单介绍一些规则</h3><h4 id="陆军算子"><a href="#陆军算子" class="headerlink" title="陆军算子"></a>陆军算子</h4><p>从左到右，分别代表这个算子的 <strong>攻击力 - 防御力 - 移动力</strong></p>
<h4 id="游戏流程"><a href="#游戏流程" class="headerlink" title="游戏流程"></a>游戏流程</h4><p>​        本游戏每个回合分为1个动员阶段，和4个行动轮次。</p>
<p>​        动员阶段，需要将增援放入到对应的动员区。</p>
<p>​        每个行动轮次，玩家首先需要执行战略步骤，这一步原版规则需要玩家通过骰子决定军费和先后手，日军骰1个骰子，而清军玩家2个骰子，日军取骰子点数为军费，清军玩家取2个骰子中小的那一个为军费（<strong>代表清军落后的后勤</strong>）。如果军费相同是需要重骰的。然后双方玩家进行储备弹药，增援，动员。之后执行先手和后手方的移动，攻击和恢复。</p>
<p>​        游戏总共8个回合，如果玩家觉得对日军不利，可以增加第9回合。</p>
<h4 id="ZOC"><a href="#ZOC" class="headerlink" title="ZOC"></a>ZOC</h4><p>​        一般的兵棋好像都有这个东西，一个算子在周围六个格子内形成的区域就叫 <strong>ZOC</strong> (zone of control)，中文叫控制区。</p>
<p>​        敌方单位进入控制区之后可以开始交战，并且进入控制区的敌方单位必须立即停止，不能移动。</p>
<p><img src="/2021-08-19-%E5%8D%83%E4%BC%8F%E5%B7%A5%E4%BD%9C%E5%AE%A4%E5%87%BA%E5%93%81%E3%80%8A%E7%94%B2%E5%8D%88%E6%88%98%E4%BA%89%E5%8D%87%E9%BE%99%E4%B8%8E%E6%97%AD%E6%97%A5%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E5%85%B5%E6%A3%8B%E7%AE%80%E8%AF%84-%E6%8E%A8%E6%BC%94/6.jpg" alt="zoc"></p>
<h4 id="海军规则"><a href="#海军规则" class="headerlink" title="海军规则"></a>海军规则</h4><p>​        这个游戏有2版海军规则，一版是原版游戏中利用一个抽象的算子来作为北洋水师，另外一版是中文版规则中补充的，通过几枚海军的算子来作为日军和清军的海军。我一般采用中文版的规则。</p>
<h4 id="军费和弹药"><a href="#军费和弹药" class="headerlink" title="军费和弹药"></a>军费和弹药</h4><p>​        军费和弹药的规则，是这个游戏中比较的核心，也比较特别的部分了，没有军费单位无法移动，战斗等，没有弹药损失的单位就无法回复，也无法进行攻击和反击。</p>
<p>​        日军和清军玩家要计算好军费，精打细算，并且储备足够的弹药，才能在游戏中取得胜利。</p>
<h4 id="登陆和海运"><a href="#登陆和海运" class="headerlink" title="登陆和海运"></a>登陆和海运</h4><p>​        由于这个游戏中回合数比较少，并且那个时候没有机械化步兵师，所以部队的移动速度都很慢，双方每个单位都只有3点移动点，并且部分地形还要付出不止1点的移动点来移动。</p>
<p>​    这样一来，利用海运和登陆战（只有日军能进行登陆战）十分关键！清军玩家要尽量在 黄海大海战 失去海域控制权之前尽可能进行部队和装备的运输，而日军玩家也要尽快夺取海域控制权，进行部队的运输。</p>
<h3 id="🔺需要注意的细节！"><a href="#🔺需要注意的细节！" class="headerlink" title="🔺需要注意的细节！"></a>🔺需要注意的细节！</h3><h4 id="1-反击的命中如何分配？"><a href="#1-反击的命中如何分配？" class="headerlink" title="1.反击的命中如何分配？"></a>1.反击的命中如何分配？</h4><p>​        在游戏中容易出现多打一的情况，例如下图中，3个日军单位攻击一个清军单位：</p>
<p><img src="/2021-08-19-%E5%8D%83%E4%BC%8F%E5%B7%A5%E4%BD%9C%E5%AE%A4%E5%87%BA%E5%93%81%E3%80%8A%E7%94%B2%E5%8D%88%E6%88%98%E4%BA%89%E5%8D%87%E9%BE%99%E4%B8%8E%E6%97%AD%E6%97%A5%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E5%85%B5%E6%A3%8B%E7%AE%80%E8%AF%84-%E6%8E%A8%E6%BC%94/7-16293791476842.jpg" alt="反击"></p>
<p>​        例如清军反击命中3点，萌新可能会认为3点命中可以平均分配个每个日军单位，1人一点命中，最后都没超过防御，无事发生。</p>
<p>​        实际上这样是 <strong>错误的</strong>，反击的命中分配和攻击类似，优先将命中分配给一个完整的单位，也就是说这3点命中先分配给一个完整的日军的单位，一个日军单位承受损失，另外剩余的1点分配给另一个日军单位，没超过防御值，另一个日军单位无事发生。</p>
<p>​        最后反击的结果是一个日军单位需要承受损失。</p>
<h4 id="2-清军的胜利点是怎么结算？"><a href="#2-清军的胜利点是怎么结算？" class="headerlink" title="2.清军的胜利点是怎么结算？"></a>2.清军的胜利点是怎么结算？</h4><p>​        在14.0中文版补充规则中，加入了外交国策的规则，里面出现了清军的胜利分：</p>
<p><img src="/2021-08-19-%E5%8D%83%E4%BC%8F%E5%B7%A5%E4%BD%9C%E5%AE%A4%E5%87%BA%E5%93%81%E3%80%8A%E7%94%B2%E5%8D%88%E6%88%98%E4%BA%89%E5%8D%87%E9%BE%99%E4%B8%8E%E6%97%AD%E6%97%A5%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E5%85%B5%E6%A3%8B%E7%AE%80%E8%AF%84-%E6%8E%A8%E6%BC%94/8-16293795463433.jpg" alt="8"></p>
<p>​        但是，这个游戏是只计算日军的胜利分的，日军在游戏结束的时候有20分，或者降低难度，有17分，认为日军胜利，否则清军胜利。</p>
<p>​        那么这里的胜利分似乎没有作用？这里我询问了一下千伏工作室的负责人，得到的回复是：这里如果清军加胜利分，则日军最后结算的时候扣掉这些日军的胜利分，如果清军减去胜利分，则相当于日军增加对应的胜利分。</p>
<h3 id="🔴规则书中可能的错误"><a href="#🔴规则书中可能的错误" class="headerlink" title="🔴规则书中可能的错误"></a>🔴规则书中可能的错误</h3><p>关于移动，规则书中有一个图例进行介绍。</p>
<p><img src="/2021-08-19-%E5%8D%83%E4%BC%8F%E5%B7%A5%E4%BD%9C%E5%AE%A4%E5%87%BA%E5%93%81%E3%80%8A%E7%94%B2%E5%8D%88%E6%88%98%E4%BA%89%E5%8D%87%E9%BE%99%E4%B8%8E%E6%97%AD%E6%97%A5%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E5%85%B5%E6%A3%8B%E7%AE%80%E8%AF%84-%E6%8E%A8%E6%BC%94/9.jpg" alt="移动"></p>
<p>但是和提示版中的信息不符：</p>
<p><img src="/2021-08-19-%E5%8D%83%E4%BC%8F%E5%B7%A5%E4%BD%9C%E5%AE%A4%E5%87%BA%E5%93%81%E3%80%8A%E7%94%B2%E5%8D%88%E6%88%98%E4%BA%89%E5%8D%87%E9%BE%99%E4%B8%8E%E6%97%AD%E6%97%A5%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E5%85%B5%E6%A3%8B%E7%AE%80%E8%AF%84-%E6%8E%A8%E6%BC%94/10.jpg" alt="地形提示板"></p>
<p>​        例如跨河只多消耗0.5的移动力，而图例中的山地，实际应该是丘陵地，只需要消耗1.5行动力。</p>
<p>​        我实际游玩的时候，根据提示版中的信息为准。</p>
<h3 id="⚪总结和个人理解"><a href="#⚪总结和个人理解" class="headerlink" title="⚪总结和个人理解"></a>⚪总结和个人理解</h3><p>​        总体来说 《甲午战争 升龙与旭日 第二版》 是一款非常不错的入门级兵棋，它用为数不多的算子来演绎整个甲午海战的过程，个人觉得有推新的可能，我也和同学开了一把，过程十分焦灼😂。</p>
<p>​        原版游戏中通过骰子来决定中日双方的军费可能造成不好的体验，这里如果骰运不好，可能双方玩家每次都只能获得1点，2点军费，清军玩家比日军玩家往往更惨，每次只能获得少的可怜的军费，造成清军玩家每回合都做不了什么事情。所以中文版补充规则中，可以使用每轮次固定的军费和先后手，而不进行骰子判定。</p>
<p>​        <strong>海战十分关键！！！</strong>前文中也说了，本游戏由于双方军队的移动力都很少，所以需要借助海运或者登陆战来快速运输部队，制海权的争夺就变得十分关键。原版游戏中清军一定会在第四回合前丢失制海权（黄海大海战），而中文版补充规则中，如果日军骰运不好（互相都无法击伤，尬住了），可能出现一直获取不了制海权而输掉游戏的情况，例如和同学开的那一把，日军到了第七回合才取得制海权来运输部队，但是为时已晚。</p>
<p>​        <strong>清军只要拖住就可以取得胜利！</strong>这个游戏的进攻压力完全在日方，清军玩家完全可以选择不进攻来节省军费，仅仅通过反击，以逸待劳。在我自己的推演中，清军玩家似乎更容易获胜，所以可能补充规则中才提出，为了平衡可以采用第9回合，或者日军17分就算获胜。</p>
<p>​        <strong>不要急于进攻！</strong>进攻需要消耗弹药和军费，而且可以多用一点弹药来进行炮火准备，所以如果急于进攻可能无法对敌人造成减员。进攻方可以多囤积一些弹药和军费，调度更多军队，来给予敌人毁灭性的一击。</p>
<h2 id="🟧简单推演流程"><a href="#🟧简单推演流程" class="headerlink" title="🟧简单推演流程"></a>🟧简单推演流程</h2><p>这里简单推演第一个回合的4个轮次。采用平衡性规则，取消投骰子决定先后手和军费。补充装备的规则。</p>
<h3 id="游戏准备："><a href="#游戏准备：" class="headerlink" title="游戏准备："></a>游戏准备：</h3><p><img src="/2021-08-19-%E5%8D%83%E4%BC%8F%E5%B7%A5%E4%BD%9C%E5%AE%A4%E5%87%BA%E5%93%81%E3%80%8A%E7%94%B2%E5%8D%88%E6%88%98%E4%BA%89%E5%8D%87%E9%BE%99%E4%B8%8E%E6%97%AD%E6%97%A5%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E5%85%B5%E6%A3%8B%E7%AE%80%E8%AF%84-%E6%8E%A8%E6%BC%94/IMG_20210819_220119.jpg" alt="游戏准备"></p>
<p>清军在旅顺，奉天，平壤，威海卫地区囤积守军，2个单位待增援。海军在第1海域部署。</p>
<p>日军1个单位待增援，1个单位和火炮在仁川后方区域。海军在第1海域部署。</p>
<h3 id="第一回合-第1轮次"><a href="#第一回合-第1轮次" class="headerlink" title="第一回合 第1轮次"></a>第一回合 第1轮次</h3><p>日海军进入海域2，与清军发生遭遇战：</p>
<p><img src="/2021-08-19-%E5%8D%83%E4%BC%8F%E5%B7%A5%E4%BD%9C%E5%AE%A4%E5%87%BA%E5%93%81%E3%80%8A%E7%94%B2%E5%8D%88%E6%88%98%E4%BA%89%E5%8D%87%E9%BE%99%E4%B8%8E%E6%97%AD%E6%97%A5%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E5%85%B5%E6%A3%8B%E7%AE%80%E8%AF%84-%E6%8E%A8%E6%BC%94/11.png"></p>
<p>日军所有军舰攻击定远号，清军所有军舰攻击吉野号。</p>
<p>日军刚好击中6次，清军击中5次，清军定远号被击伤，而日军吉野号被击伤。</p>
<p><img src="/2021-08-19-%E5%8D%83%E4%BC%8F%E5%B7%A5%E4%BD%9C%E5%AE%A4%E5%87%BA%E5%93%81%E3%80%8A%E7%94%B2%E5%8D%88%E6%88%98%E4%BA%89%E5%8D%87%E9%BE%99%E4%B8%8E%E6%97%AD%E6%97%A5%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E5%85%B5%E6%A3%8B%E7%AE%80%E8%AF%84-%E6%8E%A8%E6%BC%94/12.png"></p>
<p>日海军撤回到第1海域</p>
<p>日军获得3军费，清军获得2军费，日军先手。</p>
<p>日军囤积2发弹药，将1个单位增援到 至仁川</p>
<p>清军玩家消耗2点军费将 烟台 的部队运输至 安东。</p>
<h3 id="第一回合-第2轮次"><a href="#第一回合-第2轮次" class="headerlink" title="第一回合 第2轮次"></a>第一回合 第2轮次</h3><p>日海军再次进攻</p>
<p>清海军 <strong>定远</strong> 被击沉，日海军 <strong>浪速</strong> 被击伤</p>
<p>清海军总战力下降至8点，日海军总战力下降至14点</p>
<p>日军获得4军费，清军获得3军费，日军先手。</p>
<p>日军囤积2个弹药，启动2个部队挺进平壤周边，攻击清军守兵：</p>
<p><img src="/2021-08-19-%E5%8D%83%E4%BC%8F%E5%B7%A5%E4%BD%9C%E5%AE%A4%E5%87%BA%E5%93%81%E3%80%8A%E7%94%B2%E5%8D%88%E6%88%98%E4%BA%89%E5%8D%87%E9%BE%99%E4%B8%8E%E6%97%AD%E6%97%A5%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E5%85%B5%E6%A3%8B%E7%AE%80%E8%AF%84-%E6%8E%A8%E6%BC%94/13.png"></p>
<p>日军跨河攻击，每个单位减1攻击力，由于带了70厘野炮，增加2点攻击。总共4+4+2=10点攻击力，投掷10枚骰子。</p>
<p>清军反击，2个单位8点攻击力，由于平壤是大城市，加1反击力，所以最后9点攻击力，投掷10枚骰子。</p>
<p>（投骰子的时候，如果结果为5或者6点，就为一次命中）</p>
<p>最后，日军命中4次，由于平壤是大城市，减1点命中，由于清军装备，减1点命中，最后命中2次，2个清军单位均受损伤。</p>
<p>清军反击命中3次，1个日军单位受到损伤</p>
<p>轮到清军玩家，清军玩家选择使用一个弹药恢复一个在平壤的单位，清军玩家消耗2点军费启动部队，撤退至安州，避免被围歼。</p>
<p><img src="/2021-08-19-%E5%8D%83%E4%BC%8F%E5%B7%A5%E4%BD%9C%E5%AE%A4%E5%87%BA%E5%93%81%E3%80%8A%E7%94%B2%E5%8D%88%E6%88%98%E4%BA%89%E5%8D%87%E9%BE%99%E4%B8%8E%E6%97%AD%E6%97%A5%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E5%85%B5%E6%A3%8B%E7%AE%80%E8%AF%84-%E6%8E%A8%E6%BC%94/14.png"></p>
<h3 id="第一回合-第3轮次"><a href="#第一回合-第3轮次" class="headerlink" title="第一回合 第3轮次"></a>第一回合 第3轮次</h3><p>双方海军皆无战果</p>
<p>日军获得3军费，清军获得2军费，日军先手。</p>
<p>日军占领平壤并挺进，清军囤积弹药。</p>
<p><img src="/2021-08-19-%E5%8D%83%E4%BC%8F%E5%B7%A5%E4%BD%9C%E5%AE%A4%E5%87%BA%E5%93%81%E3%80%8A%E7%94%B2%E5%8D%88%E6%88%98%E4%BA%89%E5%8D%87%E9%BE%99%E4%B8%8E%E6%97%AD%E6%97%A5%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E5%85%B5%E6%A3%8B%E7%AE%80%E8%AF%84-%E6%8E%A8%E6%BC%94/15.png"></p>
<h3 id="第一回合-第4轮次"><a href="#第一回合-第4轮次" class="headerlink" title="第一回合 第4轮次"></a>第一回合 第4轮次</h3><p>清海军 <strong>镇远</strong> 被击伤</p>
<p>日军获得4军费，清军获得3军费，日军先手。</p>
<p>日军攻击安州，清军被击退，日军战后挺进至安州。</p>
<p>清军撤退至义洲，尝试在安东一带建立防线</p>
<p><img src="/2021-08-19-%E5%8D%83%E4%BC%8F%E5%B7%A5%E4%BD%9C%E5%AE%A4%E5%87%BA%E5%93%81%E3%80%8A%E7%94%B2%E5%8D%88%E6%88%98%E4%BA%89%E5%8D%87%E9%BE%99%E4%B8%8E%E6%97%AD%E6%97%A5%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E5%85%B5%E6%A3%8B%E7%AE%80%E8%AF%84-%E6%8E%A8%E6%BC%94/15-16293841273844.png"></p>
]]></content>
      <categories>
        <category>桌游</category>
      </categories>
      <tags>
        <tag>测评</tag>
        <tag>游戏</tag>
        <tag>桌游</tag>
        <tag>兵棋</tag>
      </tags>
  </entry>
  <entry>
    <title>分析 cornerstone.js 中渲染图像的方法</title>
    <url>/2021-09-06-%E5%88%86%E6%9E%90-cornerstone-js-%E4%B8%AD%E6%B8%B2%E6%9F%93%E5%9B%BE%E5%83%8F%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>探索 cornerstone中渲染 DICOM 2D图像的方法</p>
<span id="more"></span>

<p><strong>cornerstonejs</strong></p>
<p><a href="https://github.com/cornerstonejs/cornerstone">https://github.com/cornerstonejs/cornerstone</a></p>
<h2 id="cornerstone使用例"><a href="#cornerstone使用例" class="headerlink" title="cornerstone使用例"></a>cornerstone使用例</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- include the cornerstone library --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../dist/cornerstone.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">cornerstone</span> || <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;script src=&quot;https://unpkg.com/cornerstone-core&quot;&gt;\x3C/script&gt;&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- include special code for these examples which provides images --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../exampleImageIdLoader.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// image enable the element</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;dicomImage&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    cornerstone.<span class="title function_">enable</span>(element);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// load the image and display it</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> imageId = <span class="string">&#x27;example://1&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    cornerstone.<span class="title function_">loadImage</span>(imageId).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">image</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">       cornerstone.<span class="title function_">displayImage</span>(element, image);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// Add event handler to the ww/wc apply button</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;apply&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> viewport = cornerstone.<span class="title function_">getViewport</span>(element);</span></span><br><span class="line"><span class="language-javascript">        viewport.<span class="property">voi</span>.<span class="property">windowWidth</span> = <span class="built_in">parseFloat</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ww&#x27;</span>).<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">        viewport.<span class="property">voi</span>.<span class="property">windowCenter</span> = <span class="built_in">parseFloat</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;wc&#x27;</span>).<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">        cornerstone.<span class="title function_">setViewport</span>(element, viewport);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;invert&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> viewport = cornerstone.<span class="title function_">getViewport</span>(element);</span></span><br><span class="line"><span class="language-javascript">        viewport.<span class="property">invert</span> = !viewport.<span class="property">invert</span>;</span></span><br><span class="line"><span class="language-javascript">        cornerstone.<span class="title function_">setViewport</span>(element, viewport);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// add event handlers to mouse move to adjust window/center</span></span></span><br><span class="line"><span class="language-javascript">    element.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousedown&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> lastX = e.<span class="property">pageX</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> lastY = e.<span class="property">pageY</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">mouseMoveHandler</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> deltaX = e.<span class="property">pageX</span> - lastX;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> deltaY = e.<span class="property">pageY</span> - lastY;</span></span><br><span class="line"><span class="language-javascript">            lastX = e.<span class="property">pageX</span>;</span></span><br><span class="line"><span class="language-javascript">            lastY = e.<span class="property">pageY</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> viewport = cornerstone.<span class="title function_">getViewport</span>(element);</span></span><br><span class="line"><span class="language-javascript">            viewport.<span class="property">voi</span>.<span class="property">windowWidth</span> += (deltaX / viewport.<span class="property">scale</span>);</span></span><br><span class="line"><span class="language-javascript">            viewport.<span class="property">voi</span>.<span class="property">windowCenter</span> += (deltaY / viewport.<span class="property">scale</span>);</span></span><br><span class="line"><span class="language-javascript">            cornerstone.<span class="title function_">setViewport</span>(element, viewport);</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">mouseUpHandler</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, mouseMoveHandler);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;mouseup&#x27;</span>, mouseUpHandler);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, mouseMoveHandler);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseup&#x27;</span>, mouseUpHandler);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="渲染单张DICOM数据的核心代码"><a href="#渲染单张DICOM数据的核心代码" class="headerlink" title="渲染单张DICOM数据的核心代码"></a>渲染单张DICOM数据的核心代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cornerstone.<span class="title function_">loadImage</span>(imageId).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">image</span>) &#123;</span><br><span class="line">      cornerstone.<span class="title function_">displayImage</span>(element, image);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure>

<p>其中 exampleImageIdLoader.js 为自定义Loader</p>
<h2 id="cornerstone-源码解析"><a href="#cornerstone-源码解析" class="headerlink" title="cornerstone 源码解析"></a>cornerstone 源码解析</h2><p>显示图片的核心方法又2个</p>
<ul>
<li>loadImage</li>
<li>displayImage</li>
</ul>
<h3 id="1-loadImage"><a href="#1-loadImage" class="headerlink" title="1 loadImage"></a>1 loadImage</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Loads an image given an imageId and optional priority and returns a promise which will resolve to</span></span><br><span class="line"><span class="comment"> * the loaded image object or fail if an error occurred.  The loaded image is not stored in the cache.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; imageId A Cornerstone Image Object&#x27;s imageId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; [options] Options to be passed to the Image Loader</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">ImageLoadObject</span>&#125; An Object which can be used to act after an image is loaded or loading fails</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@memberof</span> <span class="variable">ImageLoader</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">loadImage</span> (imageId, options) &#123;</span><br><span class="line">  <span class="keyword">if</span> (imageId === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;loadImage: parameter imageId must not be undefined&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> imageLoadObject = <span class="title function_">getImageLoadObject</span>(imageId);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (imageLoadObject !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> imageLoadObject.<span class="property">promise</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">loadImageFromImageLoader</span>(imageId, options).<span class="property">promise</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>加载一个给定 imageId 和 选项 的图像，并返回一个promise，该promise将解析到加载的图像object，或者在发生错误时失败。</p>
<p>加载的图像不存储在缓存中。</p>
<p><strong>getImageLoadObject</strong> 该方法，返回的是缓存中的图片。所以来看 <strong>loadImageFromImageLoader</strong> 方法</p>
<h4 id="1-1-loadImageFromImageLoader"><a href="#1-1-loadImageFromImageLoader" class="headerlink" title="1.1 loadImageFromImageLoader"></a>1.1 loadImageFromImageLoader</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Load an image using a registered Cornerstone Image Loader.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The image loader that is used will be</span></span><br><span class="line"><span class="comment"> * determined by the image loader scheme matching against the imageId.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; imageId A Cornerstone Image Object&#x27;s imageId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; [options] Options to be passed to the Image Loader</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">ImageLoadObject</span>&#125; An Object which can be used to act after an image is loaded or loading fails</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@memberof</span> <span class="variable">ImageLoader</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadImageFromImageLoader</span> (imageId, options) &#123;</span><br><span class="line">  <span class="keyword">const</span> colonIndex = imageId.<span class="title function_">indexOf</span>(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> scheme = imageId.<span class="title function_">substring</span>(<span class="number">0</span>, colonIndex);</span><br><span class="line">  <span class="keyword">const</span> loader = imageLoaders[scheme];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (loader === <span class="literal">undefined</span> || loader === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (unknownImageLoader !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">unknownImageLoader</span>(imageId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;loadImageFromImageLoader: no image loader for imageId&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> imageLoadObject = <span class="title function_">loader</span>(imageId, options);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Broadcast an image loaded event once the image is loaded</span></span><br><span class="line">  imageLoadObject.<span class="property">promise</span>.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">image</span>) &#123;</span><br><span class="line">    <span class="title function_">triggerEvent</span>(events, <span class="variable constant_">EVENTS</span>.<span class="property">IMAGE_LOADED</span>, &#123; image &#125;);</span><br><span class="line">  &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> errorObject = &#123;</span><br><span class="line">      imageId,</span><br><span class="line">      error</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">triggerEvent</span>(events, <span class="variable constant_">EVENTS</span>.<span class="property">IMAGE_LOAD_FAILED</span>, errorObject);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> imageLoadObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用注册的Cornerstone image Loader加载图像。</p>
<p><strong>本例中：</strong></p>
<p>const imageId = ‘example://1’;</p>
<p>此时 scheme =  “example”</p>
<p>加载的loader 为：imageLoaders[“example”]</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// register our imageLoader plugin with cornerstone</span></span><br><span class="line">    cs.<span class="title function_">registerImageLoader</span>(<span class="string">&#x27;example&#x27;</span>, getExampleImage);</span><br></pre></td></tr></table></figure>

<p>这个为自定义loader，已经注册在cornerstone中。</p>
<p><strong>图片加载过程</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getExampleImage</span>(<span class="params">imageId</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> width = <span class="number">256</span>;</span><br><span class="line">        <span class="keyword">const</span> height = <span class="number">256</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">getPixelData</span> () &#123;</span><br><span class="line">            <span class="keyword">if</span>(imageId === <span class="string">&#x27;example://1&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> image1PixelData;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (imageId === <span class="string">&#x27;example://2&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> image2PixelData;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> <span class="string">&quot;unknown imageId&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> image = &#123;</span><br><span class="line">            <span class="attr">imageId</span>: imageId,</span><br><span class="line">            minPixelValue : <span class="number">0</span>,</span><br><span class="line">            maxPixelValue : <span class="number">257</span>,</span><br><span class="line">            <span class="attr">slope</span>: <span class="number">1.0</span>,</span><br><span class="line">            <span class="attr">intercept</span>: <span class="number">0</span>,</span><br><span class="line">            windowCenter : <span class="number">127</span>,</span><br><span class="line">            windowWidth : <span class="number">256</span>,</span><br><span class="line">            <span class="attr">getPixelData</span>: getPixelData,</span><br><span class="line">            <span class="attr">rows</span>: height,</span><br><span class="line">            <span class="attr">columns</span>: width,</span><br><span class="line">            <span class="attr">height</span>: height,</span><br><span class="line">            <span class="attr">width</span>: width,</span><br><span class="line">            <span class="attr">color</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">columnPixelSpacing</span>: <span class="number">.8984375</span>,</span><br><span class="line">            <span class="attr">rowPixelSpacing</span>: <span class="number">.8984375</span>,</span><br><span class="line">            <span class="attr">sizeInBytes</span>: width * height * <span class="number">2</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">promise</span>: <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="title function_">resolve</span>(image);</span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="attr">cancelFn</span>: <span class="literal">undefined</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p><strong>核心</strong></p>
<p>主要想要得到的东西就是 image object</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> image = &#123;</span><br><span class="line">    <span class="attr">imageId</span>: imageId,</span><br><span class="line">    minPixelValue : <span class="number">0</span>,</span><br><span class="line">    maxPixelValue : <span class="number">257</span>,</span><br><span class="line">    <span class="attr">slope</span>: <span class="number">1.0</span>,</span><br><span class="line">    <span class="attr">intercept</span>: <span class="number">0</span>,</span><br><span class="line">    windowCenter : <span class="number">127</span>,</span><br><span class="line">    windowWidth : <span class="number">256</span>,</span><br><span class="line">    <span class="attr">getPixelData</span>: getPixelData,</span><br><span class="line">    <span class="attr">rows</span>: height,</span><br><span class="line">    <span class="attr">columns</span>: width,</span><br><span class="line">    <span class="attr">height</span>: height,</span><br><span class="line">    <span class="attr">width</span>: width,</span><br><span class="line">    <span class="attr">color</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">columnPixelSpacing</span>: <span class="number">.8984375</span>,</span><br><span class="line">    <span class="attr">rowPixelSpacing</span>: <span class="number">.8984375</span>,</span><br><span class="line">    <span class="attr">sizeInBytes</span>: width * height * <span class="number">2</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="2-displayImage"><a href="#2-displayImage" class="headerlink" title="2 displayImage"></a>2 displayImage</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sets a new image object for a given element.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Will also apply an optional viewport setting.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">HTMLElement</span>&#125; element An HTML Element enabled for Cornerstone</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; image An Image loaded by a Cornerstone Image Loader</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; [viewport] A set of Cornerstone viewport parameters</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@memberof</span> <span class="variable">Drawing</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params">element, image, viewport</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (element === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;displayImage: parameter element must not be undefined&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (image === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;displayImage: parameter image must not be undefined&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> enabledElement = <span class="title function_">getEnabledElement</span>(element);</span><br><span class="line">  <span class="keyword">const</span> oldImage = enabledElement.<span class="property">image</span>;</span><br><span class="line"></span><br><span class="line">  enabledElement.<span class="property">image</span> = image;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (enabledElement.<span class="property">layers</span> &amp;&amp; enabledElement.<span class="property">layers</span>.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="title function_">setLayerImage</span>(element, image);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (enabledElement.<span class="property">viewport</span> === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    enabledElement.<span class="property">viewport</span> = <span class="title function_">getDefaultViewport</span>(enabledElement.<span class="property">canvas</span>, image);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Merge viewport</span></span><br><span class="line">  <span class="keyword">if</span> (viewport) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> attrname <span class="keyword">in</span> viewport) &#123;</span><br><span class="line">      <span class="keyword">if</span> (viewport[attrname] !== <span class="literal">null</span>) &#123;</span><br><span class="line">        enabledElement.<span class="property">viewport</span>[attrname] = viewport[attrname];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> frameRate;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (enabledElement.<span class="property">lastImageTimeStamp</span> !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> timeSinceLastImage = <span class="title function_">now</span>() - enabledElement.<span class="property">lastImageTimeStamp</span>;</span><br><span class="line"></span><br><span class="line">    frameRate = (<span class="number">1000</span> / timeSinceLastImage).<span class="title function_">toFixed</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  enabledElement.<span class="property">lastImageTimeStamp</span> = <span class="title function_">now</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> newImageEventData = &#123;</span><br><span class="line">    <span class="attr">viewport</span>: enabledElement.<span class="property">viewport</span>,</span><br><span class="line">    <span class="attr">element</span>: enabledElement.<span class="property">element</span>,</span><br><span class="line">    <span class="attr">image</span>: enabledElement.<span class="property">image</span>,</span><br><span class="line">    oldImage,</span><br><span class="line">    enabledElement,</span><br><span class="line">    frameRate</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">triggerEvent</span>(enabledElement.<span class="property">element</span>, <span class="variable constant_">EVENTS</span>.<span class="property">NEW_IMAGE</span>, newImageEventData);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">updateImage</span>(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>为给定元素设置一个新的图像对象。</p>
<h4 id="2-1-核心方法-updateImage"><a href="#2-1-核心方法-updateImage" class="headerlink" title="2.1 核心方法 updateImage"></a>2.1 核心方法 updateImage</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Forces the image to be updated/redrawn for the specified enabled element</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">HTMLElement</span>&#125; element An HTML Element enabled for Cornerstone</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Boolean</span>&#125; [invalidated=false] Whether or not the image pixel data has been changed, necessitating a redraw</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@memberof</span> <span class="variable">Drawing</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params">element, invalidated = <span class="literal">false</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> enabledElement = <span class="title function_">getEnabledElement</span>(element);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (enabledElement.<span class="property">image</span> === <span class="literal">undefined</span> &amp;&amp; !enabledElement.<span class="property">layers</span>.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;updateImage: image has not been loaded yet&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">drawImage</span>(enabledElement, invalidated);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>强制更新/重绘指定启用元素的图像</p>
<h5 id="2-1-1-drawImage"><a href="#2-1-1-drawImage" class="headerlink" title="2.1.1 drawImage"></a>2.1.1 drawImage</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Internal API function to draw an image to a given enabled element</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">EnabledElement</span>&#125; enabledElement The Cornerstone Enabled Element to redraw</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Boolean</span>&#125; [invalidated = false] - true if pixel data has been invalidated and cached rendering should not be used</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@memberof</span> <span class="variable">Internal</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params">enabledElement, invalidated = <span class="literal">false</span></span>) &#123;</span><br><span class="line">  enabledElement.<span class="property">needsRedraw</span> = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">if</span> (invalidated) &#123;</span><br><span class="line">    enabledElement.<span class="property">invalid</span> = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>内部API函数，用于向给定的启用元素绘制图像</p>
<p><strong>enable.js</strong></p>
<p>needsRedraw 改变后，在渲染循环中触发重新渲染</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (enabledElement.<span class="property">needsRedraw</span> &amp;&amp; <span class="title function_">hasImageOrLayers</span>(enabledElement)) &#123;</span><br><span class="line">  <span class="title function_">drawImageSync</span>(enabledElement, enabledElement.<span class="property">invalid</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="2-1-2-drawImageSync"><a href="#2-1-2-drawImageSync" class="headerlink" title="2.1.2 drawImageSync"></a>2.1.2 drawImageSync</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Draw an image to a given enabled element synchronously</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">EnabledElement</span>&#125; enabledElement An enabled element to draw into</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Boolean</span>&#125; <span class="variable">invalidated</span> - true if pixel data has been invalidated and cached rendering should not be used</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@memberof</span> <span class="variable">Internal</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params">enabledElement, invalidated</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> image = enabledElement.<span class="property">image</span>;</span><br><span class="line">  <span class="keyword">const</span> element = enabledElement.<span class="property">element</span>;</span><br><span class="line">  <span class="keyword">const</span> layers = enabledElement.<span class="property">layers</span> || [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Check if enabledElement can be redrawn</span></span><br><span class="line">  <span class="keyword">if</span> (!enabledElement.<span class="property">canvas</span> || !(enabledElement.<span class="property">image</span> || layers.<span class="property">length</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Start measuring the time needed to draw the image/layers</span></span><br><span class="line">  <span class="keyword">const</span> start = <span class="title function_">now</span>();</span><br><span class="line"></span><br><span class="line">  image.<span class="property">stats</span> = &#123;</span><br><span class="line">    <span class="attr">lastGetPixelDataTime</span>: -<span class="number">1.0</span>,</span><br><span class="line">    <span class="attr">lastStoredPixelDataToCanvasImageDataTime</span>: -<span class="number">1.0</span>,</span><br><span class="line">    <span class="attr">lastPutImageDataTime</span>: -<span class="number">1.0</span>,</span><br><span class="line">    <span class="attr">lastRenderTime</span>: -<span class="number">1.0</span>,</span><br><span class="line">    <span class="attr">lastLutGenerateTime</span>: -<span class="number">1.0</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (layers &amp;&amp; layers.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="title function_">drawCompositeImage</span>(enabledElement, invalidated);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (image) &#123;</span><br><span class="line">    <span class="keyword">let</span> render = image.<span class="property">render</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!render) &#123;</span><br><span class="line">      <span class="keyword">if</span> (enabledElement.<span class="property">viewport</span>.<span class="property">colormap</span> &amp;&amp;</span><br><span class="line">          enabledElement.<span class="property">viewport</span>.<span class="property">colormap</span> !== <span class="string">&#x27;&#x27;</span> &amp;&amp;</span><br><span class="line">          enabledElement.<span class="property">image</span>.<span class="property">labelmap</span> === <span class="literal">true</span>) &#123;</span><br><span class="line">        render = renderLabelMapImage;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (enabledElement.<span class="property">viewport</span>.<span class="property">colormap</span> &amp;&amp; enabledElement.<span class="property">viewport</span>.<span class="property">colormap</span> !== <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">        render = renderPseudoColorImage;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (image.<span class="property">color</span>) &#123;</span><br><span class="line">        render = renderColorImage;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        render = renderGrayscaleImage;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(enabledElement, invalidated);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Calculate how long it took to draw the image/layers</span></span><br><span class="line">  <span class="keyword">const</span> renderTimeInMs = <span class="title function_">now</span>() - start;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> eventData = &#123;</span><br><span class="line">    <span class="attr">viewport</span>: enabledElement.<span class="property">viewport</span>,</span><br><span class="line">    element,</span><br><span class="line">    image,</span><br><span class="line">    enabledElement,</span><br><span class="line">    <span class="attr">canvasContext</span>: enabledElement.<span class="property">canvas</span>.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>),</span><br><span class="line">    renderTimeInMs</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  image.<span class="property">stats</span>.<span class="property">lastRenderTime</span> = renderTimeInMs;</span><br><span class="line"></span><br><span class="line">  enabledElement.<span class="property">invalid</span> = <span class="literal">false</span>;</span><br><span class="line">  enabledElement.<span class="property">needsRedraw</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">triggerEvent</span>(element, <span class="variable constant_">EVENTS</span>.<span class="property">IMAGE_RENDERED</span>, eventData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>同步绘制图像 到 给定的启用元素</p>
<h5 id="2-1-3-renderGrayscaleImage-渲染灰度图"><a href="#2-1-3-renderGrayscaleImage-渲染灰度图" class="headerlink" title="2.1.3 renderGrayscaleImage 渲染灰度图"></a>2.1.3 renderGrayscaleImage 渲染灰度图</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * API function to draw a grayscale image to a given enabledElement</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">EnabledElement</span>&#125; enabledElement The Cornerstone Enabled Element to redraw</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Boolean</span>&#125; <span class="variable">invalidated</span> - true if pixel data has been invalidated and cached rendering should not be used</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@memberof</span> <span class="variable">rendering</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">renderGrayscaleImage</span> (enabledElement, invalidated) &#123;</span><br><span class="line">  <span class="keyword">if</span> (enabledElement === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;drawImage: enabledElement parameter must not be undefined&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> image = enabledElement.<span class="property">image</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (image === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;drawImage: image must be loaded before it can be drawn&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get the canvas context and reset the transform</span></span><br><span class="line">  <span class="keyword">const</span> context = enabledElement.<span class="property">canvas</span>.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  context.<span class="title function_">setTransform</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Clear the canvas</span></span><br><span class="line">  context.<span class="property">fillStyle</span> = <span class="string">&#x27;black&#x27;</span>;</span><br><span class="line">  context.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, enabledElement.<span class="property">canvas</span>.<span class="property">width</span>, enabledElement.<span class="property">canvas</span>.<span class="property">height</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Turn off image smooth/interpolation if pixelReplication is set in the viewport</span></span><br><span class="line">  context.<span class="property">imageSmoothingEnabled</span> = !enabledElement.<span class="property">viewport</span>.<span class="property">pixelReplication</span>;</span><br><span class="line">  context.<span class="property">mozImageSmoothingEnabled</span> = context.<span class="property">imageSmoothingEnabled</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Save the canvas context state and apply the viewport properties</span></span><br><span class="line">  <span class="title function_">setToPixelCoordinateSystem</span>(enabledElement, context);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> renderCanvas;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (enabledElement.<span class="property">options</span> &amp;&amp; enabledElement.<span class="property">options</span>.<span class="property">renderer</span> &amp;&amp;</span><br><span class="line">    enabledElement.<span class="property">options</span>.<span class="property">renderer</span>.<span class="title function_">toLowerCase</span>() === <span class="string">&#x27;webgl&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// If this enabled element has the option set for WebGL, we should</span></span><br><span class="line">    <span class="comment">// User it as our renderer.</span></span><br><span class="line">    renderCanvas = webGL.<span class="property">renderer</span>.<span class="title function_">render</span>(enabledElement);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// If no options are set we will retrieve the renderCanvas through the</span></span><br><span class="line">    <span class="comment">// Normal Canvas rendering path</span></span><br><span class="line">    renderCanvas = <span class="title function_">getRenderCanvas</span>(enabledElement, image, invalidated);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> sx = enabledElement.<span class="property">viewport</span>.<span class="property">displayedArea</span>.<span class="property">tlhc</span>.<span class="property">x</span> - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> sy = enabledElement.<span class="property">viewport</span>.<span class="property">displayedArea</span>.<span class="property">tlhc</span>.<span class="property">y</span> - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> width = enabledElement.<span class="property">viewport</span>.<span class="property">displayedArea</span>.<span class="property">brhc</span>.<span class="property">x</span> - sx;</span><br><span class="line">  <span class="keyword">const</span> height = enabledElement.<span class="property">viewport</span>.<span class="property">displayedArea</span>.<span class="property">brhc</span>.<span class="property">y</span> - sy;</span><br><span class="line"></span><br><span class="line">  context.<span class="title function_">drawImage</span>(renderCanvas, sx, sy, width, height, <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line"></span><br><span class="line">  enabledElement.<span class="property">renderingTools</span> = <span class="title function_">saveLastRendered</span>(enabledElement);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>API函数，用于绘制给定 enable element 的灰度图像</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">context.<span class="title function_">drawImage</span>(renderCanvas, sx, sy, width, height, <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br></pre></td></tr></table></figure>

<p><strong>CanvasRenderingContext2D.drawImage()</strong></p>
<p>语法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> ctx.<span class="title function_">drawImage</span>(image, dx, dy);</span><br><span class="line"><span class="keyword">void</span> ctx.<span class="title function_">drawImage</span>(image, dx, dy, dWidth, dHeight);</span><br><span class="line"><span class="keyword">void</span> ctx.<span class="title function_">drawImage</span>(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);</span><br></pre></td></tr></table></figure>

<p>参考： <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage">https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage</a></p>
<h5 id="2-1-4-getRenderCanvas-获取渲染canvas"><a href="#2-1-4-getRenderCanvas-获取渲染canvas" class="headerlink" title="2.1.4 getRenderCanvas 获取渲染canvas"></a>2.1.4 getRenderCanvas 获取渲染canvas</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns an appropriate canvas to render the Image. If the canvas available in the cache is appropriate</span></span><br><span class="line"><span class="comment"> * it is returned, otherwise adjustments are made. It also sets the color transfer functions.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; enabledElement The cornerstone enabled element</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; image The image to be rendered</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Boolean</span>&#125; invalidated Is pixel data valid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Boolean</span>&#125; [useAlphaChannel = true] Will an alpha channel be used</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">HTMLCanvasElement</span>&#125; An appropriate canvas for rendering the image</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@memberof</span> <span class="variable">rendering</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getRenderCanvas</span> (enabledElement, image, invalidated, useAlphaChannel = <span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> canvasWasColor = enabledElement.<span class="property">renderingTools</span>.<span class="property">lastRenderedIsColor</span> === <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!enabledElement.<span class="property">renderingTools</span>.<span class="property">renderCanvas</span> || canvasWasColor) &#123;</span><br><span class="line">    enabledElement.<span class="property">renderingTools</span>.<span class="property">renderCanvas</span> = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line">    <span class="title function_">initializeRenderCanvas</span>(enabledElement, image);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> renderCanvas = enabledElement.<span class="property">renderingTools</span>.<span class="property">renderCanvas</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">doesImageNeedToBeRendered</span>(enabledElement, image) === <span class="literal">false</span> &amp;&amp; invalidated !== <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> renderCanvas;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If our render canvas does not match the size of this image reset it</span></span><br><span class="line">  <span class="comment">// <span class="doctag">NOTE:</span> This might be inefficient if we are updating multiple images of different</span></span><br><span class="line">  <span class="comment">// Sizes frequently.</span></span><br><span class="line">  <span class="keyword">if</span> (renderCanvas.<span class="property">width</span> !== image.<span class="property">width</span> || renderCanvas.<span class="property">height</span> !== image.<span class="property">height</span>) &#123;</span><br><span class="line">    <span class="title function_">initializeRenderCanvas</span>(enabledElement, image);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get the lut to use</span></span><br><span class="line">  <span class="keyword">let</span> start = <span class="title function_">now</span>();</span><br><span class="line">  <span class="keyword">const</span> lut = <span class="title function_">getLut</span>(image, enabledElement.<span class="property">viewport</span>, invalidated);</span><br><span class="line"></span><br><span class="line">  image.<span class="property">stats</span> = image.<span class="property">stats</span> || &#123;&#125;;</span><br><span class="line">  image.<span class="property">stats</span>.<span class="property">lastLutGenerateTime</span> = <span class="title function_">now</span>() - start;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> renderCanvasData = enabledElement.<span class="property">renderingTools</span>.<span class="property">renderCanvasData</span>;</span><br><span class="line">  <span class="keyword">const</span> renderCanvasContext = enabledElement.<span class="property">renderingTools</span>.<span class="property">renderCanvasContext</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Gray scale image - apply the lut and put the resulting image onto the render canvas</span></span><br><span class="line">  <span class="keyword">if</span> (useAlphaChannel) &#123;</span><br><span class="line">    <span class="title function_">storedPixelDataToCanvasImageData</span>(image, lut, renderCanvasData.<span class="property">data</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">storedPixelDataToCanvasImageDataRGBA</span>(image, lut, renderCanvasData.<span class="property">data</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  start = <span class="title function_">now</span>();</span><br><span class="line">  renderCanvasContext.<span class="title function_">putImageData</span>(renderCanvasData, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  image.<span class="property">stats</span>.<span class="property">lastPutImageDataTime</span> = <span class="title function_">now</span>() - start;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> renderCanvas;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回一个适当的 canvas 来渲染图像。如果缓存中可用的 canvas 合适</p>
<p>返回该值，否则将进行调整。它还设置了 色彩转换方程。</p>
<h5 id="2-1-5-（核心！）storedPixelDataToCanvasImageDataRGBA"><a href="#2-1-5-（核心！）storedPixelDataToCanvasImageDataRGBA" class="headerlink" title="2.1.5 （核心！）storedPixelDataToCanvasImageDataRGBA"></a>2.1.5 （核心！）storedPixelDataToCanvasImageDataRGBA</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This function transforms stored pixel values into a canvas image data buffer</span></span><br><span class="line"><span class="comment"> * by using a LUT.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Image</span>&#125; image A Cornerstone Image Object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Array</span>&#125; lut Lookup table array</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Uint8ClampedArray</span>&#125; canvasImageDataData canvasImageData.data buffer filled with white pixels</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@memberof</span> <span class="variable">Internal</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params">image, lut, canvasImageDataData</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> start = <span class="title function_">now</span>();</span><br><span class="line">  <span class="keyword">const</span> pixelData = image.<span class="title function_">getPixelData</span>();</span><br><span class="line"></span><br><span class="line">  image.<span class="property">stats</span>.<span class="property">lastGetPixelDataTime</span> = <span class="title function_">now</span>() - start;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> numPixels = pixelData.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">const</span> minPixelValue = image.<span class="property">minPixelValue</span>;</span><br><span class="line">  <span class="keyword">let</span> canvasImageDataIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> storedPixelDataIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> pixelValue;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// <span class="doctag">NOTE:</span> As of Nov 2014, most javascript engines have lower performance when indexing negative indexes.</span></span><br><span class="line">  <span class="comment">// We have a special code path for this case that improves performance.  Thanks to @jpambrun for this enhancement</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Added two paths (Int16Array, Uint16Array) to avoid polymorphic deoptimization in chrome.</span></span><br><span class="line">  start = <span class="title function_">now</span>();</span><br><span class="line">  <span class="keyword">if</span> (pixelData <span class="keyword">instanceof</span> <span class="title class_">Int16Array</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (minPixelValue &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">while</span> (storedPixelDataIndex &lt; numPixels) &#123;</span><br><span class="line">        pixelValue = lut[pixelData[storedPixelDataIndex++] + (-minPixelValue)];</span><br><span class="line">        canvasImageDataData[canvasImageDataIndex++] = pixelValue;</span><br><span class="line">        canvasImageDataData[canvasImageDataIndex++] = pixelValue;</span><br><span class="line">        canvasImageDataData[canvasImageDataIndex++] = pixelValue;</span><br><span class="line">        canvasImageDataData[canvasImageDataIndex++] = <span class="number">255</span>; <span class="comment">// Alpha</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">while</span> (storedPixelDataIndex &lt; numPixels) &#123;</span><br><span class="line">        pixelValue = lut[pixelData[storedPixelDataIndex++]];</span><br><span class="line">        canvasImageDataData[canvasImageDataIndex++] = pixelValue;</span><br><span class="line">        canvasImageDataData[canvasImageDataIndex++] = pixelValue;</span><br><span class="line">        canvasImageDataData[canvasImageDataIndex++] = pixelValue;</span><br><span class="line">        canvasImageDataData[canvasImageDataIndex++] = <span class="number">255</span>; <span class="comment">// Alpha</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pixelData <span class="keyword">instanceof</span> <span class="title class_">Uint16Array</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (storedPixelDataIndex &lt; numPixels) &#123;</span><br><span class="line">      pixelValue = lut[pixelData[storedPixelDataIndex++]];</span><br><span class="line">      canvasImageDataData[canvasImageDataIndex++] = pixelValue;</span><br><span class="line">      canvasImageDataData[canvasImageDataIndex++] = pixelValue;</span><br><span class="line">      canvasImageDataData[canvasImageDataIndex++] = pixelValue;</span><br><span class="line">      canvasImageDataData[canvasImageDataIndex++] = <span class="number">255</span>; <span class="comment">// Alpha</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (minPixelValue &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (storedPixelDataIndex &lt; numPixels) &#123;</span><br><span class="line">      pixelValue = lut[pixelData[storedPixelDataIndex++] + (-minPixelValue)];</span><br><span class="line">      canvasImageDataData[canvasImageDataIndex++] = pixelValue;</span><br><span class="line">      canvasImageDataData[canvasImageDataIndex++] = pixelValue;</span><br><span class="line">      canvasImageDataData[canvasImageDataIndex++] = pixelValue;</span><br><span class="line">      canvasImageDataData[canvasImageDataIndex++] = <span class="number">255</span>; <span class="comment">// Alpha</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (storedPixelDataIndex &lt; numPixels) &#123;</span><br><span class="line">      pixelValue = lut[pixelData[storedPixelDataIndex++]];</span><br><span class="line">      canvasImageDataData[canvasImageDataIndex++] = pixelValue;</span><br><span class="line">      canvasImageDataData[canvasImageDataIndex++] = pixelValue;</span><br><span class="line">      canvasImageDataData[canvasImageDataIndex++] = pixelValue;</span><br><span class="line">      canvasImageDataData[canvasImageDataIndex++] = <span class="number">255</span>; <span class="comment">// Alpha</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  image.<span class="property">stats</span>.<span class="property">lastStoredPixelDataToCanvasImageDataTime</span> = <span class="title function_">now</span>() - start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个函数将存储的 像素值 转换 为画布图像数据缓冲区</p>
<p>这个地方就是将uint16 或者 int16的数据转换成 0-255 范围内的数据，即生成一张可以被显示的图片。</p>
<p>我们观察到，这段代码中，把每个像素点的Alpha通道写成255，另外的RGB通道统一写成 pixelvalue。</p>
<p><strong>这个 pixelvalue 是通过 lut 这个数组来获取到，lut这个数组是之前写在缓存中的一个数组，相比每次去计算像素值，这样做大大提高了程序的执行效率。</strong></p>
<p>这里有一段作者写的注释，翻译过来是：</p>
<p>注:截至2014年11月，大多数javascript引擎在 索引 负索引 时性能较低。</p>
<p>对于这种情况，我们有一个特殊的代码路径来提高性能。感谢@jpambrun提供的这种增强</p>
<p>增加了两个路径(Int16Array, Uint16Array)，以避免在chrome的多态反优化。</p>
<h3 id="3-生成lut-数组"><a href="#3-生成lut-数组" class="headerlink" title="3 生成lut 数组"></a>3 生成lut 数组</h3><p>在 <strong>getRenderCanvas</strong> 方法中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Get the lut to use</span></span><br><span class="line">  <span class="keyword">let</span> start = <span class="title function_">now</span>();</span><br><span class="line">  <span class="keyword">const</span> lut = <span class="title function_">getLut</span>(image, enabledElement.<span class="property">viewport</span>, invalidated);</span><br></pre></td></tr></table></figure>



<h4 id="3-1-getLut"><a href="#3-1-getLut" class="headerlink" title="3.1 getLut"></a>3.1 getLut</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Retrieve or generate a LUT Array for an Image and Viewport</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Image</span>&#125; image An Image Object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Viewport</span>&#125; viewport An Viewport Object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Boolean</span>&#125; invalidated Whether or not the LUT data has been invalidated</span></span><br><span class="line"><span class="comment"> * (e.g. by a change to the windowWidth, windowCenter, or invert viewport parameters).</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">Uint8ClampedArray</span>&#125; LUT Array</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@memberof</span> <span class="variable">rendering</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params">image, viewport, invalidated</span>) &#123;</span><br><span class="line">  <span class="comment">// If we have a cached lut and it has the right values, return it immediately</span></span><br><span class="line">  <span class="keyword">if</span> (image.<span class="property">cachedLut</span> !== <span class="literal">undefined</span> &amp;&amp;</span><br><span class="line">    image.<span class="property">cachedLut</span>.<span class="property">windowCenter</span> === viewport.<span class="property">voi</span>.<span class="property">windowCenter</span> &amp;&amp;</span><br><span class="line">    image.<span class="property">cachedLut</span>.<span class="property">windowWidth</span> === viewport.<span class="property">voi</span>.<span class="property">windowWidth</span> &amp;&amp;</span><br><span class="line">    <span class="title function_">lutMatches</span>(image.<span class="property">cachedLut</span>.<span class="property">modalityLUT</span>, viewport.<span class="property">modalityLUT</span>) &amp;&amp;</span><br><span class="line">    <span class="title function_">lutMatches</span>(image.<span class="property">cachedLut</span>.<span class="property">voiLUT</span>, viewport.<span class="property">voiLUT</span>) &amp;&amp;</span><br><span class="line">    image.<span class="property">cachedLut</span>.<span class="property">invert</span> === viewport.<span class="property">invert</span> &amp;&amp;</span><br><span class="line">    invalidated !== <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> image.<span class="property">cachedLut</span>.<span class="property">lutArray</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">computeAutoVoi</span>(viewport, image);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Lut is invalid or not present, regenerate it and cache it</span></span><br><span class="line">  <span class="title function_">generateLut</span>(image, viewport.<span class="property">voi</span>.<span class="property">windowWidth</span>, viewport.<span class="property">voi</span>.<span class="property">windowCenter</span>, viewport.<span class="property">invert</span>, viewport.<span class="property">modalityLUT</span>, viewport.<span class="property">voiLUT</span>);</span><br><span class="line"></span><br><span class="line">  image.<span class="property">cachedLut</span>.<span class="property">windowWidth</span> = viewport.<span class="property">voi</span>.<span class="property">windowWidth</span>;</span><br><span class="line">  image.<span class="property">cachedLut</span>.<span class="property">windowCenter</span> = viewport.<span class="property">voi</span>.<span class="property">windowCenter</span>;</span><br><span class="line">  image.<span class="property">cachedLut</span>.<span class="property">invert</span> = viewport.<span class="property">invert</span>;</span><br><span class="line">  image.<span class="property">cachedLut</span>.<span class="property">voiLUT</span> = viewport.<span class="property">voiLUT</span>;</span><br><span class="line">  image.<span class="property">cachedLut</span>.<span class="property">modalityLUT</span> = viewport.<span class="property">modalityLUT</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> image.<span class="property">cachedLut</span>.<span class="property">lutArray</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>检索或生成 图像 和 Viewport 的LUT数组</p>
<p><strong>computeAutoVoi</strong> 这个方法用来生成 窗宽 和 窗位</p>
<h4 id="3-2-（核心！）generateLut"><a href="#3-2-（核心！）generateLut" class="headerlink" title="3.2 （核心！）generateLut"></a>3.2 （核心！）generateLut</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a LUT used while rendering to convert stored pixel values to</span></span><br><span class="line"><span class="comment"> * display pixels</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Image</span>&#125; image A Cornerstone Image Object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Number</span>&#125; windowWidth The Window Width</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Number</span>&#125; windowCenter The Window Center</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Boolean</span>&#125; invert A boolean describing whether or not the image has been inverted</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Array</span>&#125; [modalityLUT] A modality Lookup Table</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Array</span>&#125; [voiLUT] A Volume of Interest Lookup Table</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">Uint8ClampedArray</span>&#125; A lookup table to apply to the image</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@memberof</span> <span class="variable">Internal</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params">image, windowWidth, windowCenter, invert, modalityLUT, voiLUT</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> maxPixelValue = image.<span class="property">maxPixelValue</span>;</span><br><span class="line">  <span class="keyword">const</span> minPixelValue = image.<span class="property">minPixelValue</span>;</span><br><span class="line">  <span class="keyword">const</span> offset = <span class="title class_">Math</span>.<span class="title function_">min</span>(minPixelValue, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (image.<span class="property">cachedLut</span> === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> length = maxPixelValue - offset + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    image.<span class="property">cachedLut</span> = &#123;&#125;;</span><br><span class="line">    image.<span class="property">cachedLut</span>.<span class="property">lutArray</span> = <span class="keyword">new</span> <span class="title class_">Uint8ClampedArray</span>(length);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> lut = image.<span class="property">cachedLut</span>.<span class="property">lutArray</span>;</span><br><span class="line">  <span class="keyword">const</span> mlutfn = <span class="title function_">getModalityLUT</span>(image.<span class="property">slope</span>, image.<span class="property">intercept</span>, modalityLUT);</span><br><span class="line">  <span class="keyword">const</span> vlutfn = <span class="title function_">getVOILUT</span>(windowWidth, windowCenter, voiLUT);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (invert === <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> storedValue = minPixelValue; storedValue &lt;= maxPixelValue; storedValue++) &#123;</span><br><span class="line">      lut[storedValue + (-offset)] = <span class="number">255</span> - <span class="title function_">vlutfn</span>(<span class="title function_">mlutfn</span>(storedValue));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> storedValue = minPixelValue; storedValue &lt;= maxPixelValue; storedValue++) &#123;</span><br><span class="line">      lut[storedValue + (-offset)] = <span class="title function_">vlutfn</span>(<span class="title function_">mlutfn</span>(storedValue));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> lut;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从最小的像素一直循环到最大的像素，生成一个映射表LUT</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总而言之，在cornerstone中，为了优化生成图片的生成速度，建立一个数据值对应灰度值的映射表LUT，每次靠查表来获取像素的值。</p>
<p>未来的影像系统的版本考虑要在这个方向上进行优化。</p>
]]></content>
      <categories>
        <category>医学影像处理</category>
      </categories>
      <tags>
        <tag>医学影像处理</tag>
        <tag>前端</tag>
        <tag>vtk.js</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>rollup 使用整理 v1</title>
    <url>/2021-09-07-rollup-%E4%BD%BF%E7%94%A8%E6%95%B4%E7%90%86-v1/</url>
    <content><![CDATA[<p>Rollup是一个JavaScript的模块绑定器，它将一小段代码编译成更大更复杂的东西，比如库或应用程序。 </p>
<p>它使用了JavaScript ES6版本中包含的代码模块的新的标准化格式，而不是以前的特殊解决方案，如CommonJS和AMD。 </p>
<p>ES模块可以让您自由和无缝地组合来自您喜欢的库的最有用的单独函数。 </p>
<span id="more"></span>

<h2 id="官方网站"><a href="#官方网站" class="headerlink" title="官方网站"></a>官方网站</h2><p>文档：</p>
<p><a href="https://rollupjs.org/guide/en/">https://rollupjs.org/guide/en/</a></p>
<h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看帮助</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rollup --<span class="built_in">help</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用配置文件来编译</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-c, --config &lt;filename&gt;     Use this config file (<span class="keyword">if</span> argument is used but value</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                             is unspecified, defaults to rollup.config.js)</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rollup -c</span></span><br></pre></td></tr></table></figure>



<h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><ul>
<li><strong>rollup-plugin-typescript2</strong></li>
<li><strong>@rollup/plugin-node-resolve</strong></li>
<li><strong>rollup-plugin-postcss</strong></li>
<li><strong>rollup-plugin-terser</strong></li>
<li><strong>@rollup/plugin-commonjs</strong></li>
<li><strong>rollup-plugin-cleaner</strong></li>
<li><strong>rollup-plugin-string</strong></li>
</ul>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="最简化的配置文件-rollup-config-js"><a href="#最简化的配置文件-rollup-config-js" class="headerlink" title="最简化的配置文件 rollup.config.js"></a>最简化的配置文件 rollup.config.js</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">input</span>: <span class="string">&#x27;src/main.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">file</span>: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">    <span class="attr">format</span>: <span class="string">&#x27;cjs&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这里会生成 CommonJS  的代码</p>
<h3 id="所有的可配置项"><a href="#所有的可配置项" class="headerlink" title="所有的可配置项"></a>所有的可配置项</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// can be an array (for multiple inputs)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// core input options</span></span><br><span class="line">  external,</span><br><span class="line">  input, <span class="comment">// conditionally required</span></span><br><span class="line">  plugins,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// advanced input options</span></span><br><span class="line">  cache,</span><br><span class="line">  onwarn,</span><br><span class="line">  preserveEntrySignatures,</span><br><span class="line">  strictDeprecations,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// danger zone</span></span><br><span class="line">  acorn,</span><br><span class="line">  acornInjectPlugins,</span><br><span class="line">  context,</span><br><span class="line">  moduleContext,</span><br><span class="line">  preserveSymlinks,</span><br><span class="line">  shimMissingExports,</span><br><span class="line">  treeshake,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// experimental</span></span><br><span class="line">  experimentalCacheExpiry,</span><br><span class="line">  perf,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// required (can be an array, for multiple outputs)</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">// core output options</span></span><br><span class="line">    dir,</span><br><span class="line">    file,</span><br><span class="line">    format, <span class="comment">// required</span></span><br><span class="line">    globals,</span><br><span class="line">    name,</span><br><span class="line">    plugins,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// advanced output options</span></span><br><span class="line">    assetFileNames,</span><br><span class="line">    banner,</span><br><span class="line">    chunkFileNames,</span><br><span class="line">    compact,</span><br><span class="line">    entryFileNames,</span><br><span class="line">    extend,</span><br><span class="line">    footer,</span><br><span class="line">    hoistTransitiveImports,</span><br><span class="line">    inlineDynamicImports,</span><br><span class="line">    interop,</span><br><span class="line">    intro,</span><br><span class="line">    manualChunks,</span><br><span class="line">    minifyInternalExports,</span><br><span class="line">    outro,</span><br><span class="line">    paths,</span><br><span class="line">    preserveModules,</span><br><span class="line">    preserveModulesRoot,</span><br><span class="line">    sourcemap,</span><br><span class="line">    sourcemapExcludeSources,</span><br><span class="line">    sourcemapFile,</span><br><span class="line">    sourcemapPathTransform,</span><br><span class="line">    validate,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// danger zone</span></span><br><span class="line">    amd,</span><br><span class="line">    esModule,</span><br><span class="line">    <span class="built_in">exports</span>,</span><br><span class="line">    externalLiveBindings,</span><br><span class="line">    freeze,</span><br><span class="line">    indent,</span><br><span class="line">    namespaceToStringTag,</span><br><span class="line">    noConflict,</span><br><span class="line">    preferConst,</span><br><span class="line">    sanitizeFileName,</span><br><span class="line">    strict,</span><br><span class="line">    systemNullSetters</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    buildDelay,</span><br><span class="line">    chokidar,</span><br><span class="line">    clearScreen,</span><br><span class="line">    skipWrite,</span><br><span class="line">    exclude,</span><br><span class="line">    include</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="多配置文件"><a href="#多配置文件" class="headerlink" title="多配置文件"></a>多配置文件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> defaultConfig <span class="keyword">from</span> <span class="string">&#x27;./rollup.default.config.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> debugConfig <span class="keyword">from</span> <span class="string">&#x27;./rollup.debug.config.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> commandLineArgs =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (commandLineArgs.<span class="property">configDebug</span> === <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> debugConfig;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> defaultConfig;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>运行：</p>
<p>rollup –config –configDebug</p>
<p>debug configuration 会被使用</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>rollup</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode c++开发环境搭建记录</title>
    <url>/2021-09-09-vscode-c-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>​        最近感觉还是需要学习一下C++，之前虽然已经搭建了一个vscode的c++运行环境，但是当时的搭建过程都没有记录下来，现在已经不知道该怎么用了，所以现在重新写一个c++的搭建过程。</p>
<p>​        本文基本都是对知乎用户回答的整理和归纳，感谢 <a href="https://www.zhihu.com/people/tan-jiu-ding">谭九鼎</a></p>
<span id="more"></span>

<h2 id="step-1-GCC环境的准备"><a href="#step-1-GCC环境的准备" class="headerlink" title="step.1 GCC环境的准备"></a>step.1 GCC环境的准备</h2><h3 id="1-1-下载编译器"><a href="#1-1-下载编译器" class="headerlink" title="1.1 下载编译器"></a>1.1 下载编译器</h3><p>MinGW-w64 - for 32 and 64 bit Windows</p>
<p><a href="https://sourceforge.net/projects/mingw-w64/files/">https://sourceforge.net/projects/mingw-w64/files/</a></p>
<p>往下稍微翻一下，选最新版本中的x86_64-posix-seh。最好不要用 Download Latest Version。</p>
<blockquote>
<p>​        MinGW是gcc在Windows下的移植，gcc是世界上最流行的C/C++编译器组合。但gcc这个名字也指编译C语言的那个程序，g++才是C++编译器。即gcc程序和g++程序包含在gcc套件以及MinGW里，当只说gcc时要根据语境自己区分。</p>
<p>​        其实MinGW和MinGW-w64只是名字像，它们是两个不同的项目。为了方便，本文中的MinGW指的其实都是MinGW-w64。MinGW还活着，但只能产生32位程序。</p>
<p>​        现在MinGW-w64很久没有发布官方构建了，代码其实已经更新到了9.2.0，所以也可以考虑用基于它的TDM-GCC64。别下旧版，那是很久以前的，2020年发布了新版。</p>
</blockquote>
<p><strong>我选择的版本：</strong></p>
<p>x86_64-8.1.0-release-posix-seh-rt_v6-rev0</p>
<p><strong>解压的目录：</strong></p>
<p>C:\ENV\mingw64</p>
<p><strong>设置环境变量：</strong></p>
<p>C:\ENV\mingw64\bin</p>
<h3 id="1-2-验证是否成功"><a href="#1-2-验证是否成功" class="headerlink" title="1.2 验证是否成功"></a>1.2 验证是否成功</h3><p>按Win+R，运行cmd（不要跳这一步），输入gcc</p>
<p>输gcc -v可以显示出gcc的版本。</p>
<p><img src="/2021-09-09-vscode-c-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/image-20210909163320476.png" alt="cmd"></p>
<h2 id="step-2-配置vscode环境"><a href="#step-2-配置vscode环境" class="headerlink" title="step.2 配置vscode环境"></a>step.2 配置vscode环境</h2><h3 id="2-1-安装插件"><a href="#2-1-安装插件" class="headerlink" title="2.1 安装插件"></a>2.1 安装插件</h3><p><strong>必须安装的扩展</strong></p>
<ul>
<li>C/C++：又名 cpptools，提供Debug和Format功能</li>
<li>Code Runner：右键即可编译运行单文件，很方便；但无法Debug</li>
</ul>
<p><strong>其他可选扩展</strong></p>
<ul>
<li>Bracket Pair Colorizer 2：彩虹花括号</li>
<li>One Dark Pro：大概是VS Code安装量最高的主题</li>
</ul>
<p><strong>不建议/不需要装的扩展</strong></p>
<ul>
<li>GBKtoUTF8：把GBK编码的文档转换成UTF8编码的。此扩展很久没有更新了，也有严重的bug</li>
<li>C++ Intellisense：用的是gtags，效果不咋样</li>
<li>Include     Autocomplete：提供头文件名字的补全，现在cpptools和vscode-clangd都已经自带这个功能了</li>
<li>C/C++     Snippets：Snippets即重用代码块，效果自己百度；这个扩展安装量虽高，不过个人感觉用处实在不大，cpptools和clangd也自带一些；你也可以选择其他的Snippets扩展甚至自定义</li>
</ul>
<p><img src="/2021-09-09-vscode-c-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/image-20210909163728323.png" alt="插件"></p>
<h3 id="2-2-修改配置文件-launch-json"><a href="#2-2-修改配置文件-launch-json" class="headerlink" title="2.2 修改配置文件 launch.json"></a>2.2 修改配置文件 launch.json</h3><p><strong>参考链接：</strong></p>
<p><a href="https://code.visualstudio.com/docs/cpp/launch-json-reference">https://code.visualstudio.com/docs/cpp/launch-json-reference</a></p>
<p>externalConsole可根据自己喜好修改；</p>
<p>cwd 默认设置为 ${workspaceFolder} 可以是程序运行时的相对路径，如有需要可以改为${fileDirname}（感谢@xhx）；</p>
<p>type和request不变色是正常现象。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(gdb) Launch&quot;</span><span class="punctuation">,</span> <span class="comment">// 配置名称，将会在启动配置的下拉菜单中显示</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span> <span class="comment">// 配置类型，对于C/C++可认为此处只能是cppdbg，由cpptools提供；不同编程语言不同</span></span><br><span class="line">      <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span> <span class="comment">// 可以为launch（启动）或attach（附加）</span></span><br><span class="line">      <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span> <span class="comment">// 将要进行调试的程序的路径</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 程序调试时传递给程序的命令行参数，一般设为空</span></span><br><span class="line">      <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// 设为true时程序将暂停在程序入口处，相当于在main上打断点</span></span><br><span class="line">      <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span> <span class="comment">// 调试程序时的工作目录，此为工作区文件夹；改成$&#123;fileDirname&#125;可变为文件所在目录</span></span><br><span class="line">      <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 环境变量</span></span><br><span class="line">      <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 使用单独的cmd窗口，与其它IDE一致；为false时使用内置终端</span></span><br><span class="line">      <span class="attr">&quot;internalConsoleOptions&quot;</span><span class="punctuation">:</span> <span class="string">&quot;neverOpen&quot;</span><span class="punctuation">,</span> <span class="comment">// 如果不设为neverOpen，调试时会跳到“调试控制台”选项卡，你应该不需要对gdb手动输命令吧？</span></span><br><span class="line">      <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span> <span class="comment">// 指定连接的调试器，可以为gdb或lldb。但我没试过lldb</span></span><br><span class="line">      <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb.exe&quot;</span><span class="punctuation">,</span> <span class="comment">// 调试器路径，Windows下后缀不能省略，Linux下则不要</span></span><br><span class="line">      <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="comment">// 模板自带，好像可以更好地显示STL容器的内容，具体作用自行Google</span></span><br><span class="line">          <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Enable pretty-printing for gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Compile&quot;</span> <span class="comment">// 调试前执行的任务，一般为编译程序。与tasks.json的label相对应</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h3 id="2-3-修改配置文件-Tasks-json"><a href="#2-3-修改配置文件-Tasks-json" class="headerlink" title="2.3 修改配置文件 Tasks.json"></a>2.3 修改配置文件 Tasks.json</h3><p><strong>参考链接：</strong></p>
<p><a href="https://code.visualstudio.com/docs/editor/tasks">https://code.visualstudio.com/docs/editor/tasks</a></p>
<p>如果是**编写C++**，编译器需改成g++。</p>
<p>MinGW的-std=c++17好像有问题，最好至多到c++14，但好像默认用的就是合适的，c语言版本也超过了c11，所以就别加-std了。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Compile&quot;</span><span class="punctuation">,</span> <span class="comment">// 任务名称，与launch.json的preLaunchTask相对应</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;g++&quot;</span><span class="punctuation">,</span> <span class="comment">// 要使用的编译器，C++用g++</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span> <span class="comment">// 指定输出文件名，不加该参数则默认输出a.exe，Linux下默认a.out</span></span><br><span class="line">        <span class="string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span> <span class="comment">// 生成和调试有关的信息</span></span><br><span class="line">        <span class="string">&quot;-m64&quot;</span><span class="punctuation">,</span> <span class="comment">// 不知为何有时会生成16位程序而无法运行，此条可强制生成64位的</span></span><br><span class="line">        <span class="string">&quot;-Wall&quot;</span><span class="punctuation">,</span> <span class="comment">// 开启额外警告</span></span><br><span class="line">        <span class="string">&quot;-static-libgcc&quot;</span><span class="punctuation">,</span> <span class="comment">// 静态链接libgcc，一般都会加上</span></span><br><span class="line">        <span class="string">&quot;-fexec-charset=GBK&quot;</span><span class="punctuation">,</span> <span class="comment">// 生成的程序使用GBK编码，不加这条会导致Win下输出中文乱码；繁体系统改成BIG5</span></span><br><span class="line">        <span class="string">&quot;-D__USE_MINGW_ANSI_STDIO&quot;</span> <span class="comment">// 用MinGW写C时留着，否则不需要，用于支持printf的%zd和%Lf等</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 编译的命令，其实相当于VSC帮你在终端中输了这些东西</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;process&quot;</span><span class="punctuation">,</span> <span class="comment">// process是把预定义变量和转义解析后直接全部传给command；shell相当于先打开shell再输入命令，所以args还会经过shell再解析一遍</span></span><br><span class="line">      <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="comment">// 不为true时ctrl shift B就要手动选择了</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;presentation&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;echo&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;reveal&quot;</span><span class="punctuation">:</span> <span class="string">&quot;always&quot;</span><span class="punctuation">,</span> <span class="comment">// 执行任务时是否跳转到终端面板，可以为always，silent，never。具体参见VSC的文档，即使设为never，手动点进去还是可以看到</span></span><br><span class="line">        <span class="attr">&quot;focus&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// 设为true后可以使执行task时焦点聚集在终端，但对编译C/C++来说，设为true没有意义</span></span><br><span class="line">        <span class="attr">&quot;panel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shared&quot;</span> <span class="comment">// 不同的文件的编译信息共享一个终端面板</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$gcc&quot;</span> <span class="comment">// 捕捉编译时终端里的报错信息到问题面板中，修改代码后需要重新编译才会再次触发</span></span><br><span class="line">      <span class="comment">// 本来有Lint，再开problemMatcher就有双重报错，但MinGW的Lint效果实在太差了；用Clangd可以注释掉</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h3 id="2-4-修改配置文件-settings-json"><a href="#2-4-修改配置文件-settings-json" class="headerlink" title="2.4 修改配置文件 settings.json"></a>2.4 修改配置文件 settings.json</h3><p>把这个文件里的东西放到“用户设置”里可以覆盖全局设置，否则只在当前工作区才有效。这两点各有自己的优势。</p>
<p>Code Runner的命令行和某些选项可以根据自己的需要在此处修改，想自定义或者想知道是什么意思还是参见此扩展的文档和百度gcc使用教程。如果终端用的是cmd（<strong>Win7</strong>默认）需要改用注释掉的，或者把<code>terminal.integrated.shell.windows</code>改为PowerShell；Win10默认就是PS就不用改。</p>
<p>感谢 <a href="https://www.zhihu.com/people/e011194994d3415968b3886ade2b588c">@Wellin Boss</a> 提到的snippetSuggestions；不过用top有时还是有点问题的，所以改成可选。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// 编译器的配置</span></span><br><span class="line">  <span class="attr">&quot;files.defaultLanguage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span> <span class="comment">// ctrl+N新建文件后默认的语言</span></span><br><span class="line">  <span class="attr">&quot;editor.formatOnType&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 输入分号(C/C++的语句结束标识)后自动格式化当前这一行的代码</span></span><br><span class="line">  <span class="attr">&quot;editor.suggest.snippetsPreventQuickSuggestions&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// clangd的snippets有很多的跳转点，不用这个就必须手动触发Intellisense了</span></span><br><span class="line">  <span class="comment">// &quot;editor.acceptSuggestionOnEnter&quot;: &quot;off&quot;, // 我个人的习惯，按回车时一定是真正的换行，只有tab才会接受Intellisense</span></span><br><span class="line">  <span class="comment">// &quot;editor.snippetSuggestions&quot;: &quot;top&quot;, // （可选）snippets显示在补全列表顶端，默认是inline</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// &quot;terminal.integrated.shell.windows&quot;: &quot;PowerShell&quot;,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// code-runner 的配置：</span></span><br><span class="line">  <span class="attr">&quot;code-runner.runInTerminal&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 设置成false会在“输出”中输出，无法输入</span></span><br><span class="line">  <span class="attr">&quot;code-runner.executorMap&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// &quot;c&quot;: &quot;gcc &#x27;$fileName&#x27; -o &#x27;$fileNameWithoutExt.exe&#x27; -Wall -O2 -m64 -lm -static-libgcc -fexec-charset=GBK -D__USE_MINGW_ANSI_STDIO &amp;&amp; &amp;&#x27;./$fileNameWithoutExt.exe&#x27;&quot;,</span></span><br><span class="line">    <span class="comment">// &quot;cpp&quot;: &quot;g++ &#x27;$fileName&#x27; -o &#x27;$fileNameWithoutExt.exe&#x27; -Wall -O2 -m64 -static-libgcc -fexec-charset=GBK &amp;&amp; &amp;&#x27;./$fileNameWithoutExt.exe&#x27;&quot;</span></span><br><span class="line">    <span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gcc $fileName -o $fileNameWithoutExt.exe -Wall -O2 -m64 -lm -static-libgcc -fexec-charset=GBK -D__USE_MINGW_ANSI_STDIO &amp;&amp; $dir$fileNameWithoutExt.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cpp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;g++ $fileName -o $fileNameWithoutExt.exe -Wall -O2 -m64 -static-libgcc -fexec-charset=GBK &amp;&amp; $dir$fileNameWithoutExt.exe&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="comment">// 右键run code时运行的命令；未注释的仅适用于PowerShell（Win10默认）和pwsh，文件名中有空格也可以编译运行；注释掉的适用于cmd（win7默认）、PS和bash，但文件名中有空格时无法运行</span></span><br><span class="line">  <span class="attr">&quot;code-runner.saveFileBeforeRun&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// run code前保存</span></span><br><span class="line">  <span class="attr">&quot;code-runner.preserveFocus&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 若为false，run code后光标会聚焦到终端上。如果需要频繁输入数据可设为false</span></span><br><span class="line">  <span class="attr">&quot;code-runner.clearPreviousOutput&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// 每次run code前清空属于code runner的终端消息，默认false</span></span><br><span class="line">  <span class="attr">&quot;code-runner.ignoreSelection&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 默认为false，效果是鼠标选中一块代码后可以单独执行，但C是编译型语言，不适合这样用</span></span><br><span class="line">  <span class="attr">&quot;code-runner.fileDirectoryAsCwd&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 将code runner终端的工作目录切换到文件目录再运行，对依赖cwd的程序产生影响；如果为false，executorMap要加cd $dir</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;C_Cpp.clang_format_sortIncludes&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;files.associations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;iostream&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span> <span class="comment">// 格式化时调整include的顺序（按字母排序）</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h3 id="2-5-可选-配置文件-c-cpp-properties-json"><a href="#2-5-可选-配置文件-c-cpp-properties-json" class="headerlink" title="2.5 (可选)配置文件 c_cpp_properties.json"></a>2.5 (可选)配置文件 c_cpp_properties.json</h3><p>如果你确定不需要使用别人的库，则现在的版本（0.18.0之后）<strong>不需要创建这个文件</strong>了，cpptools会自动使用默认的设置。所以本文也不再包含此文件的配置。</p>
<p>如果你自己编写了头文件又不在workspaceFolder下，或是使用别人的库，就需要手动创建这个文件放到<code>.vscode</code>下了。</p>
<p>模板可以参考：<a href="https://link.zhihu.com/?target=https://github.com/Microsoft/vscode-cpptools/blob/master/Documentation/LanguageServer/MinGW.md">Microsoft/vscode-cpptools</a>。</p>
<p>一些曾经的经验：</p>
<ul>
<li>库的路径要加到includePath和browse里</li>
<li>如果需要递归包含，末尾加<code>/**</code>。</li>
<li>这个json不允许有注释，其实按照json标准本来就不能有</li>
<li>compilerPath好像必需是MinGW的完整路径，精确到gcc.exe，否则会提示找不到头文件；Linux下是/usr/bin/gcc；但我很久没有测试过了</li>
<li>Windows下的目录分隔符为反斜杠，原本应使用两个反斜杠来转义，但直接用斜杠这里也接受</li>
<li>除了配置这个文件，还需要进行别的操作。一部分可以参考下文的“多文件编译”</li>
</ul>
<h2 id="step-3-运行c-代码"><a href="#step-3-运行c-代码" class="headerlink" title="step.3 运行c++ 代码"></a>step.3 运行c++ 代码</h2><h3 id="方法一-Code-Runner-右键Run-code"><a href="#方法一-Code-Runner-右键Run-code" class="headerlink" title="方法一 Code Runner 右键Run code"></a>方法一 Code Runner 右键Run code</h3><p><img src="/2021-09-09-vscode-c-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/image-20210909165315058.png" alt="直接运行"></p>
<p><strong>其实Code Runner只是代替你手动输命令</strong>，功能并不强，算是适用场景不同吧。</p>
<h3 id="方法二-编译-调试"><a href="#方法二-编译-调试" class="headerlink" title="方法二 编译+调试"></a>方法二 编译+调试</h3><p>Ctrl+Shift+B 单纯编译</p>
<p>F5 编译加调试</p>
<p>编译结果为.exe 文件</p>
<p><img src="/2021-09-09-vscode-c-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/image-20210909165656146.png" alt="编译结果"></p>
<p>开始调试后，按f11可以一步一步进行，箭头所指的那行代码就是<strong>下一步要运行的代码</strong>；</p>
<p>f5是一直运行到下一个断点，右键某一行代码可以选择一直运行到指定的那一行。</p>
<p>对于正常的语言，这样就可以了，但cpptools不支持just my code，导致f11会进到库函数比如printf中，超级差评。只能平常用f10，遇到调用自己的函数时再用f11。</p>
<p><strong>cmd 运行exe文件</strong></p>
<p>进入到目录下，然后</p>
<p>输入 xxx.exe 即可运行</p>
<h3 id="多文件编译的情况"><a href="#多文件编译的情况" class="headerlink" title="多文件编译的情况"></a>多文件编译的情况</h3><p><img src="/2021-09-09-vscode-c-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/image-20210910145014006.png" alt="多文件"></p>
<p>需要输入指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">g++ main.cpp test.cpp test.h</span></span><br></pre></td></tr></table></figure>

<p>即可编译成功，运行.exe文件</p>
<p>​    如果你想使用别人的库，比如ffmpeg，可能需要在命令中指定-I、-l（小写的L）、-L。具体参数阅读那个库的文档。还可能需要把路径添加到c_cpp_properties.json里来配置Intellisense。</p>
<p>​    这些情况下可以考虑单独建一个工作区，不要和单文件编译的共用。其实不新建工程(Project)、只是单文件就能调试，是不利于以后使用和理解大型IDE的。不过初学也不用掌握那么多，不要觉得建工程很麻烦、不建工程就能编译很强就是了。</p>
<h3 id="清理临时文件"><a href="#清理临时文件" class="headerlink" title="清理临时文件"></a>清理临时文件</h3><p>可也写个bat，放到工作区里，要用的时候右键Run Code：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">echo 清理临时文件中...</span><br><span class="line">del %~dp0*.exe /q /s</span><br><span class="line">del %~dp0tempCodeRunnerFile.c /q /s</span><br><span class="line">del %~dp0a.out /q /s</span><br><span class="line">del %~dp0*.o /q /s</span><br><span class="line">echo 清理文件结束...按任意键退出</span><br><span class="line">pause &gt;nul</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>

<p>其中%~dp0会被替换成该批处理所在目录，这是为了防止有同学选错工作目录，误删根目录下的文件；</p>
<p>code runner的设置我也调整成了先切换到文件目录，双保险。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>Visual Studio Code 如何编写运行 C、C++ 程序？</p>
<p><a href="https://www.zhihu.com/question/30315894/answer/1574277687">https://www.zhihu.com/question/30315894/answer/1574277687</a></p>
<p>C/C++ for Visual Studio Code</p>
<p><a href="https://code.visualstudio.com/docs/languages/cpp">https://code.visualstudio.com/docs/languages/cpp</a></p>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>dicomParser web端的dicom文件解析库</title>
    <url>/2021-09-14-dicomParser-web%E7%AB%AF%E7%9A%84dicom%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E5%BA%93/</url>
    <content><![CDATA[<p>dicomParser是一个轻量级的库，用于在基于HTML5的web浏览器(IE10+)， Node.js和Meteor中解析DICOM P10字节流。</p>
<p>dicomParser快速，易于使用，并且没有必要的外部依赖。</p>
<span id="more"></span>

<p>github地址： <a href="https://github.com/cornerstonejs/dicomParser">https://github.com/cornerstonejs/dicomParser</a></p>
<p>之前使用daikon这个库来实现对dicom文件的处理，但是存在一部分文件无法解析的情况，于是尝试用新的库来解决这个问题。</p>
<p>这个库是写 <a href="https://github.com/cornerstonejs">cornerstonejs</a> 这个组织写的，目前提供了大量的使用例，如下：</p>
<p><a href="https://rawgit.com/cornerstonejs/dicomParser/master/examples/index.html">https://rawgit.com/cornerstonejs/dicomParser/master/examples/index.html</a></p>
<p>如果线上的地址失效了，可以将最新的源码clone下来，运行一个webpack的开发服务，也能看到例子。</p>
<h2 id="使用例"><a href="#使用例" class="headerlink" title="使用例"></a>使用例</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// create a Uint8Array or node.js Buffer with the contents of the DICOM P10 byte stream</span></span><br><span class="line"><span class="comment">// you want to parse (e.g. XMLHttpRequest to a WADO server)</span></span><br><span class="line"><span class="keyword">var</span> arrayBuffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(bufferSize);</span><br><span class="line"><span class="keyword">var</span> byteArray = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(arrayBuffer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// Parse the byte array to get a DataSet object that has the parsed contents</span></span><br><span class="line">    <span class="keyword">var</span> dataSet = dicomParser.<span class="title function_">parseDicom</span>(byteArray<span class="comment">/*, options */</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// access a string element</span></span><br><span class="line">    <span class="keyword">var</span> studyInstanceUid = dataSet.<span class="title function_">string</span>(<span class="string">&#x27;x0020000d&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get the pixel data element (contains the offset and length of the data)</span></span><br><span class="line">    <span class="keyword">var</span> pixelDataElement = dataSet.<span class="property">elements</span>.<span class="property">x7fe00010</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create a typed array on the pixel data (this example assumes 16 bit unsigned data)</span></span><br><span class="line">    <span class="keyword">var</span> pixelData = <span class="keyword">new</span> <span class="title class_">Uint16Array</span>(dataSet.<span class="property">byteArray</span>.<span class="property">buffer</span>, pixelDataElement.<span class="property">dataOffset</span>, pixelDataElement.<span class="property">length</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(ex)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Error parsing byte stream&#x27;</span>, ex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="官方样例解析-Getting-Started"><a href="#官方样例解析-Getting-Started" class="headerlink" title="官方样例解析 Getting Started"></a>官方样例解析 Getting Started</h2><p>线上地址：</p>
<p><a href="https://rawgit.com/cornerstonejs/dicomParser/master/examples/gettingStarted/index.html">https://rawgit.com/cornerstonejs/dicomParser/master/examples/gettingStarted/index.html</a></p>
<p>​    这个示例展示了如何使用dicomParser加载DICOM文件并访问其内容。将DICOM P10文件拖放到下面的区域中，可以从中选择一些属性。使用浏览器的视图源特性来查看这个示例是如何实现的，以及源代码注释。</p>
<p><img src="/2021-09-14-dicomParser-web%E7%AB%AF%E7%9A%84dicom%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E5%BA%93/image-20210914165738363.png" alt="image-20210914165738363"></p>
<h3 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h3><p>代码位置：</p>
<p><strong>.\dicomParser-master\examples\gettingStarted\index.html</strong></p>
<h4 id="1-引入dicomParser-和-jquery-的库"><a href="#1-引入dicomParser-和-jquery-的库" class="headerlink" title="1.引入dicomParser 和 jquery 的库"></a>1.引入dicomParser 和 jquery 的库</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- include the dicomParser library --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../dist/dicomParser.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">dicomParser</span> || <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;script src=&quot;https://unpkg.com/dicom-parser&quot;&gt;\x3C/script&gt;&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- jquery - included to make things easier to demo, not needed by dicomParser --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="2-处理拖拽事件"><a href="#2-处理拖拽事件" class="headerlink" title="2.处理拖拽事件"></a>2.处理拖拽事件</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Setup the dnd listeners.</span></span><br><span class="line"><span class="keyword">var</span> dropZone = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;dropZone&#x27;</span>);</span><br><span class="line">dropZone.<span class="title function_">addEventListener</span>(<span class="string">&#x27;dragover&#x27;</span>, handleDragOver, <span class="literal">false</span>);</span><br><span class="line">dropZone.<span class="title function_">addEventListener</span>(<span class="string">&#x27;drop&#x27;</span>, handleFileSelect, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<p><strong>相关参考资料：</strong></p>
<p>dragover 事件</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/dragover_event">https://developer.mozilla.org/zh-CN/docs/Web/API/Document/dragover_event</a></p>
<p>drop 事件</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/drop_event">https://developer.mozilla.org/zh-CN/docs/Web/API/Document/drop_event</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleDragOver</span>(<span class="params">evt</span>) &#123;</span><br><span class="line">    evt.<span class="title function_">stopPropagation</span>();</span><br><span class="line">    evt.<span class="title function_">preventDefault</span>();</span><br><span class="line">    evt.<span class="property">dataTransfer</span>.<span class="property">dropEffect</span> = <span class="string">&#x27;copy&#x27;</span>; <span class="comment">// Explicitly show this is a copy.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>备注：</p>
<p><strong>stopPropagation</strong> 阻止捕获和冒泡阶段中当前事件的进一步传播。</p>
<p><strong>preventDefault</strong> 阻止默认动作</p>
<p><strong>DataTransfer.dropEffect</strong> </p>
<p>获取当前选定的拖放操作类型或者设置的为一个新的类型。值必须为</p>
<p> <code>none</code>, <code>copy</code>, <code>link</code> 或 <code>move</code>。</p>
<p>一旦用户将文件放到div上，就会调用这个函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleFileSelect</span>(<span class="params">evt</span>) &#123;</span><br><span class="line">    evt.<span class="title function_">stopPropagation</span>();</span><br><span class="line">    evt.<span class="title function_">preventDefault</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get the FileList object that contains the list of files that were dropped</span></span><br><span class="line">    <span class="keyword">var</span> files = evt.<span class="property">dataTransfer</span>.<span class="property">files</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// this UI is only built for a single file so just dump the first one</span></span><br><span class="line">    <span class="title function_">loadFile</span>(files[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>触发加载文件的函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// load the file dropped on the element and then call parseByteArray with a</span></span><br><span class="line"><span class="comment">// Uint8Array containing the files contents</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadFile</span>(<span class="params">file</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">    reader.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params">file</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> arrayBuffer = reader.<span class="property">result</span>;</span><br><span class="line">        <span class="comment">// Here we have the file data as an ArrayBuffer.  dicomParser requires as input a</span></span><br><span class="line">        <span class="comment">// Uint8Array so we create that here</span></span><br><span class="line">        <span class="keyword">var</span> byteArray = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(arrayBuffer);</span><br><span class="line">        <span class="title function_">parseByteArray</span>(byteArray);</span><br><span class="line">    &#125;</span><br><span class="line">    reader.<span class="title function_">readAsArrayBuffer</span>(file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>加载文件上的元素，然后调用parseByteArray 读取 Uint8Array 存储的文件内容</p>
<h4 id="3-使用-dicomParser-来加载文件内容"><a href="#3-使用-dicomParser-来加载文件内容" class="headerlink" title="3.使用 dicomParser 来加载文件内容"></a>3.使用 dicomParser 来加载文件内容</h4><p>处理在加载过程中可能出现的错误;</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">parseByteArray</span>(<span class="params">byteArray</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// We need to setup a try/catch block because parseDicom will throw an exception</span></span><br><span class="line">    <span class="comment">// if you attempt to parse a non dicom part 10 file (or one that is corrupted)</span></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;<span class="keyword">catch</span>(err)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// we catch the error and display it to the user</span></span><br><span class="line">        $(<span class="string">&#x27;#parseError&#x27;</span>).<span class="title function_">text</span>(err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>使用parseDicom库将byteArray解析为DataSet对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dataSet = dicomParser.<span class="title function_">parseDicom</span>(byteArray);</span><br></pre></td></tr></table></figure>

<p>dataSet 包含解析的元素。</p>
<p>每个元素都可以通过 dataSet.elements中的属性使用。</p>
<p>属性名基于 elements组 和 element，格式如下:xggggeeee，其中gggg是组号，eeee是小写十六进制字符的 elements 号。</p>
<p>要访问元素的数据，我们需要知道它的类型和 tag。</p>
<p>我们将从文件中获得 <strong>sopInstanceUid</strong> 它是一个字符串，带有 tag (0020,000D)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sopInstanceUid = dataSet.<span class="title function_">string</span>(<span class="string">&#x27;x0020000d&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>现在我们有了sopInstanceUid，让我们将它添加到DOM中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#sopInstanceUid&#x27;</span>).<span class="title function_">text</span>(sopInstanceUid);</span><br></pre></td></tr></table></figure>



<p>接下来，我们将获取 患者 Id(0010,0020)。这是一个<strong>type 2属性</strong>，这意味着元素必须存在，但它可以为空</p>
<p>如果您试图获取数据长度为0(空)的元素的字符串，parseDicom将返回undefined，因此我们需要检查它以避免脚本错误</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> patientId = dataSet.<span class="title function_">string</span>(<span class="string">&#x27;x00100020&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(patientId !== <span class="literal">undefined</span>)</span><br><span class="line">&#123;</span><br><span class="line">	$(<span class="string">&#x27;#patientId&#x27;</span>).<span class="title function_">text</span>(patientId);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">	$(<span class="string">&#x27;#patientId&#x27;</span>).<span class="title function_">text</span>(<span class="string">&quot;element has no data&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>接下来，我们将尝试获取 其他患者id <strong>序列(0010,1002)</strong> 。这是一个<strong>type 3属性</strong>，意味着它可能存在，也可能不存在。</p>
<p>如果你试图为一个不存在的元素获取字符串，parseDicom将返回undefined，所以我们需要检查它，以避免脚本错误</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> otherPatientIds = dataSet.<span class="title function_">string</span>(<span class="string">&#x27;x00101002&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(otherPatientIds !== <span class="literal">undefined</span>)</span><br><span class="line">&#123;</span><br><span class="line">	$(<span class="string">&#x27;#otherPatientIds&#x27;</span>).<span class="title function_">text</span>(patientId);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">	$(<span class="string">&#x27;#otherPatientIds&#x27;</span>).<span class="title function_">text</span>(<span class="string">&quot;element not present&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>接下来，我们将尝试获取Rows(0028,0010)属性，这是图像所需要的。</p>
<p>这是 VR type US 存储，是一个 16位无符号短字段。要访问这个，我们需要使用uint16函数:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rows = dataSet.<span class="title function_">uint16</span>(<span class="string">&#x27;x00280010&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(rows !== <span class="literal">undefined</span>)</span><br><span class="line">&#123;</span><br><span class="line">	$(<span class="string">&#x27;#rows&#x27;</span>).<span class="title function_">text</span>(rows);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">	$(<span class="string">&#x27;#rows&#x27;</span>).<span class="title function_">text</span>(<span class="string">&quot;element not present or has no data&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// the DataSet object has functions to support every VR type:</span></span><br><span class="line"><span class="comment">// All string types - string()</span></span><br><span class="line"><span class="comment">// US - uint16()</span></span><br><span class="line"><span class="comment">// SS - int16()</span></span><br><span class="line"><span class="comment">// UL - uint32()</span></span><br><span class="line"><span class="comment">// SL - int32()</span></span><br><span class="line"><span class="comment">// FL - float()</span></span><br><span class="line"><span class="comment">// FD - double()</span></span><br><span class="line"><span class="comment">// DS - floatString()</span></span><br><span class="line"><span class="comment">// IS - intString()</span></span><br></pre></td></tr></table></figure>



<p>接下来我们将访问 VR type 的ReferencedImageSequence(0008,1140)元素。</p>
<p>序列包含一个或多个项，每个项都是DataSet对象。</p>
<p>此属性不是必需的，因此可能不存在</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> referencedImageSequence = dataSet.<span class="property">elements</span>.<span class="property">x00081140</span>;</span><br><span class="line"><span class="keyword">if</span>(referencedImageSequence !== <span class="literal">undefined</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// sequence items can be empty so we need to check that first</span></span><br><span class="line">    <span class="keyword">if</span>(referencedImageSequence.<span class="property">items</span>.<span class="property">length</span> &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// get the first sequence item dataSet</span></span><br><span class="line">        <span class="keyword">var</span> firstItem= referencedImageSequence.<span class="property">items</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> firstItemDataSet = firstItem.<span class="property">dataSet</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// now we can access the elements in the sequence data set just like</span></span><br><span class="line">        <span class="comment">// we did above.  In this case we will access the ReferencedSOPClassUID</span></span><br><span class="line">        <span class="comment">// (0008,1150):</span></span><br><span class="line">        <span class="keyword">var</span> referencedSOPClassUID = firstItemDataSet.<span class="title function_">string</span>(<span class="string">&#x27;x00081150&#x27;</span>);</span><br><span class="line">        $(<span class="string">&#x27;#referencedSOPClassUID&#x27;</span>).<span class="title function_">text</span>(referencedSOPClassUID);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>接下来，我们将访问多值元素中的值。</p>
<p>多值元素像数组一样包含多个值。</p>
<p>我们将访问<strong>ImagePositionPatient</strong>  x00200032 元素并从中提取X、Y和Z值;</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(dataSet.<span class="property">elements</span>.<span class="property">x00200032</span> !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> imagePositionPatientX = dataSet.<span class="title function_">floatString</span>(<span class="string">&#x27;x00200032&#x27;</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">var</span> imagePositionPatientY = dataSet.<span class="title function_">floatString</span>(<span class="string">&#x27;x00200032&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> imagePositionPatientZ = dataSet.<span class="title function_">floatString</span>(<span class="string">&#x27;x00200032&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">    $(<span class="string">&#x27;#imagePositionPatientX&#x27;</span>).<span class="title function_">text</span>(imagePositionPatientX);</span><br><span class="line">    $(<span class="string">&#x27;#imagePositionPatientY&#x27;</span>).<span class="title function_">text</span>(imagePositionPatientY);</span><br><span class="line">    $(<span class="string">&#x27;#imagePositionPatientZ&#x27;</span>).<span class="title function_">text</span>(imagePositionPatientZ);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>在某些情况下，多值元素中的值的数量是变化的。我们可以询问值的数量，并对它们进行迭代</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(dataSet.<span class="property">elements</span>.<span class="property">x00200032</span> !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> numValues = dataSet.<span class="title function_">numStringValues</span>(<span class="string">&#x27;x00200032&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> text = numValues + <span class="string">&quot; (&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; numValues; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> value = dataSet.<span class="title function_">floatString</span>(<span class="string">&#x27;x00200032&#x27;</span>,i);</span><br><span class="line">        text += value + <span class="string">&quot; &quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    text += <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    $(<span class="string">&#x27;#imagePositionPatientNumValues&#x27;</span>).<span class="title function_">text</span>(text);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>parseDicom跟踪每个元素的长度及其在解析它的字节数组中的偏移量。</p>
<p>这里我们展示了如何通过直接访问元素来获得它:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sopInstanceUidElement = dataSet.<span class="property">elements</span>.<span class="property">x0020000d</span>;</span><br><span class="line"><span class="keyword">var</span> text = <span class="string">&quot;dataOffset = &quot;</span> + sopInstanceUidElement.<span class="property">dataOffset</span> + <span class="string">&quot;; length = &quot;</span> + sopInstanceUidElement.<span class="property">length</span>;</span><br><span class="line">$(<span class="string">&#x27;#sopInstanceUidDataOffsetAndLength&#x27;</span>).<span class="title function_">text</span>(text);</span><br></pre></td></tr></table></figure>



<p>该元素还有一些其他属性，可能存在，也可能不存在:</p>
<p>vr—元素的 VR 。仅对显式迁移语法可用 hadUndefinedLength - 当元素的长度未定义，为true。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(sopInstanceUidElement.<span class="property">vr</span> !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">	$(<span class="string">&#x27;#sopInstanceUidVR&#x27;</span>).<span class="title function_">text</span>(sopInstanceUidElement.<span class="property">vr</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="相关名词解释"><a href="#相关名词解释" class="headerlink" title="相关名词解释"></a>相关名词解释</h2><h3 id="DICOM"><a href="#DICOM" class="headerlink" title="DICOM"></a>DICOM</h3><p>​    DICOM（Digital Imaging and Communications in Medicine）即医学数字成像和通信，是医学图像和相关信息的国际标准（ISO 12052）。它定义了质量能满足临床需要的可用于数据交换的医学图像格式。</p>
<p>DICOM 文件结构：</p>
<p><img src="/2021-09-14-dicomParser-web%E7%AB%AF%E7%9A%84dicom%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E5%BA%93/image-20210914200600379.png" alt="image-20210914200600379"></p>
<h3 id="VR"><a href="#VR" class="headerlink" title="VR"></a>VR</h3><p>对象的属性——VR（Value Representations）</p>
<p>VR是DICOM标准中用来描述数据类型的，总共有27个值。</p>
<p><img src="/2021-09-14-dicomParser-web%E7%AB%AF%E7%9A%84dicom%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E5%BA%93/image-20210914201432413.png" alt="image-20210914201432413"></p>
]]></content>
      <categories>
        <category>医学影像处理</category>
      </categories>
      <tags>
        <tag>医学影像处理</tag>
        <tag>前端</tag>
        <tag>React</tag>
        <tag>Dicom</tag>
      </tags>
  </entry>
  <entry>
    <title>千伏工作室出品《武侯北伐》兵棋简评</title>
    <url>/2021-09-16-%E5%8D%83%E4%BC%8F%E5%B7%A5%E4%BD%9C%E5%AE%A4%E5%87%BA%E5%93%81%E3%80%8A%E6%AD%A6%E4%BE%AF%E5%8C%97%E4%BC%90%E3%80%8B%E5%85%B5%E6%A3%8B%E7%AE%80%E8%AF%84/</url>
    <content><![CDATA[<h2 id="🟦前言"><a href="#🟦前言" class="headerlink" title="🟦前言"></a>🟦前言</h2><p>​    最近又入手了一款千伏工作室兵棋《武侯北伐》，其实这段时间入手的兵棋还是不少的，但是有些复杂程度比较高，我自己没有完整的推演下来一把，所以不好做测评。《武侯北伐》相对来说比较简单，而且和同学比较好开起来，所以简单写一下评测和一些心得。</p>
<span id="more"></span>

<p>​    在评测之前，先悼念一下《武侯北伐》这款兵棋的设计师 <strong>南深夏</strong> 同志。千伏工作室4月在公众号上发布了 <strong>南深夏</strong> 同志的讣告，很年轻就去世了，真的非常的遗憾。这里希望大家能好好爱惜自己的身体，多锻炼身体。</p>
<h2 id="🟦简介"><a href="#🟦简介" class="headerlink" title="🟦简介"></a>🟦简介</h2><p><strong>千伏工作室的淘宝店：</strong><a href="https://kvgame.taobao.com/index.htm">https://kvgame.taobao.com/index.htm</a></p>
<p><strong>价格：</strong>99元</p>
<p><strong>人数：</strong>2人（实际上可以很多人玩）</p>
<p><strong>难度：</strong>简单</p>
<p><strong>时间：</strong>30-90分钟（熟悉了之后，每把大概60分钟）</p>
<p><strong>作品设计：</strong>南深夏</p>
<p><strong>官方说明书：</strong><a href="https://www.bilibili.com/video/BV1QA411V7se">https://www.bilibili.com/video/BV1QA411V7se</a></p>
<p>（官方说明书新手还是必看的，能快速弄懂游戏的规则）</p>
<p><img src="/2021-09-16-%E5%8D%83%E4%BC%8F%E5%B7%A5%E4%BD%9C%E5%AE%A4%E5%87%BA%E5%93%81%E3%80%8A%E6%AD%A6%E4%BE%AF%E5%8C%97%E4%BC%90%E3%80%8B%E5%85%B5%E6%A3%8B%E7%AE%80%E8%AF%84/O1CN01m4JImO26XMq6UmJa7_!!2170777671.png" alt="1"></p>
<p>背景就是三国啦，大家都非常熟悉的历史</p>
<h2 id="🟦简单开箱"><a href="#🟦简单开箱" class="headerlink" title="🟦简单开箱"></a>🟦简单开箱</h2><h3 id="包装盒正面"><a href="#包装盒正面" class="headerlink" title="包装盒正面"></a>包装盒正面</h3><p><img src="/2021-09-16-%E5%8D%83%E4%BC%8F%E5%B7%A5%E4%BD%9C%E5%AE%A4%E5%87%BA%E5%93%81%E3%80%8A%E6%AD%A6%E4%BE%AF%E5%8C%97%E4%BC%90%E3%80%8B%E5%85%B5%E6%A3%8B%E7%AE%80%E8%AF%84/image-20210916221211218.png" alt="image-20210916221211218"></p>
<h3 id="包装盒背面"><a href="#包装盒背面" class="headerlink" title="包装盒背面"></a>包装盒背面</h3><p><img src="/2021-09-16-%E5%8D%83%E4%BC%8F%E5%B7%A5%E4%BD%9C%E5%AE%A4%E5%87%BA%E5%93%81%E3%80%8A%E6%AD%A6%E4%BE%AF%E5%8C%97%E4%BC%90%E3%80%8B%E5%85%B5%E6%A3%8B%E7%AE%80%E8%AF%84/image-20210916221151565.png" alt="image-20210916221151565"></p>
<h3 id="地图"><a href="#地图" class="headerlink" title="地图"></a>地图</h3><p>本作地图的特点是非常的 <strong>狭长</strong></p>
<p>但是并不大，有机会的话，甚至在办公室就可以和小伙伴开一把</p>
<p><img src="/2021-09-16-%E5%8D%83%E4%BC%8F%E5%B7%A5%E4%BD%9C%E5%AE%A4%E5%87%BA%E5%93%81%E3%80%8A%E6%AD%A6%E4%BE%AF%E5%8C%97%E4%BC%90%E3%80%8B%E5%85%B5%E6%A3%8B%E7%AE%80%E8%AF%84/11.jpg" alt="11"></p>
<h3 id="配件"><a href="#配件" class="headerlink" title="配件"></a>配件</h3><p>一本说明书</p>
<p>蜀汉 和 曹魏 的算子</p>
<p>控制标记</p>
<p>骰子一枚</p>
<p>玩家帮助卡一张</p>
<p><img src="/2021-09-16-%E5%8D%83%E4%BC%8F%E5%B7%A5%E4%BD%9C%E5%AE%A4%E5%87%BA%E5%93%81%E3%80%8A%E6%AD%A6%E4%BE%AF%E5%8C%97%E4%BC%90%E3%80%8B%E5%85%B5%E6%A3%8B%E7%AE%80%E8%AF%84/1.jpg" alt="1"></p>
<h2 id="🟦简单的评测"><a href="#🟦简单的评测" class="headerlink" title="🟦简单的评测"></a>🟦简单的评测</h2><p>​        这个评测拖了很长时间才回过头来写，中间也发生了不少事情，本来9月就应该写完，现在已经到了12月了。已经不太记得9月的时候和同学推演是个什么样子了，只有零星的回忆，感觉这个游戏入手的人应该还挺多，集石上的评测也不少，所以就随便写写，摆烂咯…</p>
<p><strong>美术</strong>：美术真的不用多说了，挺好看的，地图用了水墨画的风格，算子比较抽象，不知道是不是中国古代用来标记军队的符号。</p>
<p><strong>机制</strong>：相比一般的兵棋，更偏重于进攻，城池基本提供不了多少防御的加成。没有ZOC的概念，有将领激活，补给，占领。规则虽然比较简单，但是修正很多，萌新玩的话可能会觉得 计算起来比较麻烦（将领修正+精锐部队修正+地形修正+城池修正</p>
<p><strong>推新度</strong>：还是比较高的，毕竟题材和美术好，萌新应该会比较感兴趣</p>
<p><strong>个人体验</strong>：和同学推了2把，一把平局，一把蜀汉赢了，个人觉得蜀汉还是比较强（似乎新版本已经被削弱过了，但是我感觉还是好强…)。蜀军将领比较多，动起来很快，魏军的话得拖住蜀军，只要支援来了，可能一切都会好起来？初设什么的非常简单，很容易开起来，这一点还是不错的。虽然系统方面除了没有ZOC之外（毕竟古代战场啦）还是蛮全，修正很多，考虑了各种战场上的情况，结算起来有点复杂，但是毕竟游戏体量在这里，算子不多，总体来说中规中矩吧</p>
<p><strong>总结</strong>：7.0/10   还可以，推荐给喜欢三国历史，或者想兵棋入门的人</p>
<h2 id="🟦QA"><a href="#🟦QA" class="headerlink" title="🟦QA"></a>🟦QA</h2><p>我个人的一些问题，主要我觉得有些规则和打法我感觉挺怪的…</p>
<h3 id="Q-武都郡在一开始的归属？"><a href="#Q-武都郡在一开始的归属？" class="headerlink" title="Q 武都郡在一开始的归属？"></a>Q 武都郡在一开始的归属？</h3><p>规则书 12.1 中指出：需要占领 【下辩】，视作占林 武都郡</p>
<p>且 规则书 4.0 中指出：曹魏玩家 在开始 有全部郡治标签</p>
<p><strong>蜀汉 是否需要专门留一个小队去 占领 【下辩】？</strong>如图：</p>
<p><img src="/2021-09-16-%E5%8D%83%E4%BC%8F%E5%B7%A5%E4%BD%9C%E5%AE%A4%E5%87%BA%E5%93%81%E3%80%8A%E6%AD%A6%E4%BE%AF%E5%8C%97%E4%BC%90%E3%80%8B%E5%85%B5%E6%A3%8B%E7%AE%80%E8%AF%84/0P%7BA7W@GWNE%7BR21H07MXK6P.png" alt="0P{A7W@GWNE{R21H07MXK6P"></p>
<p><strong>A</strong> 是对的√ 也就是说蜀汉一开始要专门弄一只部队去踩一下 <strong>下辩</strong></p>
<h3 id="Q-京兆和司州的结算？"><a href="#Q-京兆和司州的结算？" class="headerlink" title="Q 京兆和司州的结算？"></a>Q 京兆和司州的结算？</h3><p>规则 13.0中的算分规则是否可以理解为：</p>
<p><strong>8个郡：武都 2 + 扶风 2 + 6 * 1 = 10分</strong></p>
<p><strong>1个城市（长安）：2分</strong></p>
<p>总共占领分为 <strong>12分</strong></p>
<p><strong>即 京兆 和 司州 2个郡 的占领不结算分数。</strong></p>
<p><img src="/2021-09-16-%E5%8D%83%E4%BC%8F%E5%B7%A5%E4%BD%9C%E5%AE%A4%E5%87%BA%E5%93%81%E3%80%8A%E6%AD%A6%E4%BE%AF%E5%8C%97%E4%BC%90%E3%80%8B%E5%85%B5%E6%A3%8B%E7%AE%80%E8%AF%84/image-20210915222922612.png" alt="image-20210915222922612"></p>
<p>A <strong>是正确的！</strong></p>
<h3 id="Q-魏军通过分散部队的方式进行，防守是否合理？"><a href="#Q-魏军通过分散部队的方式进行，防守是否合理？" class="headerlink" title="Q 魏军通过分散部队的方式进行，防守是否合理？"></a>Q 魏军通过分散部队的方式进行，防守是否合理？</h3><p>规则 12.0 指出：</p>
<p>有且仅有当一方玩家占领郡制（本郡的政府驻地）且该郡内（地图上州郡边界全境内）没有另一方势力单位时，州郡控制权才会变更。</p>
<p>那么魏军分兵来防守的策略合理吗？如图：</p>
<p><img src="/2021-09-16-%E5%8D%83%E4%BC%8F%E5%B7%A5%E4%BD%9C%E5%AE%A4%E5%87%BA%E5%93%81%E3%80%8A%E6%AD%A6%E4%BE%AF%E5%8C%97%E4%BC%90%E3%80%8B%E5%85%B5%E6%A3%8B%E7%AE%80%E8%AF%84/image-20210915222936372.png" alt="image-20210915222936372"></p>
<p>A 应该是可以的，但是这种策略是否好值得商榷</p>
]]></content>
      <categories>
        <category>桌游</category>
      </categories>
      <tags>
        <tag>测评</tag>
        <tag>游戏</tag>
        <tag>桌游</tag>
        <tag>兵棋</tag>
      </tags>
  </entry>
  <entry>
    <title>通过Orthanc了解DICOM</title>
    <url>/2021-09-16-%E9%80%9A%E8%BF%87Orthanc%E4%BA%86%E8%A7%A3DICOM/</url>
    <content><![CDATA[<p>原文:<br><a href="https://book.orthanc-server.com/dicom-guide.html">https://book.orthanc-server.com/dicom-guide.html</a><br>本文的目的旨在帮助开发者了解DICOM文件的格式，这里提供全文的翻译。</p>
<span id="more"></span>

<p>​    Orthanc Book的这一部分提供了对DICOM的相对简单、非正式和高级介绍。我们将尝试将DICOM的概念映射到一个现代术语中，希望对于第一次深入DICOM的软件工程师来说，这个术语更容易理解。一旦理解了本页的概念，有兴趣的读者可以阅读关于DICOM的更正式的教科书，如所谓的“实用介绍和生存指南”，或阅读完整的DICOM规范。</p>
<p><a href="https://www.springer.com/us/book/9783642108495">Practical introduction and survival guide</a></p>
<p><a href="http://dicom.nema.org/medical/dicom/current/output/html/">DICOM specification</a></p>
<p>​    本文中定义的所有DICOM概念都用Orthanc进行了说明，Orthanc是一款轻量级但功能强大的独立DICOM服务器，用于医疗保健和医学研究。Orthanc是免费的开源软件，是学习DICOM的好伙伴。</p>
<h2 id="DICOM-文件格式"><a href="#DICOM-文件格式" class="headerlink" title="DICOM 文件格式"></a>DICOM 文件格式</h2><p>DICOM标准可以大致分为两部分:</p>
<ul>
<li><p>DICOM 文件格式的部分。</p>
</li>
<li><p>DICOM 网络协议部分。</p>
</li>
</ul>
<p>DICOM文件格式是本节的主题。它本质上类似于众所周知的格式，如JPEG、PNG或TIFF。然而，除了对医学图像本身进行编码的所谓“像素数据”（<strong>pixel data</strong>）之外，DICOM文件还嵌入了医学信息。</p>
<h3 id="DICOM-tags"><a href="#DICOM-tags" class="headerlink" title="DICOM tags"></a>DICOM tags</h3><p>​    DICOM文件编码的医疗信息称为数据集（<strong>data set</strong>），采用键值关联数组 （<a href="https://en.wikipedia.org/wiki/Associative_array">key-value associative array</a>）的形式。每个值本身可以是一个数据集列表(称为序列 <strong>sequence</strong>)，导致类似于XML或JSON文件的分层数据结构。</p>
<p>​    在DICOM术语中，每个键称为<strong>DICOM tag</strong>。标准DICOM标签列表由一个官方字典进行规范化，每个标签由两个16位十六进制数字标识。例如，患者的出生日期与 DICOM tag <strong>(0x0010, 0x0030)</strong> 相关联。请注意，通常省略” 0x “前缀，而只写<strong>0010,0030</strong> 。为了更好的可读性，通常用驼峰命名法 (例如 “<em>PatientName</em>” or “<em>StudyDescription</em>”)。该标准将每个DICOM tag与一个数据类型(a string, a date, a floating-point number……)关联起来，这就是它的 值表示（<strong>value representation</strong> 简称 <strong>VR</strong>） 。</p>
<p>​    以下是 Orthanc Explore r如何显示存储在DICOM文件中的DICOM tag (注意该文件包含 tag ProcedureCodeSequence  (0x0008, 0x1032) tag 的序列):</p>
<p><img src="/2021-09-16-%E9%80%9A%E8%BF%87Orthanc%E4%BA%86%E8%A7%A3DICOM/DicomTags.png" alt="img"></p>
<p>​    </p>
<p>​    DICOM文件格式还指定了一组DICOM tag，这些 tag 对于每种成像方式(CT、MR、NM、CBCT、PET…) 都是必填的或可选的。这种规范称为 <strong>storage service-object pair</strong> (storage SOP)。必填 tag 称为“<em>type</em> 1”，可以有空值的 必填 tag 称为“<em>type</em> 2”，可选 tag 称为“<em>type</em> 3”。</p>
<p>​    DICOM标准还允许供应商引入非标准的专有 tag 供他们自己使用。专有 tag 可以通过其第一个十六进制数 是否位 奇数(例如(0x0009, 0x0010))来识别。显然，为了实现最大程度的互操作性，应该避免使用这种专有 tag。</p>
<h3 id="像素数据"><a href="#像素数据" class="headerlink" title="像素数据"></a>像素数据</h3><p>​    图像本身与 DICOM tag <code>PixelData (0x7fe0, 0x0010)</code> 相关联。图像的内容可以使用多种图像格式进行压缩，如JPEG、无损JPEG或JPEG 2000。显然，为了避免医疗信息的丢失，应该始终采用无损压缩。请注意，DICOM文件还可以作为使用MPEG-2或H.264编码的视频的包装器。</p>
<p>​    通过检查与DICOM文件头中关联的 <strong>传输语法</strong>，可以识别图像压缩算法。</p>
<p>​    在实践中，除了PACS本身，医院中很少有成像设备支持图像压缩。因此，为了确保最佳的可移植性，在医院中流通的大多数DICOM文件的像素数据通常是 <strong>不压缩的</strong>。换句话说，图像被编码为一个 原始缓冲区（raw buffer），具有给定的宽度、高度、像素类型(整数或浮点数)、颜色深度(通常为每像素8、10、12 bpp位)，光度表示(通常为灰度或RGB)。与这种未压缩图像相关联的传输语法可以是小字节序(最常见的情况)，也可以是大字节序(DICOM标准的最新版本中已经取消了)。</p>
<p>​    将一个DICOM实例从某种传输语法转换为另一种语法的过程称为<strong>编码转换</strong>。代码转换的主题在一个单独的FAQ条目中介绍。</p>
<p>​    <a href="https://book.orthanc-server.com/faq/transcoding.html#transcoding">separate FAQ entry</a></p>
<p>​    DICOM图像可以是 <strong>多帧的</strong>，这意味着它对不同图像帧的数组进行编码。例如，这用于编码未压缩的视频序列，这些序列通常被称为<strong>cine</strong> 或 <strong>2D+t</strong> 图像 (如超声成像)。</p>
<p>​    正如在其DICOM一致性声明中所写，Orthanc软件可以接收、存储和发送任何类型的DICOM图像(即支持所有标准的传输语法)。此外，Orthanc可以将大多数未压缩的图像转换为PNG图像。Orthanc之所以选择PNG格式，是因为它是无损的，受到许多浏览器、软件或编程框架的原生支持，并且能够编码高达16bpp的整数像素。在Orthanc Explorer中预览DICOM图像时，会发生这种实时转换为PNG图像的情况:</p>
<p><img src="/2021-09-16-%E9%80%9A%E8%BF%87Orthanc%E4%BA%86%E8%A7%A3DICOM/PreviewInstance.png" alt="img"></p>
<h3 id="真实世界的模型"><a href="#真实世界的模型" class="headerlink" title="真实世界的模型"></a>真实世界的模型</h3><p>以上就是我们对DICOM文件格式本身的概述。现在我们有必要概述一下所谓的“现实世界的DICOM模型”(<a href="http://dicom.nema.org/medical/dicom/current/output/html/part04.html#sect_C.6.1.1">source</a>):</p>
<p><img src="/2021-09-16-%E9%80%9A%E8%BF%87Orthanc%E4%BA%86%E8%A7%A3DICOM/image-20210916155725828.png" alt="image-20210916155725828"></p>
<p>​    这个UML图显示了一个特定的病人 <strong>patient</strong>  在她的一生中受益于一组医学成像研究 <strong>studies</strong>。每项研究 <strong>study</strong> 都是由一套序列 <strong>series</strong>组成的。每个 系列 <strong>series</strong>  由许多的 <strong>instances</strong> 组成，后者是单个DICOM文件的同义词。在Orthanc的词汇表中，<strong>DICOM资源</strong> 是一个总括术语，用于讨论 a <strong>patient</strong>, a <strong>study</strong>, a <strong>series</strong> or an <strong>instance</strong>。</p>
<p>​    任何影像研究都可以与多组影像相关联。这一点在核医学中尤其明显，因为任何PET-CT扫描研究都至少包含两个单独的系列:CT序列和PET序列。但任何一种成像研究通常都会产生一系列独立的序列。一般来说，一个序列可以被认为是一个单一的2D图像(如标准数字射线照相)，一个单一的3D体积(如ct扫描)，或一个2D+t cine 的一组。但是一个序列也可以编码一个单一的PDF报告，一个结构化的报告，一个3D+t图像(即 3D图像的时间序列)…</p>
<p>​    在任何情况下，给定序列的实际像素数据都分布在多个DICOM 实例 中。这允许将单个大图像(医学图像通常处理4GB的图像)分割成数百个几兆字节的小文件，每个小文件可以完全装入计算机内存，代价是嵌入这些文件中的医疗信息严重冗余。</p>
<p>​    对于这4种DICOM资源中的每一种，DICOM标准将一个 <strong>模块</strong> 指定为一组描述这些资源的DICOM标记。例如，DICOM标记PatientName是patient模块的一部分，而SeriesDescription是series模块的一部分。任何存储服务-对象对(如上面定义的)都可以分解为一组模块，这些模块对其关联的模态类型有意义，其连接形式对所有医疗信息进行编码。</p>
<p>​    根据这个现实世界的模型，Orthanc的默认Web界面允许从患者层浏览到实例层。以下是Orthanc Explorer如何显示一个系列:</p>
<p><img src="/2021-09-16-%E9%80%9A%E8%BF%87Orthanc%E4%BA%86%E8%A7%A3DICOM/RealWorld.png" alt="img"></p>
<p>​    界面左侧显示了患者模块、研究模块和系列模块的概述。在右侧，可以访问该系列的多个实例。</p>
<h3 id="DICOM标识符"><a href="#DICOM标识符" class="headerlink" title="DICOM标识符"></a>DICOM标识符</h3><p>非常重要的是，DICOM标准指定了DICOM标签，允许对每个DICOM资源进行索引:</p>
<ul>
<li>患者使用 PatientID (0x0010, 0x0020) (patient模块的一部分)进行索引。</li>
<li>研究使用 StudyInstanceUID (0x0020, 0x000d)(研究模块的一部分)进行索引。</li>
<li>系列使用 SeriesInstanceUID (0x0020, 0x000e)(系列模块的一部分)建立索引。</li>
<li>实例使用 SOPInstanceUID (0x0008, 0x0018) (SOP模块的一部分)进行索引</li>
</ul>
<p>​    DICOM标准要求 StudyInstanceUID、SeriesInstanceUID  和 SOPInstanceUID 是全局唯一的。换句话说，强制要求两个不同的成像设备永远不要生成相同的标识符，即使它们是由不同的供应商生产的。Orthanc利用该规则派生自己的惟一标识符。</p>
<p>​    重要的是，即使PatientID在给定的医院内必须是惟一的，也不能保证它是全局惟一的。这意味着不同医院的不同患者可能共享相同的PatientID。因此，当您处理处理来自不同医院的患者的应用程序时，<strong>应该始终从研究级别(而不是从患者级别)进行浏览。</strong></p>
<p>​    注意:从Orthanc 1.4.0开始，Orthanc Explorer界面提供了一个名为“Studies”的新标签，用于 研究 级别的访问。</p>
<p>​    最后，patient模块并不总是完全有意义的。例如，在紧急成像中，放射信息系统可能之前没有遇到成像患者。在这种情况下，急诊室的成像设备将与成像研究关联一个唯一的 <code>AccessionNumber (0x0008, 0x0050)</code> 一旦管理信息可用，随后将在PACS中注入患者模块，作为协调过程的一部分。</p>
<p>​    在任何情况下，核心引擎Orthanc保存所有这些DICOM标识符(PatientID, AccessionNumber, StudyInstanceUID, SeriesInstanceUID和SOPInstanceUID)的索引，并能够快速将它们映射到自己的内部标识符。这个查找是由Orthanc的REST API的/tools/lookup URI实现的。</p>
<p>后面是网络的部分，就摆烂了，随便拿翻译软件弄一下…</p>
<h2 id="DICOM网络协议"><a href="#DICOM网络协议" class="headerlink" title="DICOM网络协议"></a>DICOM网络协议</h2><p>​    以上就是我们对DICOM文件格式的概述。如上所述，我们现在描述DICOM标准的第二个主要部分，即DICOM网络协议。</p>
<p>​    实际上，DICOM协议是最早的Web服务示例之一，早在引入SOAP或REST之前。它允许:</p>
<ul>
<li><strong>测试两台设备之间的连通性(C-Echo)。</strong></li>
<li><strong>从本地成像设备发送图像到远端设备(C-Store)。</strong></li>
<li><strong>搜索远程设备的内容(C-Find)。</strong></li>
<li><strong>从远程设备(C-Move或C-Get)检索图像。</strong></li>
</ul>
<p>下面是一张总结了一些关键概念的图片:</p>
<p><img src="/2021-09-16-%E9%80%9A%E8%BF%87Orthanc%E4%BA%86%E8%A7%A3DICOM/image-20210916163259732.png" alt="image-20210916163259732"></p>
<p>​    在DICOM术语中，DICOM服务的客户端称为**服务类用户(SCU)<strong>，处理请求的服务器称为</strong>服务类提供者(SCP)**。客户端发送一个编码为DICOM文件(命令)的请求，服务器用DICOM文件进行应答。</p>
<p>​    DICOM客户端到DICOM服务器的连接称为关联 <strong>association</strong>。这种关联从握手开始，客户机和服务器就可以在它们之间交换哪些命令以及支持哪些传输语法达成一致。这个协商的结果称为 表示上下文  <strong>presentation context</strong>。一旦关联协商成功，就可以使用该通信通道连续发送多个独立的命令。</p>
<h3 id="DICOM服务器参数"><a href="#DICOM服务器参数" class="headerlink" title="DICOM服务器参数"></a>DICOM服务器参数</h3><p>​    在历史上，DICOM协议被设计为在点对点链路上工作。现在，DICOM协议是在TCP/IP协议栈上使用的。这意味着可以通过指定其网络套接字的参数来识别DICOM服务器:</p>
<ol>
<li>它的IP地址(或者，相同地，它的符号DNS主机名)。</li>
<li>它的TCP端口(标准的DICOM端口是104，但Orthanc默认使用非特权端口4242)。</li>
</ol>
<p>​    此外，每个成像设备(可能是客户机或服务器)必须与称为 <strong>应用程序实体标题(AET)</strong> 的符号名称相关联。AET被认为是医院内部网中唯一的。为了厂商之间的最佳兼容性，AET应该只由大写字母数字字符(加上“-”和“_”字符)组成，长度必须小于16个字符。</p>
<p>​    IP地址、TCP端口和AET共同描述了DICOM服务器的所有参数。医疗成像网络的管理员应该仔细跟踪每个成像设备的这些参数，并应该定义一个全医院的政策，将AETs分配给新设备</p>
<h3 id="配置Orthanc"><a href="#配置Orthanc" class="headerlink" title="配置Orthanc"></a>配置Orthanc</h3><p>​    Orthanc可以同时作为DICOM客户端和DICOM服务器，这取决于它的配置文件中的参数。要配置Orthanc的DICOM服务器，以下选项特别重要:</p>
<ul>
<li><code>DicomServerEnabled</code> 必须设置为<code>true</code>。</li>
<li><code>DicomAet</code>必须设置为保留给Orthanc的AET。</li>
<li><code>DicomPort</code> 为DICOM服务器的TCP端口。</li>
</ul>
<p>​    要将Orthanc配置为DICOM客户端，必须在 <code>DicomModalities</code> 选项中列出Orthanc已知的远程DICOM服务器。对于每个远程服务器，必须按照以下顺序指定:</p>
<ul>
<li>Orthanc Explorer(可能是它的AET)将显示的服务器的用户友好的符号名。</li>
<li>远程服务器的AET。</li>
<li>它的IP地址。</li>
<li>它的DICOM端口(最可能是104，如果远程服务器是Orthanc的另一个实例，则可能是4242)。</li>
</ul>
<p>当然，在Orthanc的配置发生任何变化后，必须重新启动软件，来使用新的参数。</p>
<p>备注：<code>DicomModalities</code> 配置选项中的IP地址可能被远程模式(由DNS获得)的主机名替换。如果Orthanc充当这个远程模式的SCU，这将起作用。但是，如果远程模式充当一个可以联系Orthanc SCP的SCU，并且<code>DicomCheckModalityHost</code>选项设置为<code>true</code>，则必须使用一个IP地址。</p>
<h3 id="C-Echo-测试连接"><a href="#C-Echo-测试连接" class="headerlink" title="C-Echo:测试连接"></a>C-Echo:测试连接</h3><p>​    路由器可能会在不同子网之间阻塞DICOM协议(通常，只有HTTP、HTTPS和SSH协议默认启用)。此外，安装在客户端或服务器上的防火墙也可能阻止DICOM协议。对于微软Windows防火墙和基于redhat的GNU/Linux机器来说尤其如此。因此，在医院的DICOM拓扑发生任何变化之后(特别是在连接两个成像设备时)，应该始终检查DICOM协议是否可以从一端传输到另一端，即在DICOM客户端和DICOM服务器之间。</p>
<p>​    这就是DICOM Echo服务发挥作用的地方。当客户端向服务器发送所谓的 <code>C-Echo</code> 命令作为其DICOM查询时，会触发该服务。服务器用一个空的DICOM回答。在实际操作中，要测试两台设备之间的连通性，您应该:</p>
<ul>
<li>然后，使用标准命令行工具ping来测试客户机和服务器之间的 tcp 级连通性</li>
<li>从客户端发送C-Echo到服务器，测试 dicom 级的连通性。</li>
</ul>
<p>第二步可以直接在Orthanc的嵌入式管理界面Orthanc Explorer的“查询/检索”面板中完成，如下图所示:</p>
<p><img src="/2021-09-16-%E9%80%9A%E8%BF%87Orthanc%E4%BA%86%E8%A7%A3DICOM/Echo.png" alt="img"></p>
<p>​    在这个截图中，<code>sample</code>对应于 <code>DicomModalities</code> 配置选项中声明的DICOM服务器的符号名。DICOM Echo成功后，客户端应该能够向服务器发送图像，并发起查询/检索。这是下面几节的主题。</p>
<h3 id="C-Store-向服务器发送图像"><a href="#C-Store-向服务器发送图像" class="headerlink" title="C-Store:向服务器发送图像"></a>C-Store:向服务器发送图像</h3><p>​    DICOM Store Service用于将DICOM实例发送到远程成像设备。当客户端向服务器发送所谓的C-Store命令以及DICOM实例的内容时，会触发此服务。C-Store的工作原理大致如下:</p>
<p><img src="/2021-09-16-%E9%80%9A%E8%BF%87Orthanc%E4%BA%86%E8%A7%A3DICOM/image-20210916170912433.png" alt="image-20210916170912433"></p>
<p>​    Orthanc既可以作为C-Store客户端(SCU)，也可以作为C-Store服务器(SCP)。换句话说，它既可以发送也可以接收DICOM文件。</p>
<p>​    在Orthanc Explorer界面中，每个DICOM资源(患者、研究、系列或实例)都带有一个名为“发送到远程模式”的按钮。单击此按钮允许将图像发送到 <code>DicomModalities</code>配置选项中声明的任何DICOM服务器。在下面的截图中，一个患者的所有实例将被发送到符号名称为sample的设备:</p>
<p><img src="/2021-09-16-%E9%80%9A%E8%BF%87Orthanc%E4%BA%86%E8%A7%A3DICOM/CStoreGui.png" alt="img"></p>
<h3 id="C-Find-浏览服务器的内容"><a href="#C-Find-浏览服务器的内容" class="headerlink" title="C-Find:浏览服务器的内容"></a>C-Find:浏览服务器的内容</h3><p>​    DICOM查找服务用于搜索由某个远程DICOM服务器托管的DICOM资源列表。必须指定要查找的资源类型(患者、研究或系列)，从而确定查询的查询级别。除了查询级别之外，查询还包含一组有关DICOM标记的过滤器:这些过滤器本质上是描述要查找的资源的通配符。当客户端向服务器发送一个所谓的C-Find命令，该命令对查询级别和过滤器进行编码时，会触发此服务。C-Find的具体工作如下:</p>
<p><img src="/2021-09-16-%E9%80%9A%E8%BF%87Orthanc%E4%BA%86%E8%A7%A3DICOM/image-20210916171157537.png" alt="image-20210916171157537"></p>
<p>​    Orthanc既可以作为C-Find客户端(SCU)，也可以作为C-Find服务器(SCP)。换句话说，它可以用于搜索远程服务器的内容，反过来，它也可以将自己的内容通知远程客户机。</p>
<p>​    在Orthanc Explorer界面中，可以在研究级别启动搜索。这个功能可以在“查询/检索”面板中使用，如下所示:</p>
<p><img src="/2021-09-16-%E9%80%9A%E8%BF%87Orthanc%E4%BA%86%E8%A7%A3DICOM/CFindGui1.png" alt="img"></p>
<p>​    这张截图显示，我们正在寻找一项研究，其相关患者的名字以“大脑”开始，这是磁共振模式。Orthanc Explorer随后列出了匹配研究:</p>
<p><img src="/2021-09-16-%E9%80%9A%E8%BF%87Orthanc%E4%BA%86%E8%A7%A3DICOM/CFindGui2.png" alt="img"></p>
<p>​    然后，可以点击一些配对研究，列出它是由下列各个系列组成:</p>
<p><img src="/2021-09-16-%E9%80%9A%E8%BF%87Orthanc%E4%BA%86%E8%A7%A3DICOM/CFindGui3.png" alt="img"></p>
<h3 id="C-Move-查询和检索"><a href="#C-Move-查询和检索" class="headerlink" title="C-Move:查询和检索"></a>C-Move:查询和检索</h3><p>​    这就给我们带来了DICOM网络协议的最后一个重要组件，DICOM移动服务。根据C-Find查询的结果，该服务主要用于从远程服务器本地检索DICOM文件。综合起来，C-Find和C-Move产生了查询/检索机制，是医院内部DICOM文件交换的核心。</p>
<p>​    C-Move可能是DICOM标准中不太直观的部分，这导致了医学成像网络中的许多配置问题。这是因为C-Move实际上并不局限于查询/检索。</p>
<p><img src="/2021-09-16-%E9%80%9A%E8%BF%87Orthanc%E4%BA%86%E8%A7%A3DICOM/image-20210916171405085.png" alt="image-20210916171405085"></p>
<p>​    每当一个成像设备(上面称为发行者)启动一个C-Move命令时，它会请求DICOM服务器(上面称为源)将它的一些图像发送到另一个DICOM服务器(上面称为目标)。因此，C-Move命令将要发送的DICOM资源的标识符与目标服务器的AET一起编码。换句话说，C-Move命令驱动两个远程DICOM服务器(源服务器和目标服务器)之间的C-Store。</p>
<p>​    查询/检索机制对应于C-Move命令的特殊情况，其中目标和颁发者是相同的成像设备。因此，查询/检索中最常见的配置问题是忘记在“源”设备的配置中声明“颁发者/目标”设备的AET。</p>
<p>​    Orthanc既可以作为C-Move客户机(SCU)，也可以作为C-Move服务器(SCP)。这意味着Orthanc既可以发起查询/检索，也可以作为查询/检索请求的一部分被驱动。您可能想看看本书的“配置DICOM查询/检索”一节，了解如何具体配置Orthanc进行查询/检索。</p>
<p>​    在完成C-Find查询后，可以从Orthanc Explorer界面发起C-Move会话。只需点击感兴趣的研究或系列右侧的下载按钮即可:</p>
<p><img src="/2021-09-16-%E9%80%9A%E8%BF%87Orthanc%E4%BA%86%E8%A7%A3DICOM/CMoveGui1.png" alt="_images/CMoveGui1.png"></p>
<p>​    然后弹出一个对话框，询问目标模态的AET。默认情况下，这个字段是用Orthanc的AET预填充的，它对应于一个查询/检索的开始:</p>
<p><img src="/2021-09-16-%E9%80%9A%E8%BF%87Orthanc%E4%BA%86%E8%A7%A3DICOM/CMoveGui2.png" alt="_images/CMoveGui2.png"></p>
<p>注1:即使C-Move似乎违反直觉，这是对PACS服务器发起查询/检索的最流行和广泛的方式。DICOM标准提供了一种名为DICOM C-Get的替代机制，该机制已在Orthanc 1.7.0中引入(见下文)。</p>
<p>注2:如上所述，Orthanc引擎是非常通用的，并与许多图像压缩算法(aka。传输语法)。特别是，在表示上下文的协商过程中，Orthanc报告默认情况下它与jpeg2000编码兼容。这导致一些PACS引擎在将图像发送给Orthanc之前先压缩图像，以减少网络带宽。不幸的是，由于许多医学图像分析软件与这种图像压缩不兼容，Orthanc接收到的JPEG 2000图像可能无法被此类软件使用。查看关于DICOM转码的FAQ，了解更多关于在DICOM协议上转换转换语法的信息。</p>
<h3 id="C-Get-使用单个SCP进行检索"><a href="#C-Get-使用单个SCP进行检索" class="headerlink" title="C-Get:使用单个SCP进行检索"></a>C-Get:使用单个SCP进行检索</h3><p>​    Orthanc 1.7.0引入对DICOM C-Get SCP的支持。DICOM C-Get提供了DICOM C-Move的一个更简单的替代方案，如果发行者和目标(如C-Move一节所描述的)对应相同的模式:</p>
<p><img src="/2021-09-16-%E9%80%9A%E8%BF%87Orthanc%E4%BA%86%E8%A7%A3DICOM/image-20210916171554857.png" alt="image-20210916171554857"></p>
<p>​    在C-Get的情况下，与C-Move相反，目标模式不需要充当C-Store SCP:请求的数据通过C-Get请求所在的DICOM关联直接发送回客户端。因此，C-Get请求并不依赖于将DICOM从移除源移动到移除目标所建立的独立关联。相反，C-Get返回发出请求的同一个连接，并重用该连接来接收入站C-Store操作。</p>
<p>​    这样做的好处是简化了SCU的设计(在源模式中只需要一个DICOM服务器)，并简化了网络配置(C-Get不是通过C-Move进行查询/检索时的双向，而是从颁发者到源的单向，这简化了防火墙规则)。然而，C-Get不如C-Move通用，在临床PACS工作流程中也不常见。DICOM查看器更经常使用它。还要注意DICOMweb WADO-RS是为与C-Get相同的用例而设计的。</p>
<p>​    关于C-Get DICOM请求的完整描述，以及C-Get相对于C-Move的优势，请参阅David Clunie的博客文章。</p>
<p>​    实际上，要使用C-Get检索DICOM实例，必须提供一个或多个惟一的键属性(PatientID、StudyInstanceUID、SeriesInstanceUID或SOPInstanceUID)。例如，可以通过C-Find请求检索该信息。作为一个例子，让我们考虑以下最简的Orthanc配置:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;DicomModalities&quot; : &#123;</span><br><span class="line">    &quot;getscu&quot; : [ &quot;GETSCU&quot;, &quot;localhost&quot;, 2000 ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有了这个配置，下面是一个示例命令行，使用DCMTK工具包调用Orthanc的C-Get SCP，并给出一些已知的StudyInstanceUID:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">getscu -v localhost 4242 -aec ORTHANC -k <span class="string">&quot;0008,0052=STUDY&quot;</span> -k <span class="string">&quot;0020,000d=1.2.840.113543.6.6.4.7.64067529866380271256212683512383713111129&quot;</span></span></span><br></pre></td></tr></table></figure>

<p>注意:从Orthanc 1.9.7开始，Orthanc只实现C-Get作为服务类提供者(SCP)。Orthanc目前不支持使用C-Get作为服务类用户(SCU)。</p>
<h3 id="使用HTTP而不是DICOM协议"><a href="#使用HTTP而不是DICOM协议" class="headerlink" title="使用HTTP而不是DICOM协议"></a>使用HTTP而不是DICOM协议</h3><p>​    我们坚持DICOM协议本质上针对的是单个医院的内部网，而不是互联网或云，以此来总结对DICOM的简要概述。该协议可能会被出站防火墙阻止，而且没有约定确保所有医院的AETs是全球唯一的。</p>
<p>​    此外，尽管Orthanc支持DICOM TLS加密，但该功能在医院中很少启用。因此，您可能希望在DICOM上下文中利用HTTP协议，这取决于您的应用程序。这种基于web的协议可能对医生/物理学家/软件工程师更熟悉，更容易使用，可以透明加密(HTTPS)，并与多医院场景兼容。为此，你有两种可能:</p>
<ul>
<li>求助于Orthanc对等机制。因为每个Orthanc服务器都带有其内置的REST API，远程系统可以获得对Orthanc内容的完全编程控制。这种访问可以通过HTTP身份验证和SSL加密来保护。Orthanc Explorer接口可以透明地使用这种对等机制通过HTTP(S)发送DICOM文件。</li>
<li>求助于DICOMweb标准，它是DICOM标准的扩展，指定了如何通过HTTP(S)访问远程DICOM服务器的内容。由于对等机制被绑定到Orthanc, DICOMweb提供了对远程服务器的表达性较差但更通用的访问。重要的是，Orthanc的DICOMweb插件是免费的。</li>
</ul>
]]></content>
      <categories>
        <category>医学影像处理</category>
      </categories>
      <tags>
        <tag>医学影像处理</tag>
        <tag>Dicom</tag>
        <tag>翻译</tag>
      </tags>
  </entry>
  <entry>
    <title>react-three-fiber 爬坑记录</title>
    <url>/2021-10-12-react-three-fiber-%E7%88%AC%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>react-three-fiber 是一个利用React的特性，来封装three.js的库，让three.js和react结合起来更方便使用。</p>
<span id="more"></span>



<h2 id="报错记录"><a href="#报错记录" class="headerlink" title="报错记录"></a>报错记录</h2><h3 id="ts-报错-is-missing-the-following-properties-from-type"><a href="#ts-报错-is-missing-the-following-properties-from-type" class="headerlink" title="ts 报错 is missing the following properties from type"></a>ts 报错 is missing the following properties from type</h3><p><strong>解决方式：</strong></p>
<p>来自discord</p>
<p><img src="/2021-10-12-react-three-fiber-%E7%88%AC%E5%9D%91%E8%AE%B0%E5%BD%95/image-20211012165253939.png" alt="image-20211012165253939"></p>
<p>但是安装 @types/three 会引发更多的报错</p>
<p><img src="/2021-10-12-react-three-fiber-%E7%88%AC%E5%9D%91%E8%AE%B0%E5%BD%95/image-20211012165340153.png" alt="image-20211012165340153"></p>
<p>部分问题似乎是之前写的不规范导致，改正后可以修复</p>
<h3 id="source-map-loader-报错"><a href="#source-map-loader-报错" class="headerlink" title="source map loader 报错"></a>source map loader 报错</h3><p><img src="/2021-10-12-react-three-fiber-%E7%88%AC%E5%9D%91%E8%AE%B0%E5%BD%95/image-20211012170156490.png" alt="image-20211012170156490"></p>
<p>目前无解决方案，只能暂时忽略这个错误</p>
<p>webpack中增加配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  <span class="comment">// 忽略报错</span></span><br><span class="line"><span class="attr">ignoreWarnings</span>: [<span class="regexp">/Failed to parse source map/</span>],</span><br></pre></td></tr></table></figure>



<h3 id="编译出现警告"><a href="#编译出现警告" class="headerlink" title="编译出现警告"></a>编译出现警告</h3><p><img src="/2021-10-12-react-three-fiber-%E7%88%AC%E5%9D%91%E8%AE%B0%E5%BD%95/image-20211014151722949.png" alt="image-20211014151722949"></p>
<p>@chevrotain 的这个内部包，似乎有点不规范</p>
<h3 id="使用-shaderMaterials-出现问题"><a href="#使用-shaderMaterials-出现问题" class="headerlink" title="使用 shaderMaterials 出现问题"></a>使用 shaderMaterials 出现问题</h3><p>然后放到mesh之类的组件里面用的话，会报出错误：</p>
<p>Class constructors cannot be invoked without ‘new’</p>
<p>目前尚无比较好的解决方案，只能先这样写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Uint16Material</span> = &#123;</span><br><span class="line">  <span class="attr">uniforms</span>: &#123;</span><br><span class="line">    <span class="attr">diffuse</span>: &#123; <span class="attr">value</span>: <span class="literal">undefined</span> &#125;,</span><br><span class="line">    <span class="attr">depth</span>: &#123; <span class="attr">value</span>: <span class="number">20</span> &#125;,</span><br><span class="line">    <span class="attr">size</span>: &#123; <span class="attr">value</span>: <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector2</span>(<span class="number">0</span>, <span class="number">0</span>) &#125;,</span><br><span class="line">    <span class="attr">ww</span>: &#123; <span class="attr">value</span>: <span class="literal">undefined</span> &#125;,</span><br><span class="line">    <span class="attr">wl</span>: &#123; <span class="attr">value</span>: <span class="literal">undefined</span> &#125;,</span><br><span class="line">    <span class="attr">rescaleSlope</span>: &#123; <span class="attr">value</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    <span class="attr">rescaleIntercept</span>: &#123; <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    <span class="attr">type</span>: &#123; <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    <span class="attr">numOfSlice</span>: &#123; <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">vertexShader</span>: <span class="variable constant_">RENDER_VERTEX_SHADER</span>,</span><br><span class="line">  <span class="attr">fragmentShader</span>: <span class="variable constant_">RENDER_FRAGMENT_SHADER</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">mesh</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">planeGeometry</span> <span class="attr">args</span>=<span class="string">&#123;[50,</span> <span class="attr">50</span>]&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">shaderMaterial</span> <span class="attr">attach</span>=<span class="string">&quot;material&quot;</span> <span class="attr">args</span>=<span class="string">&#123;[Uint16Material]&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">mesh</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<h2 id="测试记录"><a href="#测试记录" class="headerlink" title="测试记录"></a>测试记录</h2><h3 id="在-pacs-frontend-中测试基础demo"><a href="#在-pacs-frontend-中测试基础demo" class="headerlink" title="在 pacs-frontend 中测试基础demo"></a>在 pacs-frontend 中测试基础demo</h3><p><img src="/2021-10-12-react-three-fiber-%E7%88%AC%E5%9D%91%E8%AE%B0%E5%BD%95/image-20211014152326597.png" alt="image-20211014152326597"></p>
<p>目测来看是没有什么别的问题了，除了编译的时候，内部包会因为存在不规范而报错。</p>
<h2 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h2><h3 id="为什么例如-mesh-这种标签，不需要通过import-引入？"><a href="#为什么例如-mesh-这种标签，不需要通过import-引入？" class="headerlink" title="为什么例如 mesh 这种标签，不需要通过import 引入？"></a>为什么例如 mesh 这种标签，不需要通过import 引入？</h3><p>所有three.js对象都将被视为原生JSX元素，就像你可以在常规的ReactDOM中写 <div /> 或 <span /></p>
<p>一般的规则是，在three.js中，Fiber组件的名称以驼峰形式出现。</p>
<p>来源 <a href="https://docs.pmnd.rs/react-three-fiber/getting-started/your-first-scene">https://docs.pmnd.rs/react-three-fiber/getting-started/your-first-scene</a></p>
]]></content>
      <categories>
        <category>计算机图形学</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>React</tag>
        <tag>threejs</tag>
        <tag>图形学</tag>
      </tags>
  </entry>
  <entry>
    <title>在3D图形引擎中，使 2D Sprite 填充满窗口的做法</title>
    <url>/2021-10-25-%E5%9C%A83D%E5%9B%BE%E5%BD%A2%E5%BC%95%E6%93%8E%E4%B8%AD%EF%BC%8C%E4%BD%BF-2D-Sprite-%E5%A1%AB%E5%85%85%E6%BB%A1%E7%AA%97%E5%8F%A3%E7%9A%84%E5%81%9A%E6%B3%95/</url>
    <content><![CDATA[<p>最近尝试在three.js中渲染DICOM影像，由于three.js是一个3D的图形引擎，所以做一些2D的操作相对来说是不那么方便的。</p>
<span id="more"></span>



<h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h2><p>现在能利用three.js 配合 @react-three/drei 辅助库，来渲染基本的DICOM影像数据了，但是问题是three.js 是一个3D引擎，DICOM影像是作为一个mesh的材质来渲染的，现在需要让它能智能的填充整个窗口，并且不应该去拉伸这个mesh。</p>
<p><img src="/2021-10-25-%E5%9C%A83D%E5%9B%BE%E5%BD%A2%E5%BC%95%E6%93%8E%E4%B8%AD%EF%BC%8C%E4%BD%BF-2D-Sprite-%E5%A1%AB%E5%85%85%E6%BB%A1%E7%AA%97%E5%8F%A3%E7%9A%84%E5%81%9A%E6%B3%95/image-20211025200805998.png" alt="image-20211025200805998"></p>
<h2 id="查阅资料"><a href="#查阅资料" class="headerlink" title="查阅资料"></a>查阅资料</h2><p>网上一些资料来源自 Unity 的论坛：</p>
<p><a href="https://answers.unity.com/questions/620699/scaling-my-background-sprite-to-fill-screen-2d-1.html">https://answers.unity.com/questions/620699/scaling-my-background-sprite-to-fill-screen-2d-1.html</a></p>
<p><a href="https://answers.unity.com/questions/687230/2d-scaling-sprites-by-screen-resolution.html">https://answers.unity.com/questions/687230/2d-scaling-sprites-by-screen-resolution.html</a></p>
<p>但是three.js的资料是比较缺乏的，但是它们都是3D的图形引擎，从原理上来说都是相同的。</p>
<h2 id="着手解决"><a href="#着手解决" class="headerlink" title="着手解决"></a>着手解决</h2><h3 id="step-1-首先新增一个-重置的按钮，和配套事件"><a href="#step-1-首先新增一个-重置的按钮，和配套事件" class="headerlink" title="step.1 首先新增一个 重置的按钮，和配套事件"></a>step.1 首先新增一个 重置的按钮，和配套事件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">position:</span> &#x27;<span class="attr">relative</span>&#x27; &#125;&#125;&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Button</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">position:</span> &#x27;<span class="attr">absolute</span>&#x27;, <span class="attr">zIndex:</span> <span class="attr">1</span>, <span class="attr">fontSize:</span> &#x27;<span class="attr">8px</span>&#x27;, <span class="attr">padding:</span> &#x27;<span class="attr">4px</span>&#x27; &#125;&#125;&gt;</span></span><br><span class="line">    重置</span><br><span class="line">  <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Canvas</span> <span class="attr">camera</span>=<span class="string">&#123;&#123;</span> <span class="attr">position:</span> [<span class="attr">0</span>, <span class="attr">0</span>, <span class="attr">70</span>], <span class="attr">fov:</span> <span class="attr">45</span> &#125;&#125;&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;null&#125;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">color</span> <span class="attr">attach</span>=<span class="string">&quot;background&quot;</span> <span class="attr">args</span>=<span class="string">&#123;[0,</span> <span class="attr">0.3</span>, <span class="attr">0.5</span>]&#125; /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">DicomImage</span> <span class="attr">uniforms</span>=<span class="string">&#123;uniforms&#125;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">OrbitControls</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>计算机图形学</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>threejs</tag>
        <tag>图形学</tag>
      </tags>
  </entry>
  <entry>
    <title>FIBBR菲伯尔混合光纤USB数据线简评</title>
    <url>/2021-10-30-FIBBR%E8%8F%B2%E4%BC%AF%E5%B0%94%E6%B7%B7%E5%90%88%E5%85%89%E7%BA%A4USB%E6%95%B0%E6%8D%AE%E7%BA%BF%E7%AE%80%E8%AF%84/</url>
    <content><![CDATA[<h2 id="🔵前言"><a href="#🔵前言" class="headerlink" title="🔵前言"></a>🔵前言</h2><p>​        如今越来越多的VR一体设备进入市场，如Oculus quest 2，PICO，Vive VR等，玩家可以在一体机上很方便的游玩安卓平台的VR游戏，也能够通过串流的方式来玩PC平台上的高画质VR游戏。主流的串流方式主要有利用USB线，或者利用路由器来传送数据，如果选用USB进行串流的话，那么一根高质量的USB数据线就十分重要。</p>
<span id="more"></span>

<h2 id="🔵FIBBR菲伯尔-串流线"><a href="#🔵FIBBR菲伯尔-串流线" class="headerlink" title="🔵FIBBR菲伯尔 串流线"></a>🔵FIBBR菲伯尔 串流线</h2><p>​        作为一名VR玩家，这一次非常荣幸收到FIBBR官方送串流线，我也是第一次写和VR串流相关的测评，如果有不专业的地方希望大家谅解。</p>
<p>​        这一次由于库存不足的原因，FIBBR官方给我发发的是FIBBR串流光纤线的海外版，但是它和国行的版本在使用上应该不会有太大的区别。</p>
<h3 id="🔹产品的包装"><a href="#🔹产品的包装" class="headerlink" title="🔹产品的包装"></a>🔹产品的包装</h3><p>海外版的正反面的包装比较简约，主要介绍了串流线的用途和规格。</p>
<p><img src="/2021-10-30-FIBBR%E8%8F%B2%E4%BC%AF%E5%B0%94%E6%B7%B7%E5%90%88%E5%85%89%E7%BA%A4USB%E6%95%B0%E6%8D%AE%E7%BA%BF%E7%AE%80%E8%AF%84/IMG_20211030_102828.jpg" alt="IMG_20211030_102828"></p>
<p>我们可以看到产品的背面包装图上写着，产品的长度为15FT，FT是英寸的单位，15FT大概是4.57米，官方线的长度是5米，只比官方线略短了不到0.5米，实际游玩下来，这个长度已经能够满足大多数玩家对于游玩VR游戏的一个需求。</p>
<p><img src="/2021-10-30-FIBBR%E8%8F%B2%E4%BC%AF%E5%B0%94%E6%B7%B7%E5%90%88%E5%85%89%E7%BA%A4USB%E6%95%B0%E6%8D%AE%E7%BA%BF%E7%AE%80%E8%AF%84/IMG_20211030_102845.jpg" alt="IMG_20211030_102845"></p>
<h3 id="🔹产品的内部"><a href="#🔹产品的内部" class="headerlink" title="🔹产品的内部"></a>🔹产品的内部</h3><p>​        我们可以看到FIBBR的串流线的设计和官方出品的串流线都是采用一段直插一段弯插的设计，这样非常利于在VR设备上进行使用。</p>
<p>​        线材使用了3个绑带绑好，对于后续的收纳来说是十分方便的。并且在线材的两端都用了透明的塑料薄膜，和塑料壳进行保护。</p>
<p><img src="/2021-10-30-FIBBR%E8%8F%B2%E4%BC%AF%E5%B0%94%E6%B7%B7%E5%90%88%E5%85%89%E7%BA%A4USB%E6%95%B0%E6%8D%AE%E7%BA%BF%E7%AE%80%E8%AF%84/IMG_20211030_103101.jpg" alt="IMG_20211030_103101"></p>
<h3 id="🔹与Oculus-quest-2-连接"><a href="#🔹与Oculus-quest-2-连接" class="headerlink" title="🔹与Oculus quest 2 连接"></a>🔹与Oculus quest 2 连接</h3><p>我用了一个在tb上买的头戴，并不是官方的头戴。串流线只需要和quest2设备的usb口连接，另一端和PC端连接就好了，PC上需要有一个type-c的接口，而不是USB的接口。</p>
<p><img src="/2021-10-30-FIBBR%E8%8F%B2%E4%BC%AF%E5%B0%94%E6%B7%B7%E5%90%88%E5%85%89%E7%BA%A4USB%E6%95%B0%E6%8D%AE%E7%BA%BF%E7%AE%80%E8%AF%84/IMG_20211030_105600.jpg" alt="IMG_20211030_105600"></p>
<h2 id="🔵实际串流体验"><a href="#🔵实际串流体验" class="headerlink" title="🔵实际串流体验"></a>🔵实际串流体验</h2><p>接下来就是重要部分了，实际测试一下该线在串流游玩VR游戏的具体表现。</p>
<h3 id="🔹测试平台"><a href="#🔹测试平台" class="headerlink" title="🔹测试平台"></a>🔹测试平台</h3><p><strong>操作系统</strong>    Windows 10 专业版 64位 ( DirectX 12 )<br><strong>处理器</strong>    英特尔 Core i7-6700K @ 4.00GHz 四核<br><strong>主板</strong>    华硕 Z170-AR ( 100 Series/C230 Series 芯片组 Family - A145 )<br><strong>内存</strong>    16 GB ( 金士顿 DDR4 2666MHz )<br><strong>显卡</strong>    Nvidia GeForce GTX 1070 ( 8 GB / Nvidia )</p>
<p>高情商来说就说，这一套平台是比较亲民的，可能能够反映大多数玩家的一个情况，低情商来说，对于VR游戏来说属于是比较低配的一套平台了。但是在显卡价格这么高，想买到原价的30系显卡特别困难，所以一直没有升级电脑配置，哎….</p>
<h3 id="🔹对比的串流线"><a href="#🔹对比的串流线" class="headerlink" title="🔹对比的串流线"></a>🔹对比的串流线</h3><p>之前曾经在tb上买过一条比较廉价的usb数据线，就以它为对比：</p>
<p><img src="/2021-10-30-FIBBR%E8%8F%B2%E4%BC%AF%E5%B0%94%E6%B7%B7%E5%90%88%E5%85%89%E7%BA%A4USB%E6%95%B0%E6%8D%AE%E7%BA%BF%E7%AE%80%E8%AF%84/IMG_20211030_110559.jpg" alt="IMG_20211030_110559"></p>
<h3 id="🔹使用的画质设置"><a href="#🔹使用的画质设置" class="headerlink" title="🔹使用的画质设置"></a>🔹使用的画质设置</h3><p>由于电脑配置比较一般，所以72HZ和1.0的分辨率</p>
<p><img src="/2021-10-30-FIBBR%E8%8F%B2%E4%BC%AF%E5%B0%94%E6%B7%B7%E5%90%88%E5%85%89%E7%BA%A4USB%E6%95%B0%E6%8D%AE%E7%BA%BF%E7%AE%80%E8%AF%84/11-16355646631222.png" alt="11"></p>
<h3 id="🔹测试游戏"><a href="#🔹测试游戏" class="headerlink" title="🔹测试游戏"></a>🔹测试游戏</h3><p>测试的游戏选用的是《半条命：alyx》 </p>
<p>实际游玩下来的感受是，TB买的线经常出现断流，连接不良的情况，导致游玩中断，而FIBBR的线不会出现这种情况，整个游玩的过程都比较稳定。</p>
<h4 id="FIBBR线"><a href="#FIBBR线" class="headerlink" title="FIBBR线"></a>FIBBR线</h4><p>串流延迟全程大概在46~48ms左右，比较稳定</p>
<p><img src="/2021-10-30-FIBBR%E8%8F%B2%E4%BC%AF%E5%B0%94%E6%B7%B7%E5%90%88%E5%85%89%E7%BA%A4USB%E6%95%B0%E6%8D%AE%E7%BA%BF%E7%AE%80%E8%AF%84/44.png" alt="44"></p>
<h4 id="TB买到串流线"><a href="#TB买到串流线" class="headerlink" title="TB买到串流线"></a>TB买到串流线</h4><p>串流延迟全程大概在55ms左右,有些时候会特别高</p>
<p><img src="/2021-10-30-FIBBR%E8%8F%B2%E4%BC%AF%E5%B0%94%E6%B7%B7%E5%90%88%E5%85%89%E7%BA%A4USB%E6%95%B0%E6%8D%AE%E7%BA%BF%E7%AE%80%E8%AF%84/33.png" alt="33"></p>
<h3 id="🔹总结"><a href="#🔹总结" class="headerlink" title="🔹总结"></a>🔹总结</h3><p>​        由于电脑配置本身不高，所以看起来串流延迟都比较高，但是相比一般的type-c线而言，FIBBR线对于串流游玩VR游戏存在一定程度的提升，减少了串流的延迟，相比一般的线而言更加稳定，不会出现断流的情况。</p>
]]></content>
      <categories>
        <category>VR</category>
      </categories>
      <tags>
        <tag>测评</tag>
        <tag>VR</tag>
        <tag>串流线</tag>
      </tags>
  </entry>
  <entry>
    <title>three.js 中控制器 orbitControls 原理解析</title>
    <url>/2021-11-25-three-js-%E4%B8%AD%E6%8E%A7%E5%88%B6%E5%99%A8-orbitControls-%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p>主要是orbitControls源码的解析，为了帮助自己理解three.js中摄像头操作的一些机制，为后续开发提供思路。</p>
<span id="more"></span>

<h2 id="🔵源码地址"><a href="#🔵源码地址" class="headerlink" title="🔵源码地址"></a>🔵源码地址</h2><p><a href="https://github.com/mrdoob/three.js/blob/dev/examples/jsm/controls/OrbitControls.js">https://github.com/mrdoob/three.js/blob/dev/examples/jsm/controls/OrbitControls.js</a></p>
<p>不属于three.js 中核心库的部分，而是在examples 中</p>
<h2 id="🔵从构造函数入手"><a href="#🔵从构造函数入手" class="headerlink" title="🔵从构造函数入手"></a>🔵从构造函数入手</h2><p>OrbitControls 类继承了 EventDispatcher</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OrbitControls</span> <span class="keyword">extends</span> <span class="title class_ inherited__">EventDispatcher</span> </span><br></pre></td></tr></table></figure>

<p><strong>EventDispatcher</strong> 来自于另一个库：</p>
<p><a href="https://github.com/mrdoob/eventdispatcher.js/">https://github.com/mrdoob/eventdispatcher.js/</a></p>
<p>用来给自定义object添加事件</p>
<p><strong>轨道控制器（OrbitControls）</strong>在代码中的使用方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const controls = new OrbitControls( camera, renderer.domElement );</span><br></pre></td></tr></table></figure>

<p>它的构造函数的第一个参数需要传入摄像机，第二个参数传入了 渲染器的 dom元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"> object, domElement </span>) &#123;</span><br><span class="line"></span><br><span class="line">		<span class="variable language_">super</span>();</span><br><span class="line">    	<span class="keyword">if</span> ( domElement === <span class="literal">undefined</span> ) <span class="variable language_">console</span>.<span class="title function_">warn</span>( <span class="string">&#x27;THREE.OrbitControls: The second parameter &quot;domElement&quot; is now mandatory.&#x27;</span> );</span><br><span class="line">		<span class="keyword">if</span> ( domElement === <span class="variable language_">document</span> ) <span class="variable language_">console</span>.<span class="title function_">error</span>( <span class="string">&#x27;THREE.OrbitControls: &quot;document&quot; should not be used as the target &quot;domElement&quot;. Please use &quot;renderer.domElement&quot; instead.&#x27;</span> );</span><br><span class="line"></span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">object</span> = object;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">domElement</span> = domElement;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">domElement</span>.<span class="property">style</span>.<span class="property">touchAction</span> = <span class="string">&#x27;none&#x27;</span>; <span class="comment">// disable touch scroll</span></span><br><span class="line">    	...</span><br></pre></td></tr></table></figure>

<p>后面对一些参数进行了初设化（只展示部分）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Set to false to disable this control</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">enabled</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &quot;target&quot; sets the location of focus, where the object orbits around</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">target</span> = <span class="keyword">new</span> <span class="title class_">Vector3</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// How far you can dolly in and out ( PerspectiveCamera only )</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">minDistance</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">maxDistance</span> = <span class="title class_">Infinity</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// How far you can zoom in and out ( OrthographicCamera only )</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">minZoom</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">maxZoom</span> = <span class="title class_">Infinity</span>;</span><br></pre></td></tr></table></figure>



<h2 id="🔵reset-方法"><a href="#🔵reset-方法" class="headerlink" title="🔵reset 方法"></a>🔵reset 方法</h2><p><strong>源码：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">reset</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">	scope.<span class="property">target</span>.<span class="title function_">copy</span>( scope.<span class="property">target0</span> );</span><br><span class="line">	scope.<span class="property">object</span>.<span class="property">position</span>.<span class="title function_">copy</span>( scope.<span class="property">position0</span> );</span><br><span class="line">	scope.<span class="property">object</span>.<span class="property">zoom</span> = scope.<span class="property">zoom0</span>;</span><br><span class="line"></span><br><span class="line">	scope.<span class="property">object</span>.<span class="title function_">updateProjectionMatrix</span>();</span><br><span class="line">	scope.<span class="title function_">dispatchEvent</span>( _changeEvent );</span><br><span class="line"></span><br><span class="line">	scope.<span class="title function_">update</span>();</span><br><span class="line"></span><br><span class="line">	state = <span class="variable constant_">STATE</span>.<span class="property">NONE</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这里使用了 state 来保存之前的 camera状态</p>
]]></content>
      <categories>
        <category>计算机图形学</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>threejs</tag>
        <tag>图形学</tag>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>Vscode中使用shader glsl的整理</title>
    <url>/2021-12-15-Vscode%E4%B8%AD%E4%BD%BF%E7%94%A8shader-glsl%E7%9A%84%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>在vscode中如何写shader代码的整理</p>
<span id="more"></span>

<p>ps: 本次整理的内容截止 2021.12.15 能在vscode上正常使用</p>
<h2 id="🔹代码高亮"><a href="#🔹代码高亮" class="headerlink" title="🔹代码高亮"></a>🔹代码高亮</h2><p>安装插件：</p>
<p><strong>Shader languages support for VS Code</strong></p>
<p><img src="/2021-12-15-Vscode%E4%B8%AD%E4%BD%BF%E7%94%A8shader-glsl%E7%9A%84%E6%95%B4%E7%90%86/image-20211215151600429.png" alt="image-20211215151600429"></p>
<p>安装之后，shader 代码应该就有高亮显示了：</p>
<p>目前支持的文件后缀：</p>
<table>
<thead>
<tr>
<th align="center">ID</th>
<th align="left">名称</th>
<th align="left">文件扩展名</th>
<th align="left">语法</th>
<th align="left">片段</th>
</tr>
</thead>
<tbody><tr>
<td align="center">hlsl</td>
<td align="left">hlsl</td>
<td align="left"><code>.sf</code></td>
<td align="left">—</td>
<td align="left">—</td>
</tr>
<tr>
<td align="center">glsl</td>
<td align="left">GLSL</td>
<td align="left"><code>.vs</code> <code>.fs</code> <code>.gs</code> <code>.comp</code> <code>.vert</code> <code>.tesc</code> <code>.tese</code> <code>.frag</code> <code>.geom</code> <code>.glsl</code> <code>.glslv</code> <code>.glslf</code> <code>.glslg</code></td>
<td align="left">✔︎</td>
<td align="left">—</td>
</tr>
<tr>
<td align="center">cg</td>
<td align="left">Cg</td>
<td align="left"><code>.cg</code></td>
<td align="left">✔︎</td>
<td align="left">—</td>
</tr>
</tbody></table>
<h2 id="🔹静态代码检查"><a href="#🔹静态代码检查" class="headerlink" title="🔹静态代码检查"></a>🔹静态代码检查</h2><p>安装插件：</p>
<p><strong>GLSL Linter</strong></p>
<p>另外还有一个插件 <strong>GLSL Lint</strong>，目前尝试没有成功使用…</p>
<p>所以后面暂时都使用 <strong>GLSL Linter</strong></p>
<p><img src="/2021-12-15-Vscode%E4%B8%AD%E4%BD%BF%E7%94%A8shader-glsl%E7%9A%84%E6%95%B4%E7%90%86/image-20211215152113189.png" alt="image-20211215152113189"></p>
<p>安装插件之后，需要下载 glslang：</p>
<p><a href="https://github.com/KhronosGroup/glslang/releases">https://github.com/KhronosGroup/glslang/releases</a></p>
<p><img src="/2021-12-15-Vscode%E4%B8%AD%E4%BD%BF%E7%94%A8shader-glsl%E7%9A%84%E6%95%B4%E7%90%86/image-20211215154325063.png" alt="image-20211215154325063"></p>
<p>之后需要设置一个路径：</p>
<p><img src="/2021-12-15-Vscode%E4%B8%AD%E4%BD%BF%E7%94%A8shader-glsl%E7%9A%84%E6%95%B4%E7%90%86/image-20211215154421414.png" alt="image-20211215154421414"></p>
<p>这样做了之后可能还是会报错 <strong>GLSL validator returned exit code 1</strong></p>
<p>请参考这个 issues:</p>
<p><a href="https://github.com/Jacajack/vscode-glsl-linter/issues/4">https://github.com/Jacajack/vscode-glsl-linter/issues/4</a></p>
<p><strong>更改配置文件为</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;glsl-linter.validatorPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:\\glsl\\glslang\\bin\\glslangValidator.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;glsl-linter.fileExtensions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;.fs.glsl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;frag&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;.fs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;frag&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;.vs.glsl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vert&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;vs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vert&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;.tes.glsl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tese&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;.tcs.glsl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tesc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;.gs.glsl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;geom&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>并且 shader 文件不要以 .glsl 来结尾！！！</strong></p>
<h2 id="🔹代码格式化"><a href="#🔹代码格式化" class="headerlink" title="🔹代码格式化"></a>🔹代码格式化</h2><p>安装插件 <strong>Clang-Format</strong></p>
<p><img src="/2021-12-15-Vscode%E4%B8%AD%E4%BD%BF%E7%94%A8shader-glsl%E7%9A%84%E6%95%B4%E7%90%86/image-20211215154731393.png" alt="image-20211215154731393"></p>
<p>设置代码格式化程序为 <strong>Clang-Format</strong></p>
<p>然后使用快捷键 <strong>ctrl + alt +f</strong> 即可格式化</p>
<h2 id="🔹代码补全"><a href="#🔹代码补全" class="headerlink" title="🔹代码补全"></a>🔹代码补全</h2><p><strong>ctrl + shift + p 快捷键</strong></p>
<p>输入 <strong>&gt;user snippets</strong></p>
<p>然后输入 <strong>glsl</strong></p>
<p>进入 <strong>glsl.json</strong></p>
<p>进入链接：<a href="https://gist.github.com/lewislepton/8b17f56baa7f1790a70284e7520f9623">https://gist.github.com/lewislepton/8b17f56baa7f1790a70284e7520f9623</a></p>
<p>将代码复制到 glsl.json中，即可出现代码补全</p>
<p><img src="/2021-12-15-Vscode%E4%B8%AD%E4%BD%BF%E7%94%A8shader-glsl%E7%9A%84%E6%95%B4%E7%90%86/image-20211215155218201.png" alt="image-20211215155218201"></p>
<h2 id="🔹快速展示"><a href="#🔹快速展示" class="headerlink" title="🔹快速展示"></a>🔹快速展示</h2><p>安装插件 <strong>glsl-canvas</strong></p>
<p>使用方法：</p>
<p><strong>ctrl + shift + p 快捷键</strong></p>
<p>输入 <strong>show glslCanvas</strong></p>
<p>简单效果:</p>
<p><img src="/2021-12-15-Vscode%E4%B8%AD%E4%BD%BF%E7%94%A8shader-glsl%E7%9A%84%E6%95%B4%E7%90%86/image-20211215161654890.png" alt="image-20211215161654890"></p>
<h2 id="🔹shader-文件导入-three-js"><a href="#🔹shader-文件导入-three-js" class="headerlink" title="🔹shader 文件导入 three.js"></a>🔹shader 文件导入 three.js</h2><h3 id="Games202-中的方法参考"><a href="#Games202-中的方法参考" class="headerlink" title="Games202 中的方法参考"></a>Games202 中的方法参考</h3><p>直接读取文件，然后获得字符串</p>
<p><strong>使用例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">material = <span class="title function_">buildPhongMaterial</span>(colorMap, mat.<span class="property">specular</span>.<span class="title function_">toArray</span>(), light, <span class="title class_">Translation</span>, <span class="title class_">Scale</span>, <span class="string">&quot;./src/shaders/phongShader/phongVertex.vs&quot;</span>, <span class="string">&quot;./src/shaders/phongShader/phongFragment.fs&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>buildPhongMaterial 方法</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">buildPhongMaterial</span>(<span class="params">color, specular, light, translate, scale, vertexPath, fragmentPath</span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> vertexShader = <span class="keyword">await</span> <span class="title function_">getShaderString</span>(vertexPath);</span><br><span class="line">    <span class="keyword">let</span> fragmentShader = <span class="keyword">await</span> <span class="title function_">getShaderString</span>(fragmentPath);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PhongMaterial</span>(color, specular, light, translate, scale, vertexShader, fragmentShader);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>getShaderString 方法</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">loadShaderFile</span>(<span class="params">filename</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> loader = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">FileLoader</span>();</span><br><span class="line"></span><br><span class="line">        loader.<span class="title function_">load</span>(filename, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(data);</span><br><span class="line">            <span class="comment">//console.log(data);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getShaderString</span>(<span class="params">filename</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> val = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">loadShaderFile</span>(filename).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        val = result;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//console.log(val);</span></span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="webpack-的方法"><a href="#webpack-的方法" class="headerlink" title="webpack 的方法"></a>webpack 的方法</h3><p>首先需要安装 <strong>raw-loader</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yarn add raw-loader --dev</span></span><br></pre></td></tr></table></figure>

<p>配置 <strong>webpack</strong> ，例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.(glsl|vs|fs|vert|frag)$/</span>,</span><br><span class="line">    <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">    <span class="attr">use</span>: [<span class="string">&#x27;raw-loader&#x27;</span>],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>然后shader文件，直接导入即可</p>
<p><strong>使用例：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> vertexShaderFirstPass <span class="keyword">from</span> <span class="string">&#x27;./shaders/vertexShaderFirstPass.vert&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> fragmentShaderFirstPass <span class="keyword">from</span> <span class="string">&#x27;./shaders/fragmentShaderFirstPass.frag&#x27;</span>;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">const</span> materialFirstPass = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">ShaderMaterial</span>(&#123;</span><br><span class="line">    <span class="attr">vertexShader</span>: vertexShaderFirstPass,</span><br><span class="line">    <span class="attr">fragmentShader</span>: fragmentShaderFirstPass,</span><br><span class="line">    <span class="comment">// 定义将要渲染哪一面 - 正面，背面或两者</span></span><br><span class="line">    <span class="comment">// BackSide，FrontSide，DoubleSide</span></span><br><span class="line">    <span class="attr">side</span>: <span class="variable constant_">THREE</span>.<span class="property">BackSide</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h2 id="🔹目前已知缺陷（主要是和three-js-使用）"><a href="#🔹目前已知缺陷（主要是和three-js-使用）" class="headerlink" title="🔹目前已知缺陷（主要是和three.js 使用）"></a>🔹目前已知缺陷（主要是和three.js 使用）</h2><h3 id="静态检查不正确"><a href="#静态检查不正确" class="headerlink" title="静态检查不正确"></a>静态检查不正确</h3><p>注意，和一同three.js使用的时候，three.js帮我们内置了变量</p>
<p>请参考：</p>
<p><a href="https://threejs.org/docs/index.html?q=webgl#api/zh/renderers/webgl/WebGLProgram">https://threejs.org/docs/index.html?q=webgl#api/zh/renderers/webgl/WebGLProgram</a></p>
<p>所以可能会出现如下问题：</p>
<p>undeclared identifier</p>
<p>not supported for this version or the enabled extensions</p>
<p>等等…</p>
<p><strong>这可能是由于 three.js 中使用shader 会对你写的shader重新封装…</strong></p>
<p><strong>例如：</strong></p>
<p>这一段传入的代码会被 three.js 重新封装</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">out</span> <span class="type">vec3</span> worldSpaceCoords;</span><br><span class="line"><span class="type">void</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//Set the world space coordinates of the back faces vertices as output.</span></span><br><span class="line">    worldSpaceCoords = position + <span class="type">vec3</span>(<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>); <span class="comment">//move it from [-0.5;0.5] to [0,1]</span></span><br><span class="line">    <span class="built_in">gl_Position</span> = projectionMatrix * modelViewMatrix * <span class="type">vec4</span>( position, <span class="number">1.0</span> )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实际输出的代码为：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>: <span class="meta">#version 300 es</span></span><br><span class="line"><span class="number">2</span>: <span class="keyword">precision</span> <span class="keyword">mediump</span> <span class="type">sampler2DArray</span>;</span><br><span class="line"><span class="number">3</span>: <span class="meta">#define attribute in</span></span><br><span class="line"><span class="number">4</span>: <span class="meta">#define varying out</span></span><br><span class="line"><span class="number">5</span>: <span class="meta">#define texture2D texture</span></span><br><span class="line"><span class="number">6</span>: <span class="keyword">precision</span> <span class="keyword">highp</span> <span class="type">float</span>;</span><br><span class="line"><span class="number">7</span>: <span class="keyword">precision</span> <span class="keyword">highp</span> <span class="type">int</span>;</span><br><span class="line"><span class="number">8</span>: <span class="meta">#define HIGH_PRECISION</span></span><br><span class="line"><span class="number">9</span>: <span class="meta">#define SHADER_NAME ShaderMaterial</span></span><br><span class="line"><span class="number">10</span>: <span class="meta">#define VERTEX_TEXTURES</span></span><br><span class="line"><span class="number">11</span>: <span class="meta">#define GAMMA_FACTOR 2</span></span><br><span class="line"><span class="number">12</span>: <span class="meta">#define MAX_BONES 0</span></span><br><span class="line"><span class="number">13</span>: <span class="meta">#define BONE_TEXTURE</span></span><br><span class="line"><span class="number">14</span>: <span class="meta">#define FLIP_SIDED</span></span><br><span class="line"><span class="number">15</span>: <span class="keyword">uniform</span> <span class="type">mat4</span> modelMatrix;</span><br><span class="line"><span class="number">16</span>: <span class="keyword">uniform</span> <span class="type">mat4</span> modelViewMatrix;</span><br><span class="line"><span class="number">17</span>: <span class="keyword">uniform</span> <span class="type">mat4</span> projectionMatrix;</span><br><span class="line"><span class="number">18</span>: <span class="keyword">uniform</span> <span class="type">mat4</span> viewMatrix;</span><br><span class="line"><span class="number">19</span>: <span class="keyword">uniform</span> <span class="type">mat3</span> normalMatrix;</span><br><span class="line"><span class="number">20</span>: <span class="keyword">uniform</span> <span class="type">vec3</span> cameraPosition;</span><br><span class="line"><span class="number">21</span>: <span class="keyword">uniform</span> <span class="type">bool</span> isOrthographic;</span><br><span class="line"><span class="number">22</span>: <span class="meta">#ifdef USE_INSTANCING</span></span><br><span class="line"><span class="number">23</span>: 	<span class="keyword">attribute</span> <span class="type">mat4</span> instanceMatrix;</span><br><span class="line"><span class="number">24</span>: <span class="meta">#endif</span></span><br><span class="line"><span class="number">25</span>: <span class="meta">#ifdef USE_INSTANCING_COLOR</span></span><br><span class="line"><span class="number">26</span>: 	<span class="keyword">attribute</span> <span class="type">vec3</span> instanceColor;</span><br><span class="line"><span class="number">27</span>: <span class="meta">#endif</span></span><br><span class="line"><span class="number">28</span>: <span class="keyword">attribute</span> <span class="type">vec3</span> position;</span><br><span class="line"><span class="number">29</span>: <span class="keyword">attribute</span> <span class="type">vec3</span> normal;</span><br><span class="line"><span class="number">30</span>: <span class="keyword">attribute</span> <span class="type">vec2</span> uv;</span><br><span class="line"><span class="number">31</span>: <span class="meta">#ifdef USE_TANGENT</span></span><br><span class="line"><span class="number">32</span>: 	<span class="keyword">attribute</span> <span class="type">vec4</span> tangent;</span><br><span class="line"><span class="number">33</span>: <span class="meta">#endif</span></span><br><span class="line"><span class="number">34</span>: <span class="meta">#if defined( USE_COLOR_ALPHA )</span></span><br><span class="line"><span class="number">35</span>: 	<span class="keyword">attribute</span> <span class="type">vec4</span> color;</span><br><span class="line"><span class="number">36</span>: <span class="meta">#elif defined( USE_COLOR )</span></span><br><span class="line"><span class="number">37</span>: 	<span class="keyword">attribute</span> <span class="type">vec3</span> color;</span><br><span class="line"><span class="number">38</span>: <span class="meta">#endif</span></span><br><span class="line"><span class="number">39</span>: <span class="meta">#if ( defined( USE_MORPHTARGETS ) &amp;&amp; ! defined( MORPHTARGETS_TEXTURE ) )</span></span><br><span class="line"><span class="number">40</span>: 	<span class="keyword">attribute</span> <span class="type">vec3</span> morphTarget0;</span><br><span class="line"><span class="number">41</span>: 	<span class="keyword">attribute</span> <span class="type">vec3</span> morphTarget1;</span><br><span class="line"><span class="number">42</span>: 	<span class="keyword">attribute</span> <span class="type">vec3</span> morphTarget2;</span><br><span class="line"><span class="number">43</span>: 	<span class="keyword">attribute</span> <span class="type">vec3</span> morphTarget3;</span><br><span class="line"><span class="number">44</span>: 	<span class="meta">#ifdef USE_MORPHNORMALS</span></span><br><span class="line"><span class="number">45</span>: 		<span class="keyword">attribute</span> <span class="type">vec3</span> morphNormal0;</span><br><span class="line"><span class="number">46</span>: 		<span class="keyword">attribute</span> <span class="type">vec3</span> morphNormal1;</span><br><span class="line"><span class="number">47</span>: 		<span class="keyword">attribute</span> <span class="type">vec3</span> morphNormal2;</span><br><span class="line"><span class="number">48</span>: 		<span class="keyword">attribute</span> <span class="type">vec3</span> morphNormal3;</span><br><span class="line"><span class="number">49</span>: 	<span class="meta">#else</span></span><br><span class="line"><span class="number">50</span>: 		<span class="keyword">attribute</span> <span class="type">vec3</span> morphTarget4;</span><br><span class="line"><span class="number">51</span>: 		<span class="keyword">attribute</span> <span class="type">vec3</span> morphTarget5;</span><br><span class="line"><span class="number">52</span>: 		<span class="keyword">attribute</span> <span class="type">vec3</span> morphTarget6;</span><br><span class="line"><span class="number">53</span>: 		<span class="keyword">attribute</span> <span class="type">vec3</span> morphTarget7;</span><br><span class="line"><span class="number">54</span>: 	<span class="meta">#endif</span></span><br><span class="line"><span class="number">55</span>: <span class="meta">#endif</span></span><br><span class="line"><span class="number">56</span>: <span class="meta">#ifdef USE_SKINNING</span></span><br><span class="line"><span class="number">57</span>: 	<span class="keyword">attribute</span> <span class="type">vec4</span> skinIndex;</span><br><span class="line"><span class="number">58</span>: 	<span class="keyword">attribute</span> <span class="type">vec4</span> skinWeight;</span><br><span class="line"><span class="number">59</span>: <span class="meta">#endif</span></span><br><span class="line"><span class="number">60</span>: </span><br><span class="line"><span class="number">61</span>: <span class="keyword">out</span> <span class="type">vec3</span> worldSpaceCoords;</span><br><span class="line"><span class="number">62</span>: <span class="type">void</span> main()</span><br><span class="line"><span class="number">63</span>: &#123;</span><br><span class="line"><span class="number">64</span>:     <span class="comment">//Set the world space coordinates of the back faces vertices as output.</span></span><br><span class="line"><span class="number">65</span>:     worldSpaceCoords = position + <span class="type">vec3</span>(<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>); <span class="comment">//move it from [-0.5;0.5] to [0,1]</span></span><br><span class="line"><span class="number">66</span>:     <span class="built_in">gl_Position</span> = projectionMatrix * modelViewMatrix * <span class="type">vec4</span>( position, <span class="number">1.0</span> )</span><br><span class="line"><span class="number">67</span>: &#125;</span><br></pre></td></tr></table></figure>



<p>目前无解，和three.js配合使用时，请关闭代码检查的功能…</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>VsCode安装shader glsl环境</p>
<p><a href="https://zhuanlan.zhihu.com/p/151384233">https://zhuanlan.zhihu.com/p/151384233</a></p>
<p>Jacajack/vscode-glsl-linter</p>
<p><a href="https://github.com/Jacajack/vscode-glsl-linter">https://github.com/Jacajack/vscode-glsl-linter</a></p>
]]></content>
      <categories>
        <category>计算机图形学</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>threejs</tag>
        <tag>图形学</tag>
        <tag>WebGL</tag>
        <tag>shader</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>《末日启示录》规则整理和FAQ</title>
    <url>/2022-01-25-%E3%80%8A%E6%9C%AB%E6%97%A5%E5%90%AF%E7%A4%BA%E5%BD%95%E3%80%8B%E8%A7%84%E5%88%99%E6%95%B4%E7%90%86%E5%92%8CFAQ/</url>
    <content><![CDATA[<p>桌游名称: 末日启示录<br>游玩人数: 1-6(推荐4人)<br>类型: 合作<br>评分/10: 7.5<br>集石链接: <a href="https://www.gstonegames.com/game/info-3266.html">https://www.gstonegames.com/game/info-3266.html</a></p>
<span id="more"></span>



<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前版本 v1.0</p>
<p>感谢 鹿王 和 重楼一叶 的整理。</p>
<p>基本的规则可以参考规则书，或者 重楼一叶 整理的线上规则书</p>
<p><a href="https://coralfox.notion.site/9585f83cb3ff4dd1b42c064acedc335a#518a73f56c4f442c8841a073847d9bff">https://coralfox.notion.site/9585f83cb3ff4dd1b42c064acedc335a#518a73f56c4f442c8841a073847d9bff</a></p>
<p>这里这里一些需要注意的细节和FAQ</p>
<h2 id="配件清单"><a href="#配件清单" class="headerlink" title="配件清单"></a>配件清单</h2><h3 id="末日启示录大扩展清单"><a href="#末日启示录大扩展清单" class="headerlink" title="末日启示录大扩展清单:"></a>末日启示录大扩展清单:</h3><p>末日启示录大扩展清单</p>
<p>3张promo :暴走消防员，猎人，枪手</p>
<p>75张ks:1张解毒剂</p>
<p>2张地狱任务卡，1张提示卡</p>
<p>5张人物卡(狗，老兵，消防员，机械师，外科医生)</p>
<p>18张盟友，地狱恶魔10张，饿死鬼4张，疯狂小丑2张，天启四骑士4张，激光无人机6张，皮皮鬼4张，杀人小丑2张，守护天使3张，下毒小丑2张，小魔10张，邪恶小丑1张</p>
<p>(ks=30张地狱＋45张延伸)</p>
<p>其他205张大扩展的～</p>
<h3 id="末日启示录3小扩展清单"><a href="#末日启示录3小扩展清单" class="headerlink" title="末日启示录3小扩展清单:"></a>末日启示录3小扩展清单:</h3><p>末日启示录3小扩展清单怪兽崛起一共82张</p>
<p>怪物卡18张，机甲卡8张，人物卡52张，任务＋规则4张</p>
<p>害虫之灾40张</p>
<p>怪兽卡37张，任务＋规则3张侏罗纪世界63张</p>
<p>怪物卡27张，人物卡31张，任务＋规则5张</p>
<p><strong>解锁项</strong></p>
<p>无尽杀鹿任务卡一张鹿王boss卡一张</p>
<p>基础任务5和7两张(可替换基础玩，小修改非官方改动)</p>
<p>行动卡6张＋12个亚克力指示物血盘6个</p>
<p>魔煞猎人卡隔1张</p>
<p>diy板块7张(电台，消防局，导弹发射井，富翁桌游店，废弃面包车，幸存者营地，外星传送门)</p>
<p><strong>地图板块</strong></p>
<p>基础38+扩展8+diy7 =53块</p>
<p><strong>勘误</strong></p>
<p>女鬼一张替换大扩展幻觉一张替换大扩展</p>
<h2 id="FAQ和细节"><a href="#FAQ和细节" class="headerlink" title="FAQ和细节"></a>FAQ和细节</h2><p><strong>🔒谨记:</strong><br>1.查阅词汇表<br>2.不要脑补未写明的规则<br>3.卡牌原文优先遵循</p>
<h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ul>
<li>免费行动的弃牌不能 弃掉场上的牌，只能弃掉手牌，且是求生者牌</li>
<li>拾荒行动，一回合同一个地图板块只能拾荒一次</li>
<li>Monsters activate left to right. （怪物从左到右激活。）</li>
<li>discarding gear is always a free action. （丢弃装备 总是一个免费的动作。）</li>
<li>Hunger damage is never avoided （饥饿伤害无法避免）</li>
<li>怪物攻击距离是范围伤害不是指定伤害(意思就是怪物攻击是范围内所有玩家都要扣血，不管普通攻击还是技能伤害)</li>
<li>饥饿值一旦到6立刻把角色卡翻面扣两血</li>
<li>用汽油作为弹药武器，只需要一张汽油卡就可以填满武器。将其使用后放入弃牌堆</li>
<li>拾荒行动抽到汽油卡，只能2选1，要么弃到拾荒弃牌堆或者装到你的装备栏上(不能保留在手上)</li>
</ul>
<h3 id="人物效果"><a href="#人物效果" class="headerlink" title="人物效果"></a>人物效果</h3><ul>
<li>消防员的能量饮料能免疫饥饿伤害吗？</li>
</ul>
<blockquote>
<p>饥饿值仍然会继续增加，但会跳过伤害</p>
</blockquote>
<ul>
<li>狗和老兵是否有单独饥饿值？ </li>
</ul>
<blockquote>
<p>共享，老兵吃东西永远会留一口给狗</p>
</blockquote>
<ul>
<li>如果我在每次使用狗的特殊能力都装备了狗项圈，我就不会因为使用能力而受到伤害吗？</li>
</ul>
<blockquote>
<p>是的，完全正确</p>
</blockquote>
<ul>
<li>医生的肾上腺素有距离范围吗？ </li>
</ul>
<blockquote>
<p>没有范围</p>
</blockquote>
<ul>
<li>装备手套/手术刀回复血量时只恢复自身还是包括其他玩家？效果叠加吗？</li>
</ul>
<blockquote>
<p>外科医生对场上玩家进行治疗时，效果可以叠加(同时装备手套和手术刀时回复3点）。</p>
</blockquote>
<ul>
<li>我能使用机械师的维修能力或打出卡牌“神通广大”从任一弃牌堆拿1件装备卡吗?</li>
</ul>
<blockquote>
<p>可以。</p>
</blockquote>
<ul>
<li>我能通过上述的方法使用其他玩家的装备吗?</li>
</ul>
<blockquote>
<p>是的。</p>
</blockquote>
<ul>
<li>启示录异画卡男猎人的技能可以一回合多次使用吗？ </li>
</ul>
<blockquote>
<p>不可以，一回合同一个地点只能拾荒一次</p>
</blockquote>
<ul>
<li>当使用夜色掩护/取回/快速思考，我抽取拾荒卡还要受到所处地图块限制吗?</li>
</ul>
<blockquote>
<p>当你打出卡牌后可抽拾荒卡时，你可以选择任意拾荒牌堆。</p>
</blockquote>
<h3 id="装备和物品"><a href="#装备和物品" class="headerlink" title="装备和物品"></a>装备和物品</h3><ul>
<li>如何给燃料武器填加燃料子弹</li>
</ul>
<blockquote>
<p>花一个行动点，弃掉装备栏的汽油卡给武器添加</p>
</blockquote>
<ul>
<li>如果再次抽到已经打出的装备卡牌怎么办，弃掉吗?</li>
</ul>
<blockquote>
<p>不必，可以留在手牌中以作为备用。</p>
</blockquote>
<ul>
<li>可以在回合中弃掉面前的装备吗？ </li>
</ul>
<blockquote>
<p>可以，丢弃已装备不属于动作，详情可以看规则手册词汇表，弃牌不会浪费行动点</p>
</blockquote>
<ul>
<li>如果你有多个减伤物品，效果是否叠加？ </li>
</ul>
<blockquote>
<p>叠加</p>
</blockquote>
<ul>
<li>As far as damage reduction as well, does damage reduction reduce each attack or just the total damage one takes in a round? （就伤害减免而言，伤害减免是每次攻击都减少还是仅仅减少一个人在一轮中所受的总伤害?）</li>
</ul>
<blockquote>
<p>Damage reduction is from each source.（伤害减少是来自每一个来源。）</p>
</blockquote>
<ul>
<li>面前武器子弹是空的，手牌有一件武器，装备它，旧的放入弃牌堆，子弹是否填满新的武器？ </li>
</ul>
<blockquote>
<p>是的，就算弃牌堆捡起来在装上也是填满子弹</p>
</blockquote>
<ul>
<li>可以打出同种装备吗？可以装备一个同名的装备卡来摆脱之前装备的，并刷新弹药计数，等等?</li>
</ul>
<blockquote>
<p>可以，但是之前打出的装备卡需要弃掉</p>
<p>来源：<a href="https://www.boardgamegeek.com/thread/2129022/article/30943621#30943621">https://www.boardgamegeek.com/thread/2129022/article/30943621#30943621</a></p>
</blockquote>
<ul>
<li>我可以在回合中对其他玩家使用医疗用品或者解毒剂吗？ </li>
</ul>
<blockquote>
<p>只要是在一个板块上，你可以把资源给队友，但不能远程给队友用</p>
</blockquote>
<h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><ul>
<li>如果拥有能力的怪物被击晕了，能力是否还能激活？ </li>
</ul>
<blockquote>
<p>击晕可以防止攻击伤害，但不能防止任何持续状态和伤害效果</p>
</blockquote>
<ul>
<li>毒效果是怎么结算的？ </li>
</ul>
<blockquote>
<p>玩家：在你回合结束时受到毒的伤害 敌人：怪物在攻击结束时会受到毒的伤害</p>
</blockquote>
<ul>
<li>避难所可以防止饥饿伤害吗?</li>
</ul>
<blockquote>
<p>不可以避免</p>
</blockquote>
<ul>
<li>避难所可以避免毒吗?</li>
</ul>
<blockquote>
<p><del>在避难所，除了饥饿造成的伤害外，你不会受到伤害</del></p>
<p>不能避免</p>
<p><a href="https://boardgamegeek.com/thread/2186987/article/31803549#31803549">https://boardgamegeek.com/thread/2186987/article/31803549#31803549</a></p>
</blockquote>
<ul>
<li>饥饿值可以归0吗？</li>
</ul>
<blockquote>
<p>还是1，最低饥饿值是1</p>
</blockquote>
<ul>
<li>如果你有一个豁免状态效果的能力，你还能收到 毒token 吗?</li>
</ul>
<blockquote>
<p>不，你对状态效果免疫。</p>
</blockquote>
<ul>
<li>如果你有一个豁免状态效果的能力，你仍然从你已经拥有的 毒token 中受到伤害吗?</li>
</ul>
<blockquote>
<p>是的，如果你已经中毒了，它不能治愈你，但你不会再吃更多。</p>
<p>这个时候如果被治愈，你就不会再次中毒。</p>
</blockquote>
<ul>
<li>装备是否能减少毒的伤害？</li>
</ul>
<blockquote>
<p>They reduce damage by 1 from each monster - but do not reduce poison or hunger damage. i.e. a fire helmet protects 1 damage from each zombie attack but doesn’t help you from starving to death or dealing with poison.<br>他们减少每个怪物1点的伤害，但是不会减少毒药或者饥饿伤害。</p>
<p>也就是说，一个防火头盔可以保护你免受每次僵尸攻击的1点伤害，但是不能帮助你免于饿死或者中毒。</p>
</blockquote>
<h3 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h3><ul>
<li>当你需要一次移动多格地图板块如何结算？ </li>
</ul>
<blockquote>
<p>依次结算每块地图板块的效果</p>
</blockquote>
<ul>
<li>当我使用消防员的耐力/马/摩托车经过多个地图块时需要全部展示吗?还是只展示最后停留的地图块?</li>
</ul>
<blockquote>
<p>是的，要全部展示。此规则只对游骑兵的“踏过去”例外，该卡牌特别说明不会展示或触发地图块。</p>
</blockquote>
<h3 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h3><ul>
<li>基础任务5拆除炸弹，其中任务里有提到日记本，但在拾荒卡堆中并没有？ </li>
</ul>
<blockquote>
<p>设置是把boss卡和日记本放一边，当你完成任务同时抓取日记本和boss卡</p>
</blockquote>
<ul>
<li>KS中的小鬼和小丑是干嘛用的？ </li>
</ul>
<blockquote>
<p>自定义，你可以随便加入任何一组怪物牌堆进行游玩</p>
</blockquote>
<h3 id="怪物标记"><a href="#怪物标记" class="headerlink" title="怪物标记"></a>怪物标记</h3><ul>
<li>如果我想经过有怪物标记的板块，有怪纠缠，可以用潜行吗？ </li>
</ul>
<blockquote>
<p>不可以</p>
</blockquote>
<ul>
<li>当我潜行后如何放置怪物标记？如果标记要放在我自己的地图块上，我离开板块或进行拾荒是否要通过潜行检定?</li>
</ul>
<blockquote>
<p>潜行后依然将标记放在你的板块上。按照规则，你仅仅在进入有怪物标记的地图块时进行潜行检定，与标记同处1个地图块时不需要。</p>
</blockquote>
<ul>
<li>怪物标记用完了会怎么样？ </li>
</ul>
<blockquote>
<p>输掉游戏</p>
</blockquote>
<ul>
<li>可以攻击怪物标记吗?</li>
</ul>
<blockquote>
<p>不可以，你只能攻击已展示的怪物卡。可以想象怪物标记是威胁等级。你可以感受到远处危险的临近但不清楚究竟是何物。</p>
</blockquote>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>足智多谋卡可以利用在拾荒弃牌堆吗?</li>
</ul>
<blockquote>
<p>不能，拾荒卡弃牌堆等于移除游戏</p>
</blockquote>
<ul>
<li>当有玩家死亡，角色携带的物品需要移除吗？ </li>
</ul>
<blockquote>
<p>不需要移除，当有玩家死亡，其他玩家可以通过免费行动捡起当前死亡玩家的拾荒卡(必须在同一个和板块)当然这是变体规则，真正玩是，如果1个角色死亡，游戏就结束了。</p>
</blockquote>
<ul>
<li>避难所可以一直停留来防止伤害吗？可以防止怪物技能伤害吗？ </li>
</ul>
<blockquote>
<p>避难所不能长时间停留，如果下个回合你没有移动出去，避难所效果自动失效；不能。</p>
</blockquote>
<ul>
<li>激光无人机的被动为什么还要写出来，面前有怪不是就不能用潜行值吗？ </li>
</ul>
<blockquote>
<p>是的，所以在ks中我们去掉了被动的文字</p>
</blockquote>
<ul>
<li>当玩家死了，威胁区的怪物会发生什么？ </li>
</ul>
<blockquote>
<p>按基础规则你已经输了，怪物卡放入弃牌堆，当前会变成标记放到当前地图板块上</p>
</blockquote>
<ul>
<li>如果你有足够伤害干掉一个敌人，额外伤害会溢出到同一区域的其他怪物身上吗？ </li>
</ul>
<blockquote>
<p>不会</p>
</blockquote>
<ul>
<li>当你移动时，纠缠角色卡的怪物卡会一直跟着你吗?</li>
</ul>
<blockquote>
<p>是的，无论你如何移动，怪物始终紧紧跟随。</p>
</blockquote>
<ul>
<li>If you have a Flashlight equipped and you draw an Ambush while scavenging, can you put it on the bottom of the deck without resolving it? 如果你有一个手电筒，并且你在清理时画了一个伏击者，你可以把它放在牌库底部而不解决它吗?</li>
</ul>
<blockquote>
<p>No, Ambush takes precedence hence the “immediate” language on the card. If you flashlight an ambush, draw a monster card and keep the other non-ambush scavenge card as the thing you found.</p>
<p>不，<strong>伏击优先</strong>，因此卡片上的“立即”语言。</p>
<p>如果你用手电筒照亮一个伏击者，抽出一张怪物卡，并将另一张非伏击的拾取卡作为你发现的东西。</p>
</blockquote>
<h2 id="词汇表"><a href="#词汇表" class="headerlink" title="词汇表"></a>词汇表</h2><p><strong>行动:</strong> 花费1个行动触发卡牌文字的效果。</p>
<p><strong>纠缠:</strong> 如果怪物纠缠着你，它此时处于玩家个人区域的角色前面。</p>
<p><strong>攻击:</strong> 每次怪物的攻击对玩家造成<strong>实质伤害</strong>触发此效果。</p>
<p><strong>烧毁:</strong> 弃掉你牌库顶端的卡牌。</p>
<p><strong>反击:</strong> 如果怪物受到来自设定范围内的攻击且未死，它立刻对发动攻击的玩家展开反击。如果玩家的攻击带有眩晕效果，怪物在眩晕之前发动反击。如果怪物被攻击时已处于眩晕状态则不发动反击。</p>
<p><strong>摧毁:</strong> 怪物被杀时触发此效果。该效果只影响被怪物纠缠的玩家。当效果涉及装备，则你必须弃掉1张打出的装备牌。</p>
<p><strong>弃牌:</strong> 弃掉这张装备牌来触发该效果。该装备必须先打出才能使用这个行动。弃牌动作不算做1次行动。</p>
<p><strong>温顺:</strong> 拥有此特质的怪物在回合结束时不会发动攻击，除非它本回合受到了伤害。</p>
<p><strong>吸血:</strong> 打出伤害的该怪物会回复同等的血量。</p>
<p><strong>抽取:</strong> 只要怪物被抽出(即使在游戏设置阶段)立刻对抽出此卡牌的玩家生效。</p>
<p><strong>结束:</strong> 完成4个行动后，停留在此地触发效果。</p>
<p><strong>进入:</strong> 进入地图块后触发效果(<strong>发生在潜行检定之后</strong>)。</p>
<p><strong>装备:</strong> 当你打出这张牌时触发效果。</p>
<p><strong>疯狂:</strong> 疯狂卡效果各异，但都视为状态效果。</p>
<p><strong>被动:</strong> 只要卡牌在游戏中，被动效果就持续生效。</p>
<p><strong>中毒:</strong> 在你的角色卡上放置1个中毒标记。每回合结束时，玩家受到等同于中毒标记数量的伤害。中毒视为状态效果。</p>
<p><strong>展示:</strong> 地图块首次被翻开时触发效果。</p>
<p><strong>拾荒:</strong> 拾荒行动每回合在特定板块上只能进行一次。如果地图写明免费拾荒，玩家可用1个免费行动在对应的拾荒牌库抽1张拾荒卡。</p>
<p><strong>叠加:</strong> 如果同样的效果有多次出现则全部生效。</p>
<blockquote>
<p>举例:外星科学家提高全部外星伤害1点，游戏中有2个外星科学家则提高2点。</p>
</blockquote>
<p><strong>踩踏:</strong> 如果带有踩踏的怪物受到伤害它立刻攻击并处理伤害，而后纠缠距离最近的玩家。如果两个最近的玩家和你距离相同，你来决定由哪名玩家处理怪物。</p>
<p><strong>停止:</strong> 本回合不再移动或触发效果。</p>
<p><strong>击晕:</strong> 被击晕的怪物在你的回合结束阶段不进行攻击，在你的下回合开始时恢复正常。</p>
<p><strong>检定:</strong> 进行1次潜行检定。</p>
]]></content>
      <categories>
        <category>桌游</category>
      </categories>
      <tags>
        <tag>游戏</tag>
        <tag>桌游</tag>
        <tag>规则</tag>
        <tag>FAQ</tag>
      </tags>
  </entry>
</search>
